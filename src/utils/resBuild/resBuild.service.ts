import { Injectable } from '@nestjs/common'

/**
 * Интерфейс cборки ответа API.
 *
 * Этот интерфейс описывает структуру ответа, который возвращается из API.
 * Он включает в себя статус код, сообщение и данные, которые могут быть возвращены.
 *
 * @template T - Тип данных, которые могут быть возвращены в ответе.
 * @public
 */
export interface IResponseBuild<T> {
  /**
   * @cfg {number} statusCode - Статус код ответа.
   *
   * Этот код указывает на результат выполнения запроса.
   * Например:
   * - 200: Успешный запрос.
   * - 400: Ошибка клиента (например, неверный запрос).
   * - 404: Ресурс не найден.
   * - 500: Ошибка сервера.
   */
  statusCode: number

  /**
   * @cfg {string} [message] - Сообщение, связанное с ответом.
   *
   * Это поле может содержать дополнительную информацию о результате запроса.
   * Например, оно может использоваться для передачи сообщений об ошибках или
   * подтверждения успешного выполнения операции.
   */
  message?: string

  /**
   * @cfg {T} [data] - Данные, возвращаемые в ответе.
   *
   * Это поле содержит полезную информацию, которая может быть возвращена
   * в результате выполнения запроса. Тип данных определяется параметром T.
   * Например, это может быть объект, массив или любой другой тип данных.
   */
  data?: T
}

@Injectable()
export class ResponseBuildService {
  /**
   * Создает ответ API на основе переданных параметров.
   *
   * @param {IResponseBuild<T>} params - Параметры для сборки ответа.
   * @returns {IResponseBuild<T>} - Собранный ответ API.
   * @template T - Тип данных, которые могут быть возвращены в ответе.
   */
  build<T>(params: IResponseBuild<T>): IResponseBuild<T> {
    return {
      statusCode: params.statusCode ?? 200, // Используем переданный статус код или 200 по умолчанию
      message: params.message, // Сообщение, если оно есть
      data: params.data, // Данные, если они есть
    }
  }
}
