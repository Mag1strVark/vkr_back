// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(uuid()) // Уникальный идентификатор пользователя
  full_name       String // Имя пользователя
  email           String     @unique // Электронная почта пользователя (должна быть уникальной)
  password        String // Пароль для аутентификации пользователя
  role            UserRole // Роль пользователя (рекрутер или кандидат)
  sessions        Session[]  @relation("SessionParticipants") // Сессии, в которых участвует пользователь
  createdAt       DateTime   @default(now()) // Дата и время создания записи
  updatedAt       DateTime   @updatedAt // Дата и время последнего обновления записи
  createdSessions Session[]  @relation("CreatedSessions") // Сессии, созданные пользователем (рекрутером)
  solutions       Solution[] // Решения, предоставленные пользователем (кандидатом)
  feedbacks       Feedback[] // Обратная связь, оставленная пользователем (рекрутером)
  Interview       Interview? @relation("InterviewParticipants", fields: [interviewId], references: [id])
  interviewId     String?
}

model Session {
  id           String          @id @default(uuid()) // Уникальный идентификатор сессии
  title        String // Название сессии
  startTime    DateTime // Время начала сессии
  duration     Int // Продолжительность сессии в минутах
  createdBy    User            @relation("CreatedSessions", fields: [createdById], references: [id]) // Рекрутер, создавший сессию
  createdById  String // ID рекрутера, создавшего сессию
  participants User[]          @relation("SessionParticipants") // Кандидаты, участвующие в сессии
  tasks        Task[]          @relation("SessionTasks") // Задачи, предложенные в рамках сессии
  createdAt    DateTime        @default(now()) // Дата и время создания записи
  updatedAt    DateTime        @updatedAt // Дата и время последнего обновления записи
  feedbacks    Feedback[] // Обратная связь, оставленная по этой сессии
  status       InterviewStatus @default(SCHEDULED) // Добавлено поле статуса
  isActive     Boolean         @default(false) // Поле для отслеживания активности сессии
}

model FinalTest {
  id            String          @id @default(uuid())
  title         String
  description   String // Описание финального теста
  createdAt     DateTime        @default(now()) // Дата и время создания записи
  updatedAt     DateTime        @updatedAt // Дата и время последнего обновления записи
  QuestionGroup QuestionGroup[] @relation("FinalTestQuestions")
  Interview     Interview?      @relation("InterviewTests", fields: [interviewId], references: [id])
  interviewId   String?
}

model Task {
  id            String     @id @default(uuid()) // Уникальный идентификатор задачи
  userId        String
  categoryName  Category
  title         String // Название задачи
  correctAnswer Json // Правильный ответ
  description   String // Описание задачи
  inputData     Json // Исходные данные для кода
  sourceCode    String // Исходный код
  difficulty    Difficulty // Уровень сложности задачи (легкая, средняя, сложная)
  session       Session?   @relation("SessionTasks", fields: [sessionId], references: [id]) // Сессия, к которой относится задача
  sessionId     String? // ID сессии, к которой относится задача (может быть null)
  solutions     Solution[] // Решения, предоставленные кандидатами для этой задачи (необязательное поле)
  createdAt     DateTime   @default(now()) // Дата и время создания записи
  updatedAt     DateTime   @updatedAt // Дата и время последнего обновления записи
  Interview     Interview? @relation("InterviewTasks", fields: [interviewId], references: [id])
  interviewId   String?
}

model QuestionGroup {
  id           String     @id @default(uuid()) // Уникальный идентификатор группы вопросов
  userId       String
  categoryName Category
  title        String // Название группы вопросов
  author       String // Автор группы вопросов
  questions    Question[] // Список вопросов в группе
  createdAt    DateTime   @default(now()) // Дата и время создания записи
  updatedAt    DateTime   @updatedAt // Дата и время последнего обновления записи
  FinalTest    FinalTest? @relation("FinalTestQuestions", fields: [finalTestId], references: [id])
  finalTestId  String?
}

model Question {
  id             String        @id @default(uuid()) // Уникальный идентификатор вопроса
  developerLevel String // Уровень разработчика
  questionText   String // Текст вопроса
  correctAnswer  String // Правильный ответ
  comment        String? // Комментарий
  group          QuestionGroup @relation(fields: [groupId], references: [id]) // Группа вопросов
  groupId        String // ID группы вопросов
  createdAt      DateTime      @default(now()) // Дата и время создания записи
  updatedAt      DateTime      @updatedAt // Дата и время последнего обновления записи
}

model Solution {
  id          String   @id @default(uuid()) // Уникальный идентификатор решения
  code        String // Код, написанный кандидатом для решения задачи
  isCorrect   Boolean // Логическое значение, указывающее, является ли решение правильным
  task        Task     @relation(fields: [taskId], references: [id]) // Задача, на которую дано решение
  taskId      String // ID задачи, на которую дано решение
  candidate   User     @relation(fields: [candidateId], references: [id]) // Кандидат, предоставивший решение
  candidateId String // ID кандидата, предоставившего решение
  createdAt   DateTime @default(now()) // Дата и время создания записи
  updatedAt   DateTime @updatedAt // Дата и время последнего обновления записи
}

model Feedback {
  id          String   @id @default(uuid()) // Уник альный идентификатор обратной связи
  comment     String // Комментарий рекрутера о производительности кандидата
  score       Int // Оценка кандидата по определенной шкале (например, от 1 до 10)
  session     Session  @relation(fields: [sessionId], references: [id]) // Сессия, к которой относится обратная связь
  sessionId   String // ID сессии, к которой относится обратная связь
  candidate   User     @relation(fields: [candidateId], references: [id]) // Кандидат, для которого оставлена обратная связь
  candidateId String // ID кандидата, для которого оставлена обратная связь
  createdAt   DateTime @default(now()) // Дата и время создания записи
  updatedAt   DateTime @updatedAt // Дата и время последнего обновления записи
}

model CandidateInterview {
  id              String         @id @default(uuid()) // Уникальный идентификатор кандидата
  fullName        String // ФИО кандидата
  email           String         @unique // Электронная почта кандидата (должна быть уникальной)
  contactDetails  String // Контактные данные кандидата
  imageUrl        String? // Ссылка на картинку кандидата (необязательное поле)
  position        String // Должность по вакансии
  applicationDate DateTime // Дата отклика
  interviewStage  InterviewStage // Этап собеседования
  comment         String? // Комментарий к карточке кандидата (необязательное поле)
  createdAt       DateTime       @default(now()) // Дата и время создания записи
  updatedAt       DateTime       @updatedAt // Дата и время последнего обновления записи
}

model Interview {
  id                String         @id @default(uuid()) // Уникальный идентификатор собеседования
  title             String // Название собеседования
  status            InterviewStage // Статус собеседования
  candidateImageUrl String? // Ссылка на картинку кандидата (необязательное поле)
  candidateFullName String // ФИО кандидата
  interviewDateTime DateTime // Дата и время проведения собеседования
  duration          Int // Длительность собеседования в минутах
  participants      User[]         @relation("InterviewParticipants") // Список участников собеседования
  tests             FinalTest[]    @relation("InterviewTests") // Список тестов, связанных с собеседованием
  tasks             Task[]         @relation("InterviewTasks") // Список задач, связанных с собеседованием
  finalComment      String? // Итоговый комментарий к собеседованию (необязательное поле)
  reportLink        String? // Итоговый отчет (ссылка на него) (необязательное поле)
  createdAt         DateTime       @default(now()) // Дата и время создания записи
  updatedAt         DateTime       @updatedAt // Дата и время последнего обновления записи
}

// Перечисление для ролей пользователей
enum UserRole {
  HR // HR-менджер
  INTERVIEWER // Собеседующий
  CANDIDATE // Кандидат
}

// Перечисление для уровней сложности задач
enum Difficulty {
  EASY // Легкая
  MEDIUM // Средняя
  HARD // Сложная
}

enum InterviewStatus {
  SCHEDULED // Запланирован
  IN_PROGRESS // В процессе
  COMPLETED // Завершён
  CANCELED // Отменён
}

enum Category {
  FRONTEND
  BACKEND
  QA
}

// Перечисление для этапов собеседования
enum InterviewStage {
  SCHEDULED // Собеседование назначено
  NOT_SCHEDULED // Собеседование не назначено
  PASSED // Собеседование пройдено
  CANCELED // Собеседование отменено
  REJECTED // Отказ
  HIRED // Принят на работу
}
