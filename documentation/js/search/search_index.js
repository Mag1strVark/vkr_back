var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddTasksDto.html",[0,0.121,1,2.812]],["body/classes/AddTasksDto.html",[0,0.21,1,4.862,2,0.015,3,0.183,4,0.183,5,5.893,6,4.899,7,5.215,8,0.782,9,2.553,10,6.789,11,5.303,12,5.893,13,5.893,14,5.303,15,3.071,16,5.644,17,2.693,18,5.644,19,0.22,20,4.217,21,2.936,22,2.336,23,3.071,24,1.632,25,0.183,26,2.062,27,5.644]],["title/classes/ApiError.html",[0,0.121,28,2.294]],["body/classes/ApiError.html",[0,0.099,2,0.015,3,0.104,4,0.104,8,0.803,19,0.104,25,0.104,28,4.686,29,2.77,30,3.627,31,2.2,32,7.794,33,3.678,34,7.184,35,4.643,36,4.643,37,6.01,38,4.643,39,2.162,40,4.534,41,4.643,42,5.473,43,3.191,44,4.643,45,3.191,46,3.627,47,4.643,48,2.884,49,4.643,50,3.191,51,3.627,52,3.325,53,3.191,54,4.643,55,4.643,56,2.286,57,0.343,58,2.493,59,1.71,60,3.191,61,3.191,62,3.191,63,1.921,64,1.082,65,2,66,3.191,67,3.191,68,3.191]],["title/modules/AppModule.html",[69,0.976,70,2.812]],["body/modules/AppModule.html",[0,0.139,2,0.015,3,0.146,4,0.146,17,1.783,19,0.259,25,0.146,57,0.483,69,1.631,70,5.911,71,1.783,72,1.861,73,1.861,74,1.711,75,1.861,76,1.861,77,3.902,78,3.902,79,4.604,80,5.147,81,4.924,82,4.924,83,4.924,84,4.924,85,4.924,86,4.604,87,4.924,88,4.924,89,4.924,90,4.495,91,4.495,92,4.495,93,4.495,94,4.495,95,4.495,96,4.495,97,4.495,98,3.511,99,4.495,100,4.495,101,4.495,102,4.495,103,4.495,104,3.511,105,4.495,106,4.495,107,3.902,108,4.495]],["title/modules/AuthModule.html",[69,0.976,79,2.439]],["body/modules/AuthModule.html",[0,0.143,2,0.015,3,0.15,4,0.15,19,0.242,25,0.15,57,0.498,69,1.655,71,1.838,72,1.917,73,1.917,74,1.763,75,2.484,76,2.484,79,5.027,86,4.642,104,3.618,109,4.021,110,4.632,111,4.021,112,4.021,113,3.772,114,4.165,115,3.909,116,4.632,117,4.767,118,4.632,119,4.632,120,4.632,121,4.021,122,3.077,123,3.077,124,2.706]],["title/injectables/AuthRepository.html",[113,1.86,125,0.465]],["body/injectables/AuthRepository.html",[0,0.112,2,0.015,3,0.117,4,0.117,8,0.783,17,2.659,19,0.206,25,0.117,57,0.389,59,1.582,63,2.234,64,1.258,113,2.781,125,0.602,126,2.826,127,5.079,128,5.079,129,3.967,130,4.409,131,2.114,132,2.878,133,3.618,134,2.967,135,5.079,136,3.618,137,3.015,138,5.079,139,3.618,140,1.428,141,1.98,142,3.374,143,3.333,144,3.618,145,1.73,146,3.374,147,3.506,148,3.618,149,2.114,150,2.248,151,2.248,152,0.97,153,4.97,154,1.799,155,2.404,156,1.893,157,1.046,158,2.751,159,5.868,160,5.868,161,2.404,162,3.618,163,1.174]],["title/injectables/AuthService.html",[114,2.054,125,0.465]],["body/injectables/AuthService.html",[0,0.065,2,0.015,3,0.069,4,0.069,8,0.795,17,2.105,19,0.212,25,0.157,28,3.1,57,0.227,59,1.626,63,1.862,64,1.049,113,2.683,114,1.773,115,3.111,122,1.405,125,0.402,129,2.647,130,2.942,137,2.196,140,1.163,141,1.144,142,2.252,143,2.639,145,1.252,146,2.252,147,2.776,150,1.314,151,1.314,152,1.852,154,2.411,156,2.537,158,3.065,161,1.405,163,1.837,164,1.405,165,1.697,166,3.389,167,2.942,168,2.942,169,2.116,170,2.477,171,2.537,172,2.116,173,2.427,174,5,175,4.624,176,2.116,177,4.149,178,4.062,179,2.116,180,2.427,181,2.116,182,4.149,183,2.427,184,2.116,185,2.116,186,1.515,187,1.515,188,1.515,189,1.405,190,0.876,191,1.515,192,1.405,193,1.755,194,1.314,195,4.259,196,1.236,197,3.073,198,2.105,199,1.405,200,1.107,201,2.009,202,2.427,203,1.515,204,1.515,205,1.894,206,1.515,207,1.515,208,2.427,209,2.427,210,2.252,211,2.427,212,2.427,213,1.515,214,2.252,215,1.515,216,2.427,217,1.515,218,2.537,219,1.515,220,2.352,221,2.427,222,2.427,223,1.515,224,2.427,225,4.055,226,3.037,227,3.037,228,3.037,229,2.817,230,2.817,231,3.037,232,2.634,233,2.252,234,1.515,235,1.405,236,1.515,237,1.515,238,2.427,239,2.427,240,1.515,241,1.515,242,1.515,243,1.515]],["title/controllers/AuthenticationController.html",[117,2.812,244,1.557]],["body/controllers/AuthenticationController.html",[0,0.081,2,0.015,3,0.085,4,0.085,17,2.459,19,0.209,24,0.759,25,0.085,31,2.584,48,4.234,56,1.879,57,0.282,59,1.653,63,1.915,64,1.078,65,1.993,114,2.548,117,3.906,121,2.278,143,2.923,145,1.6,147,3.075,150,1.63,151,1.63,152,1.076,158,2.359,165,1.717,167,3.482,168,3.482,174,5.192,175,4.673,177,4.511,178,4.457,182,2.492,196,1.533,200,1.373,201,1.901,205,1.519,218,2.854,220,2.076,244,1.041,245,2.278,246,2.624,247,4.012,248,4.012,249,2.624,250,2.854,251,4.012,252,2.624,253,6.448,254,1.77,255,2.624,256,4.012,257,2.624,258,2.624,259,4.012,260,2.624,261,2.624,262,4.012,263,2.624,264,2.923,265,1.995,266,1.448,267,3.434,268,1.448,269,2.344,270,2.624,271,2.624,272,2.624,273,2.713,274,2.624,275,5.454,276,3.01,277,2.624,278,3.01,279,3.187,280,3.187,281,2.624,282,2.624,283,2.624,284,4.012,285,2.624,286,2.624,287,2.624]],["title/controllers/CandidateInterviewController.html",[244,1.557,288,2.812]],["body/controllers/CandidateInterviewController.html",[0,0.105,2,0.015,3,0.111,4,0.111,8,0.813,19,0.228,24,0.985,25,0.111,31,3.104,39,2.211,57,0.366,59,0.847,64,1.295,65,2.393,140,1.4,145,1.759,157,0.985,165,1.853,205,1.824,220,2.493,244,1.351,250,3.427,254,2.126,264,3.388,265,2.42,266,2.685,267,1.99,268,3.133,273,3.258,276,3.615,278,3.615,279,3.827,280,3.827,288,3.485,289,2.956,290,3.405,291,1.852,292,2.074,293,2.252,294,2.014,295,1.852,296,1.473,297,4.357,298,3.405,299,1.296,300,3.022,301,3.405,302,1.782,303,3.24,304,3.418,305,3.405,306,2.305,307,1.41,308,3.232,309,3.405,310,1.296,311,3.022,312,3.405,313,2.115,314,2.115,315,2.115,316,3.232,317,3.526,318,2.956,319,1.195,320,2.66,321,1.782,322,2.115,323,2.545,324,2.115,325,1.879,326,2.115,327,1.99,328,2.115,329,2.115,330,1.99,331,3.405,332,1.023,333,2.262,334,3.405,335,2.439,336,3.405,337,2.262,338,3.405,339,2.66,340,3.405,341,2.66,342,3.405,343,2.439,344,3.405]],["title/modules/CandidateInterviewModule.html",[69,0.976,80,2.608]],["body/modules/CandidateInterviewModule.html",[0,0.173,2,0.015,3,0.182,4,0.182,19,0.245,25,0.182,57,0.602,69,1.804,71,2.222,72,2.318,73,2.318,74,2.131,75,2.797,76,2.318,80,5.312,124,3.272,288,5.197,317,4.868,318,4.861,345,4.861,346,4.861,347,4.868,348,5.6,349,5.6,350,4.861]],["title/injectables/CandidateInterviewRepository.html",[125,0.465,347,2.439]],["body/injectables/CandidateInterviewRepository.html",[0,0.117,2,0.015,3,0.123,4,0.123,8,0.829,19,0.211,25,0.123,39,2.288,57,0.407,64,1.347,125,0.622,131,2.214,132,2.936,134,3.064,137,1.568,140,1.449,145,1.82,149,2.214,152,1.613,157,1.096,163,1.702,165,1.882,190,1.568,205,1.055,254,2.212,291,1.996,292,1.916,293,2.081,294,2.171,295,1.996,296,2.268,297,4.49,299,1.996,302,2.744,303,3.689,306,2.85,307,2.171,310,1.996,319,1.33,320,2.96,332,1.138,347,3.258,351,3.289,352,3.789,353,3.789,354,3.789,355,7.228,356,3.789,357,3.737,358,3.258,359,3.789,360,3.789,361,3.289,362,3.789,363,3.789,364,3.789,365,3.484,366,3.789,367,3.289,368,4.308,369,4.308,370,4.308,371,3.289,372,5.244,373,4.552,374,3.789,375,3.789,376,2.714,377,3.789,378,3.789]],["title/injectables/CandidateInterviewService.html",[125,0.465,317,2.439]],["body/injectables/CandidateInterviewService.html",[0,0.133,2,0.015,3,0.14,4,0.14,8,0.846,19,0.208,25,0.14,39,2.376,57,0.462,64,1.407,125,0.678,140,1.319,145,1.839,165,1.914,200,2.25,201,2.038,205,1.788,254,2.311,291,2.175,292,2.088,293,2.268,294,2.366,295,2.175,296,2.472,297,4.641,299,2.175,302,2.991,303,3.579,304,3.776,306,2.038,307,2.366,310,2.175,317,3.551,319,1.51,320,3.36,332,1.292,347,4.548,350,3.734,379,3.734,380,4.301,381,4.301,382,4.301,383,4.301,384,4.301,385,4.301,386,4.301,387,4.301,388,4.301,389,4.301,390,4.301,391,4.301]],["title/classes/CreateCandidateInterviewDto.html",[0,0.121,297,2.439]],["body/classes/CreateCandidateInterviewDto.html",[0,0.17,2,0.015,3,0.131,4,0.131,8,0.865,9,3.385,15,3.604,19,0.202,21,3.181,22,1.676,23,3.431,24,1.171,25,0.131,26,2.735,137,2.577,190,1.676,297,3.409,367,5.405,371,5.405,392,6.585,393,3.514,394,6.226,395,4.459,396,6.226,397,6.226,398,6.244,399,4.863,400,4.049,401,4.049,402,4.049,403,4.049,404,4.997,405,4.049,406,3.514,407,4.049,408,4.049,409,4.049,410,4.049,411,4.049,412,3.722,413,3.931,414,4.049]],["title/classes/CreateFinalTestDto.html",[0,0.121,415,2.439]],["body/classes/CreateFinalTestDto.html",[0,0.183,2,0.015,3,0.147,4,0.147,8,0.825,9,3.161,12,5.725,19,0.192,21,2.852,22,1.881,23,3.279,24,1.314,25,0.147,26,2.766,145,1.53,412,3.476,415,4.342,416,6.293,417,4.816,418,3.945,419,6.595,420,5.725,421,2.983,422,3.938,423,4.545,424,4.545,425,4.545,426,4.545,427,4.545]],["title/classes/CreateInterviewDto.html",[0,0.121,428,2.439]],["body/classes/CreateInterviewDto.html",[0,0.148,2,0.015,3,0.107,4,0.107,7,4.003,8,0.833,9,3.37,19,0.181,20,4.321,21,3.008,22,1.371,23,3.406,24,0.958,25,0.107,26,2.723,33,3.085,39,1.548,145,1.231,190,1.371,398,4.851,399,3.725,412,3.54,421,2.528,422,3.713,428,2.963,429,6.537,430,2.875,431,4.851,432,4.851,433,3.713,434,4.851,435,4.851,436,5.589,437,4.851,438,5.589,439,3.312,440,4.851,441,3.312,442,3.312,443,3.312,444,3.312,445,3.312,446,3.312,447,3.312,448,3.312,449,3.312,450,3.312,451,4.379]],["title/classes/CreateQuestionWithGroupDto.html",[0,0.121,452,2.294]],["body/classes/CreateQuestionWithGroupDto.html",[0,0.187,2,0.015,3,0.124,4,0.124,8,0.815,9,2.949,15,1.732,19,0.196,20,3.282,21,3.242,22,1.585,23,3.432,24,1.107,25,0.124,26,2.772,140,1.34,141,2.2,145,1.562,190,1.585,395,2.742,412,3.673,421,2.736,422,4.332,452,3.086,453,5.525,454,2.991,455,4.332,456,4.67,457,4.018,458,3.829,459,3.164,460,3.829,461,4.332,462,3.829,463,3.829,464,3.829,465,3.829,466,3.829,467,3.829,468,4.586,469,2.991,470,2.991,471,2.742]],["title/classes/CreateSessionDto.html",[0,0.121,472,2.294]],["body/classes/CreateSessionDto.html",[0,0.192,2,0.015,3,0.131,4,0.131,8,0.856,9,3.25,15,3.586,19,0.178,20,4.139,21,2.881,22,1.669,23,3.466,24,1.166,25,0.178,26,2.77,39,2.016,137,2.265,140,1.369,154,2.005,404,3.92,412,3.655,413,3.92,421,2.81,433,4.128,451,3.92,472,3.197,473,5.74,474,2.888,475,4.128,476,5.393,477,4.853,478,3.86,479,4.032,480,4.032,481,4.427,482,4.032,483,4.032,484,4.751,485,4.751,486,4.032,487,4.032,488,4.032,489,4.032,490,4.032,491,4.751,492,4.751,493,4.751,494,3.636,495,3.149]],["title/classes/CreateTaskDto.html",[0,0.121,496,2.439]],["body/classes/CreateTaskDto.html",[0,0.171,2,0.015,3,0.132,4,0.132,8,0.839,9,3.392,15,3.475,19,0.203,21,3.118,22,1.69,23,3.437,24,1.181,25,0.132,26,2.832,140,1.134,141,2.11,190,1.69,404,4.797,412,3.78,421,2.828,422,2.713,456,4.479,459,3.272,471,4.479,496,3.429,497,6.597,498,3.544,499,7.373,500,6.253,501,6.253,502,4.083,503,6.698,504,4.479,505,4.083,506,4.083,507,4.083,508,5.52,509,4.083,510,4.083,511,4.083,512,4.083,513,4.083,514,4.083,515,4.083,516,3.544,517,3.544,518,4.083]],["title/modules/EmailModule.html",[69,0.976,519,2.608]],["body/modules/EmailModule.html",[0,0.172,2,0.015,3,0.18,4,0.18,19,0.218,25,0.18,57,0.596,69,1.797,71,2.2,72,2.296,73,2.296,74,2.111,75,2.781,76,2.781,519,5.256,520,4.815,521,4.815,522,4.815,523,5.065,524,5.547,525,5.547]],["title/injectables/EmailService.html",[125,0.465,523,2.439]],["body/injectables/EmailService.html",[0,0.131,2,0.015,3,0.138,4,0.138,8,0.844,19,0.221,25,0.138,57,0.455,59,1.691,63,1.488,125,0.671,152,1.136,158,2.941,165,1.526,197,2.108,200,2.961,201,3.02,205,1.18,523,4.225,526,3.679,527,6.372,528,6.372,529,5.66,530,5.903,531,4.238,532,7.29,533,6.151,534,6.151,535,4.238,536,5.66,537,4.238,538,4.238,539,4.238,540,4.421,541,4.238,542,4.238,543,4.238,544,4.238,545,4.238,546,5.66,547,4.238,548,4.238,549,4.238,550,4.238,551,4.238,552,4.238]],["title/classes/FilterSessionsDto.html",[0,0.121,553,2.439]],["body/classes/FilterSessionsDto.html",[0,0.195,2,0.015,3,0.162,4,0.162,8,0.676,19,0.204,21,2.719,22,2.063,25,0.162,33,3.802,39,2.348,190,2.063,306,3.264,399,5.651,421,3.116,440,4.325,451,5.73,516,4.325,553,3.906,554,6.713,555,4.325,556,5.979,557,5.979,558,5.979,559,4.983,560,4.983,561,4.983,562,4.983,563,6.888,564,4.983,565,4.983,566,4.983,567,4.983]],["title/controllers/FinalTestController.html",[244,1.557,568,2.812]],["body/controllers/FinalTestController.html",[0,0.078,2,0.015,3,0.082,4,0.082,8,0.797,19,0.206,24,0.729,25,0.082,31,2.735,39,2.13,57,0.271,59,1.675,63,2.026,64,1.141,65,2.109,140,1.535,145,1.695,157,0.729,158,2.496,165,1.76,205,1.607,218,3.02,220,2.197,244,1,250,3.02,254,1.873,264,3.033,265,1.935,266,2.147,267,3.563,268,2.622,273,2.87,276,3.185,278,3.185,279,3.372,280,3.372,291,1.481,292,1.736,293,1.885,294,1.61,295,1.481,296,1.09,299,0.959,300,2.417,302,1.319,303,3.02,304,3.185,306,2.251,307,1.044,308,2.585,310,0.959,311,2.417,313,1.566,314,1.566,315,1.566,316,2.585,319,0.885,321,1.319,322,1.566,323,2.035,324,1.566,325,1.391,326,1.566,327,1.473,328,1.566,329,1.566,330,1.473,332,0.757,333,1.675,335,1.806,337,1.675,339,1.969,341,1.969,343,1.806,357,2.417,358,2.417,415,4.185,417,1.675,568,3.825,569,2.188,570,2.521,571,2.521,572,2.521,573,2.521,574,2.521,575,2.521,576,2.951,577,2.188,578,1.969,579,2.521,580,2.521,581,2.521,582,2.521,583,2.188,584,2.521,585,2.521]],["title/modules/FinalTestModule.html",[69,0.976,81,2.608]],["body/modules/FinalTestModule.html",[0,0.158,2,0.015,3,0.165,4,0.165,19,0.237,25,0.165,57,0.548,69,1.73,71,2.022,72,2.11,73,2.11,74,1.94,75,2.64,76,2.11,81,5.22,124,2.978,568,4.985,576,4.759,577,4.424,586,4.424,587,4.424,588,5.097,589,5.097,590,4.237,591,4.424]],["title/classes/FinalTestRepository.html",[0,0.121,590,2.608]],["body/classes/FinalTestRepository.html",[0,0.08,2,0.015,3,0.084,4,0.084,8,0.8,17,1.574,19,0.129,25,0.084,26,1.45,39,2.148,59,1.646,63,2.05,64,1.154,131,1.511,132,2.449,134,2.318,140,1.603,145,1.591,149,1.511,152,1.652,157,0.748,158,2.525,163,1.566,165,1.769,205,1.105,210,1.718,254,1.895,291,1.51,292,1.45,293,1.574,294,1.643,295,1.51,296,1.716,299,1.51,302,2.076,303,3.356,304,3.653,306,2.565,307,1.643,310,1.51,319,0.908,332,0.777,357,3.627,358,3.363,365,2.636,368,2.842,369,2.842,370,2.842,376,1.852,415,4.217,417,1.718,420,4.19,421,2.449,457,2.636,578,2.02,590,3.597,592,2.245,593,2.586,594,2.586,595,2.586,596,2.586,597,2.586,598,2.586,599,2.586,600,2.586,601,5.069,602,2.245,603,3.771,604,3.968,605,2.586,606,2.586,607,2.586,608,2.586,609,2.586,610,2.842,611,3.968,612,3.099,613,2.586,614,2.586,615,2.586,616,2.586,617,2.586,618,3.968,619,3.444,620,2.245,621,2.586,622,2.586,623,2.245,624,2.245,625,2.245,626,2.586,627,2.586]],["title/injectables/FinalTestService.html",[125,0.465,576,2.439]],["body/injectables/FinalTestService.html",[0,0.093,2,0.015,3,0.098,4,0.098,8,0.821,19,0.172,25,0.098,39,2.248,57,0.323,59,1.723,63,2.187,64,1.232,125,0.527,140,1.588,145,1.743,157,0.869,158,2.695,165,1.817,254,2.022,291,1.691,292,1.623,293,1.763,294,1.839,295,1.691,296,1.921,299,1.691,302,2.325,303,3.26,304,3.439,306,2.105,307,1.839,310,1.691,319,1.055,332,0.903,357,2.76,358,2.76,415,4.395,417,1.997,576,3.628,578,2.348,590,4.334,591,2.609,628,2.609,629,3.006,630,3.006,631,3.006,632,3.006,633,3.006,634,3.006,635,3.006,636,3.006,637,3.006,638,3.006,639,3.006,640,3.006]],["title/interfaces/IData.html",[193,1.625,641,2.812]],["body/interfaces/IData.html",[0,0.139,2,0.015,3,0.146,4,0.146,8,0.86,19,0.226,24,1.302,25,0.146,26,2.399,33,3.624,39,2.26,141,2.502,152,1.207,157,1.302,163,2.26,165,1.41,193,1.864,205,1.254,264,3.464,265,2.239,273,3.265,332,1.353,641,4.988,642,3.517,643,5.792,644,6.436,645,5.44,646,4.49,647,4.601,648,3.517,649,4.601,650,4.601,651,3.225,652,5.128,653,3.225,654,3.624,655,3.225,656,5.44,657,3.908,658,3.517,659,2.991,660,4.362,661,3.908,662,3.908,663,3.908,664,3.908,665,3.908,666,4.601,667,3.908,668,3.908,669,3.908,670,3.908,671,3.908,672,3.908,673,3.908,674,3.908]],["title/interfaces/IGenerateTokens.html",[193,1.625,194,2.439]],["body/interfaces/IGenerateTokens.html",[0,0.082,2,0.015,3,0.086,4,0.086,8,0.815,17,2.179,19,0.227,25,0.178,28,3.455,57,0.286,59,1.735,63,2.076,64,1.169,113,2.327,114,1.392,115,2.57,122,1.767,125,0.481,137,2.448,140,1.215,141,0.898,142,1.767,143,2.443,145,1.047,146,1.767,147,2.57,150,1.653,151,1.653,152,1.953,154,2.732,156,2.874,158,3.018,161,1.767,163,2.022,164,1.767,165,1.416,170,1.554,171,2.121,173,1.905,174,4.839,175,4.408,177,3.871,178,3.673,180,1.905,182,4.471,183,1.905,186,1.905,187,1.905,188,1.905,189,1.767,190,1.101,191,1.905,192,1.767,193,2.033,194,2.518,195,4.999,196,1.554,197,3.322,198,2.518,199,1.767,200,1.392,201,2.327,202,2.904,203,1.905,204,1.905,205,2.004,206,1.905,207,1.905,208,2.904,209,2.904,210,2.693,211,2.904,212,2.904,213,1.905,214,2.693,215,1.905,216,2.904,217,1.905,218,2.874,219,1.905,220,2.542,221,2.904,222,2.904,223,1.905,224,2.904,225,4.462,226,3.518,227,3.518,228,3.518,229,3.263,230,3.263,231,3.518,232,3.051,233,2.693,234,1.905,235,1.767,236,1.905,237,1.905,238,2.904,239,2.904,240,1.905,241,1.905,242,1.905,243,1.905]],["title/interfaces/ILogin.html",[193,1.625,196,2.294]],["body/interfaces/ILogin.html",[0,0.082,2,0.015,3,0.086,4,0.086,8,0.804,17,2.179,19,0.227,25,0.178,28,3.455,57,0.286,59,1.735,63,2.076,64,1.169,113,2.327,114,1.392,115,2.57,122,1.767,125,0.481,137,2.448,140,1.215,141,0.898,142,1.767,143,2.443,145,1.047,146,1.767,147,2.57,150,1.653,151,1.653,152,1.953,154,2.732,156,2.874,158,3.018,161,1.767,163,2.022,164,1.767,165,1.416,170,1.554,171,2.121,173,1.905,174,4.839,175,4.408,177,3.871,178,3.673,180,1.905,182,4.251,183,1.905,186,1.905,187,1.905,188,1.905,189,1.767,190,1.101,191,1.905,192,1.767,193,2.033,194,1.653,195,4.999,196,2.369,197,3.529,198,3.412,199,1.767,200,1.392,201,2.327,202,2.904,203,1.905,204,1.905,205,2.004,206,1.905,207,1.905,208,2.904,209,2.904,210,2.693,211,2.904,212,2.904,213,1.905,214,2.693,215,1.905,216,2.904,217,1.905,218,2.874,219,1.905,220,2.542,221,2.904,222,2.904,223,1.905,224,2.904,225,4.462,226,3.518,227,3.518,228,3.518,229,3.263,230,3.263,231,3.518,232,3.051,233,2.693,234,1.905,235,1.767,236,1.905,237,1.905,238,2.904,239,2.904,240,1.905,241,1.905,242,1.905,243,1.905]],["title/interfaces/IResponseBuild.html",[193,1.625,675,2.812]],["body/interfaces/IResponseBuild.html",[0,0.106,2,0.015,3,0.111,4,0.111,8,0.667,19,0.111,25,0.159,30,5.332,39,2.015,40,4.24,46,3.816,51,3.816,57,0.368,59,0.852,63,1.202,64,0.677,125,0.579,163,2.215,193,1.418,269,2.001,660,4.125,675,4.889,676,2.676,677,4.241,678,4.889,679,5.61,680,4.241,681,4.241,682,2.973,683,4.944,684,2.973,685,2.973,686,2.973,687,2.973,688,2.973]],["title/interfaces/IUser.html",[193,1.625,198,2.439]],["body/interfaces/IUser.html",[0,0.081,2,0.015,3,0.085,4,0.085,8,0.823,17,2.165,19,0.226,25,0.177,28,3.435,57,0.282,59,1.73,63,2.064,64,1.162,113,2.309,114,1.374,115,2.55,122,1.745,125,0.476,137,2.754,140,1.367,141,0.886,142,1.745,143,2.424,145,1.037,146,1.745,147,2.55,150,1.632,151,1.632,152,1.948,154,3.208,156,3.375,158,3.008,161,1.745,163,2.012,164,1.745,165,1.408,170,1.534,171,2.1,173,1.881,174,4.826,175,4.395,177,3.851,178,3.652,180,1.881,182,4.235,183,1.881,186,1.881,187,1.881,188,1.881,189,1.745,190,1.087,191,1.881,192,1.745,193,2.017,194,1.632,195,4.62,196,1.534,197,3.308,198,3.027,199,3.238,200,1.374,201,2.309,202,2.875,203,1.881,204,1.881,205,1.998,206,1.881,207,1.881,208,2.875,209,2.875,210,2.667,211,2.875,212,2.875,213,1.881,214,2.667,215,1.881,216,2.875,217,1.881,218,2.855,219,1.881,220,2.532,221,2.875,222,2.875,223,1.881,224,2.875,225,4.44,226,3.49,227,3.49,228,3.49,229,3.238,230,3.238,231,3.49,232,3.027,233,2.667,234,1.881,235,1.745,236,1.881,237,1.881,238,2.875,239,2.875,240,1.881,241,1.881,242,1.881,243,1.881]],["title/controllers/InterviewController.html",[244,1.557,689,2.812]],["body/controllers/InterviewController.html",[0,0.092,2,0.015,3,0.096,4,0.096,8,0.792,19,0.218,24,0.858,25,0.096,31,2.936,39,2.107,57,0.319,59,1.753,64,1.225,65,2.264,140,1.449,145,1.782,157,0.858,165,1.813,205,1.726,220,2.358,244,1.177,250,3.242,254,2.011,264,3.228,265,2.188,266,2.428,267,1.733,268,2.894,273,3.082,276,3.42,278,3.42,279,3.62,280,3.62,291,1.674,292,1.916,293,2.081,294,1.821,295,1.674,296,1.282,299,1.129,300,2.733,302,1.552,303,3.242,304,3.42,306,2.485,307,1.228,308,2.923,310,1.129,311,2.733,313,1.842,314,1.842,315,1.842,316,2.923,319,1.041,321,1.552,322,1.842,323,2.302,324,1.842,325,1.637,326,1.842,327,1.733,328,1.842,329,1.842,330,1.733,332,0.891,333,1.97,335,2.124,337,1.97,339,2.316,341,2.316,343,2.124,428,4.174,583,2.574,689,3.151,690,2.574,691,2.966,692,2.966,693,2.966,694,2.966,695,2.966,696,2.966,697,3.258,698,2.574,699,2.316,700,2.966,701,2.966,702,2.966,703,2.966,704,2.966,705,2.966]],["title/modules/InterviewModule.html",[69,0.976,82,2.608]],["body/modules/InterviewModule.html",[0,0.169,2,0.015,3,0.178,4,0.178,19,0.243,25,0.178,57,0.588,69,1.786,71,2.171,72,2.266,73,2.266,74,2.083,75,2.759,76,2.266,82,5.29,124,3.198,689,5.146,697,4.842,698,4.751,706,4.751,707,4.751,708,4.842,709,5.473,710,5.473,711,4.751]],["title/injectables/InterviewRepository.html",[125,0.465,708,2.439]],["body/injectables/InterviewRepository.html",[0,0.09,2,0.015,3,0.094,4,0.094,8,0.788,17,2.052,19,0.168,25,0.094,33,2.386,39,2.089,57,0.311,59,1.704,64,1.213,125,0.513,131,1.693,132,2.594,134,2.526,140,1.55,145,1.662,149,1.693,152,1.159,157,0.838,163,1.679,165,1.805,205,0.807,254,1.991,291,1.645,292,1.58,293,1.715,294,1.79,295,1.645,296,1.87,299,1.645,302,2.262,303,3.489,304,3.783,306,2.718,307,1.79,310,1.645,319,1.017,332,0.871,357,3.213,358,2.686,365,2.872,368,3.097,369,3.097,370,3.097,376,2.075,421,2.594,428,4.143,431,3.753,432,3.753,433,2.872,434,3.753,435,3.753,437,3.753,475,3.436,478,3.213,603,2.263,610,3.097,612,5.027,619,3.753,620,2.515,623,2.515,624,2.515,625,2.515,699,2.263,708,2.686,712,2.515,713,2.897,714,2.897,715,2.897,716,2.897,717,2.897,718,2.897,719,2.897,720,4.324,721,4.324,722,4.324,723,4.324,724,3.753,725,4.324,726,4.324,727,4.324,728,5.172,729,4.324,730,4.324,731,2.897,732,4.324,733,2.897,734,2.897,735,2.897,736,2.897]],["title/injectables/InterviewService.html",[125,0.465,697,2.439]],["body/injectables/InterviewService.html",[0,0.11,2,0.015,3,0.115,4,0.115,8,0.819,19,0.188,25,0.115,39,2.239,57,0.38,59,1.801,64,1.314,125,0.593,140,1.418,145,1.831,157,1.023,165,1.864,254,2.157,291,1.903,292,1.827,293,1.984,294,2.07,295,1.903,296,2.162,299,1.903,302,2.616,303,3.477,304,3.668,306,2.369,307,2.07,310,1.903,319,1.242,332,1.063,428,4.405,697,3.106,699,2.764,708,4.286,711,3.072,737,3.072,738,3.539,739,3.539,740,3.539,741,3.539,742,3.539,743,3.539,744,3.539,745,3.539,746,3.539,747,3.539,748,3.539,749,3.539]],["title/guards/JwtAuthGuard.html",[321,2.054,750,3.067]],["body/guards/JwtAuthGuard.html",[0,0.125,2,0.015,3,0.131,4,0.131,17,2.465,19,0.202,25,0.131,31,1.91,48,2.505,57,0.433,59,1.002,63,1.415,64,0.797,65,2.27,125,0.649,152,1.666,158,2.687,170,4.07,218,2.109,220,2.364,276,2.225,278,2.225,321,2.863,494,4.128,504,3.92,751,3.5,752,4.275,753,5.205,754,6.379,755,3.5,756,4.99,757,4.032,758,5.393,759,6.663,760,6.047,761,3.5,762,3.149,763,2.888,764,3.5,765,5.473,766,4.032,767,6.213,768,4.032,769,2.888,770,3.5,771,4.032]],["title/modules/JwtModule.html",[69,0.976,83,2.608]],["body/modules/JwtModule.html",[0,0.154,2,0.015,3,0.162,4,0.162,19,0.204,25,0.162,57,0.535,69,1.713,71,1.977,72,2.063,73,2.063,74,1.896,75,2.603,76,2.603,83,5.245,170,4.227,171,4.207,504,4.503,752,4.911,753,4.911,772,4.325,773,4.325,774,4.325,775,4.983,776,4.503,777,4.983]],["title/injectables/JwtService.html",[125,0.465,171,2.054]],["body/injectables/JwtService.html",[0,0.124,2,0.015,3,0.13,4,0.13,8,0.802,15,1.806,19,0.215,25,0.13,31,1.892,57,0.429,59,1.537,63,1.908,64,1.075,98,3.119,125,0.645,152,1.458,157,1.155,163,1.296,170,4.577,171,2.844,218,2.844,254,2.154,504,3.894,752,4.247,753,5.184,762,3.119,770,3.466,778,3.466,779,5.437,780,5.437,781,3.993,782,6.637,783,3.993,784,5.437,785,5.437,786,6.943,787,6.637,788,3.993,789,6.182,790,5.437,791,5.437,792,5.437,793,3.993,794,3.993,795,6.637,796,5.437,797,3.993,798,3.993]],["title/classes/LoginDto.html",[0,0.121,143,1.952]],["body/classes/LoginDto.html",[0,0.198,2,0.015,3,0.166,4,0.166,8,0.784,9,2.888,19,0.207,21,2.761,22,2.114,23,3.151,24,1.477,25,0.166,26,2.333,137,2.884,143,3.63,145,1.648,155,4.628,412,3.464,413,4.573,799,4.432,800,6.335,801,4.432,802,5.106,803,4.432,804,5.106,805,5.106,806,5.106]],["title/classes/ParticipantDto.html",[0,0.121,481,2.608]],["body/classes/ParticipantDto.html",[0,0.201,2,0.015,3,0.143,4,0.143,8,0.858,9,2.941,15,3.575,19,0.189,20,4.039,21,2.988,22,1.827,23,3.524,24,1.276,25,0.189,26,2.82,39,1.887,137,2.973,140,1.195,154,3.233,404,3.161,406,3.831,412,3.739,413,4.164,421,1.996,433,2.932,451,4.164,472,2.578,473,5.398,474,3.161,475,2.932,476,3.831,477,3.447,478,2.741,481,4.591,484,3.831,485,3.831,491,5.046,492,5.046,493,5.046,494,4.319,495,5.078,807,4.413,808,4.413,809,4.413,810,4.413]],["title/modules/PostgresModule.html",[69,0.976,84,2.608]],["body/modules/PostgresModule.html",[0,0.156,2,0.015,3,0.163,4,0.163,19,0.205,25,0.163,57,0.541,69,1.721,71,1.998,72,2.084,73,2.084,74,1.916,75,2.62,76,2.62,84,5.254,132,3.642,776,4.533,811,4.371,812,4.371,813,4.371,814,5.035,815,6.303,816,5.035]],["title/injectables/PostgresService.html",[125,0.465,132,1.776]],["body/injectables/PostgresService.html",[0,0.13,2,0.015,3,0.136,4,0.136,19,0.206,25,0.136,57,0.451,58,3.277,59,1.043,125,0.666,132,3.063,165,1.848,190,1.737,205,1.765,361,4.88,540,4.391,763,3.005,815,5.879,817,3.642,818,6.34,819,5.622,820,7.269,821,7.269,822,5.622,823,7.062,824,4.195,825,5.622,826,5.622,827,4.195,828,4.195,829,4.195,830,4.195,831,4.195,832,4.195]],["title/controllers/QuestionController.html",[244,1.557,833,2.812]],["body/controllers/QuestionController.html",[0,0.103,2,0.015,3,0.108,4,0.108,8,0.809,19,0.226,24,0.959,25,0.108,31,2.899,57,0.356,59,1.73,64,1.209,65,2.235,140,1.463,141,2.187,157,0.959,165,1.803,205,1.557,220,2.328,244,1.315,250,3.201,254,1.985,264,3.224,265,2.374,266,2.634,267,1.937,268,3.087,273,3.042,276,3.376,278,3.376,279,3.574,280,3.574,291,1.817,292,2.043,293,1.894,295,2.128,299,1.262,300,2.965,310,1.262,311,2.965,313,2.06,314,2.06,315,2.06,316,3.171,319,1.164,321,1.735,322,2.06,323,2.497,324,2.06,325,1.83,326,2.06,327,1.937,328,2.06,329,2.06,330,1.937,332,0.996,333,2.203,337,2.203,452,4.065,457,2.203,459,2.926,833,3.418,834,2.878,835,3.316,836,3.316,837,5.592,838,3.316,839,2.203,840,3.316,841,6.483,842,3.316,843,3.474,844,2.878,845,2.59,846,3.316,847,3.316,848,2.878,849,3.316,850,3.316,851,2.878,852,2.878,853,3.316]],["title/classes/QuestionDto.html",[0,0.121,461,2.608]],["body/classes/QuestionDto.html",[0,0.192,2,0.015,3,0.13,4,0.13,8,0.83,9,3.007,15,1.813,19,0.201,20,3.387,21,3.311,22,1.66,23,3.463,24,1.16,25,0.13,26,2.766,140,1.12,141,1.84,145,1.6,190,1.66,395,4.437,412,3.714,421,1.813,422,4.116,452,2.342,453,5.431,454,3.132,455,2.872,456,3.905,457,2.664,459,2.852,461,4.417,468,4.733,469,4.839,470,4.839,471,4.437,854,4.009,855,4.009,856,4.009,857,4.009]],["title/modules/QuestionModule.html",[69,0.976,85,2.608]],["body/modules/QuestionModule.html",[0,0.169,2,0.015,3,0.178,4,0.178,19,0.243,25,0.178,57,0.588,69,1.786,71,2.171,72,2.266,73,2.266,74,2.083,75,2.759,76,2.266,85,5.29,124,3.198,833,5.146,843,4.842,844,4.751,858,4.751,859,4.751,860,4.842,861,5.473,862,5.473,863,4.751]],["title/injectables/QuestionRepository.html",[125,0.465,860,2.439]],["body/injectables/QuestionRepository.html",[0,0.099,2,0.015,3,0.104,4,0.104,8,0.824,19,0.178,25,0.104,57,0.344,59,1.712,64,1.264,125,0.552,131,1.873,132,2.724,134,2.721,140,1.595,141,2.381,145,1.723,149,1.873,152,0.859,157,0.927,163,1.511,165,1.836,254,2.076,291,2.292,292,1.702,293,1.848,294,1.928,295,1.773,296,2.014,299,1.773,307,1.928,310,1.773,319,1.125,332,0.963,395,3.336,421,2.107,452,4.023,455,3.336,456,3.336,457,3.094,459,3.151,469,3.638,470,3.638,471,3.336,602,2.782,610,3.336,839,3.094,845,2.504,860,2.893,864,2.782,865,3.205,866,3.205,867,3.205,868,3.205,869,3.205,870,3.205,871,3.205,872,4.658,873,4.658,874,4.658,875,4.658,876,4.658,877,4.658,878,4.658,879,4.658,880,3.205,881,3.205,882,2.782,883,2.782,884,3.205]],["title/injectables/QuestionService.html",[125,0.465,843,2.439]],["body/injectables/QuestionService.html",[0,0.113,2,0.015,3,0.118,4,0.118,8,0.823,19,0.191,25,0.118,52,3.65,57,0.391,59,1.73,64,1.26,65,1.862,125,0.604,140,1.597,141,2.266,145,1.316,152,1.367,157,1.052,165,1.834,205,1.419,220,1.94,254,2.069,291,1.94,292,1.862,295,1.94,296,2.204,299,1.94,310,1.94,319,1.276,332,1.093,452,4.175,459,2.667,461,4.461,601,5.536,843,3.166,845,2.841,860,4.324,863,3.157,885,3.157,886,5.097,887,3.636,888,3.636,889,3.636,890,3.636,891,5.097,892,3.636,893,3.636,894,2.841,895,3.636,896,5.097,897,5.097,898,5.097,899,3.636,900,3.636,901,3.636]],["title/modules/RedisModule.html",[69,0.976,86,2.439]],["body/modules/RedisModule.html",[0,0.156,2,0.015,3,0.163,4,0.163,19,0.205,25,0.163,57,0.541,69,1.721,71,1.998,72,2.084,73,2.084,74,1.916,75,2.62,76,2.62,86,4.913,123,4.824,776,4.533,902,4.371,903,4.371,904,4.371,905,5.002,906,5.035,907,5.035]],["title/injectables/RedisService.html",[125,0.465,905,2.439]],["body/injectables/RedisService.html",[0,0.14,2,0.015,3,0.147,4,0.147,19,0.213,25,0.147,57,0.485,63,1.585,64,0.893,65,1.65,123,5.478,125,0.7,200,3.088,201,3.116,332,1.976,540,4.611,905,4.332,908,3.92,909,6.973,910,5.902,911,4.516,912,3.528,913,5.902,914,4.516,915,4.516,916,3.92,917,4.516]],["title/injectables/RefreshService.html",[115,2.054,125,0.465]],["body/injectables/RefreshService.html",[0,0.113,2,0.015,3,0.119,4,0.119,8,0.845,19,0.192,25,0.119,57,0.393,59,1.59,63,1.285,64,0.723,115,3.346,123,5.049,125,0.607,140,1.433,141,2.353,157,1.058,158,1.582,165,1.777,182,4.181,201,2.798,205,1.426,254,1.188,332,1.921,905,4.332,912,2.858,918,3.177,919,5.904,920,5.119,921,5.119,922,5.119,923,3.659,924,5.119,925,5.119,926,3.659,927,5.119,928,5.119,929,3.659,930,5.119,931,3.659,932,3.659,933,3.659,934,3.659,935,3.659,936,3.659,937,3.659]],["title/classes/RegisterDto.html",[0,0.121,147,2.054]],["body/classes/RegisterDto.html",[0,0.187,2,0.015,3,0.152,4,0.152,8,0.759,9,3.194,19,0.229,21,2.889,22,1.933,23,3.022,24,1.351,25,0.152,26,2.204,58,3.647,137,2.497,143,3.79,145,1.557,147,3.695,154,3.323,155,4.007,156,3.496,189,3.102,190,1.933,199,4.007,412,3.323,800,6.5,801,4.053,803,4.053,938,4.053,939,4.669,940,4.669,941,4.669,942,4.669,943,4.669,944,4.669,945,4.669,946,4.669]],["title/injectables/ResponseBuildService.html",[125,0.465,269,2.294]],["body/injectables/ResponseBuildService.html",[0,0.118,2,0.015,3,0.124,4,0.124,8,0.568,19,0.124,25,0.171,30,5.525,39,1.714,40,3.757,46,2.991,51,2.991,57,0.411,59,0.952,63,1.344,64,0.757,125,0.626,163,1.963,193,1.585,269,3.086,660,4.018,675,5.29,676,2.991,677,3.324,678,4.332,679,5.525,680,3.324,681,4.586,682,3.324,683,5.25,684,4.586,685,4.586,686,3.324,687,3.324,688,3.324,947,4.586,948,3.829]],["title/modules/ResponseBuilderModule.html",[69,0.976,87,2.608]],["body/modules/ResponseBuilderModule.html",[0,0.158,2,0.015,3,0.166,4,0.166,19,0.207,25,0.166,57,0.549,69,1.732,71,2.026,72,2.114,73,2.114,74,1.943,75,2.643,76,2.643,87,5.267,269,4.714,776,4.573,949,4.432,950,4.432,951,4.432,952,5.106,953,5.106]],["title/guards/RolesGuard.html",[323,2.054,750,3.067]],["body/guards/RolesGuard.html",[0,0.132,2,0.015,3,0.139,4,0.139,8,0.459,17,2.537,19,0.208,25,0.139,40,2.652,48,2.652,57,0.459,59,1.062,63,1.499,64,1.124,65,1.56,125,0.674,152,1.715,156,3.346,157,1.235,197,2.829,218,2.234,220,1.625,232,3.533,323,3.568,327,2.495,494,4.249,754,5.921,755,4.937,756,5.088,758,4.937,760,6.166,763,3.058,764,3.706,769,3.058,954,3.706,955,4.27,956,7.306,957,4.27,958,4.27,959,3.706,960,3.335,961,5.688,962,4.27,963,4.27,964,4.27]],["title/controllers/SessionController.html",[244,1.557,965,2.812]],["body/controllers/SessionController.html",[0,0.089,1,4.762,2,0.015,3,0.093,4,0.093,8,0.795,13,2.492,14,5.34,19,0.227,24,0.83,25,0.093,31,3.04,40,3.985,48,1.784,56,2.056,57,0.309,59,0.714,64,1.314,65,2.344,140,1.436,152,1.783,157,0.83,163,2.082,165,1.838,197,3.04,205,1.786,220,2.441,229,1.908,232,1.784,244,1.139,250,3.356,254,2.082,264,3.307,265,2.136,266,2.84,267,1.678,268,2.37,273,3.19,276,3.54,278,3.54,279,3.748,280,3.748,292,1.049,300,1.784,308,1.908,311,1.784,313,1.784,314,1.784,315,1.784,319,1.008,321,1.502,322,1.784,323,1.502,324,1.784,325,1.585,326,1.784,327,1.678,328,1.784,329,3.797,330,2.509,332,0.863,472,4.084,478,1.784,553,3.547,666,3.355,678,4.594,756,3.076,769,2.056,848,2.492,965,3.076,966,2.243,967,2.871,968,3.728,969,3.728,970,3.728,971,4.295,972,3.728,973,4.466,974,2.871,975,2.871,976,2.871,977,2.871,978,2.871,979,2.871,980,2.492,981,2.871,982,2.871,983,2.871,984,4.295,985,2.871,986,2.871,987,2.492,988,2.871,989,2.871,990,3.355,991,2.492,992,5.71,993,2.871,994,2.871,995,2.871,996,3.006,997,2.243,998,2.243,999,2.243,1000,2.243,1001,2.871,1002,2.871,1003,2.871,1004,2.492,1005,2.492,1006,2.492,1007,2.492,1008,2.871,1009,6.415,1010,2.871,1011,2.871,1012,4.957,1013,2.492,1014,4.295,1015,5.145,1016,2.871,1017,2.871,1018,2.492,1019,2.871,1020,2.871,1021,2.871,1022,2.492,1023,2.871,1024,2.871,1025,2.871,1026,2.871,1027,2.871,1028,4.295,1029,2.871,1030,2.871]],["title/classes/SessionGateway.html",[0,0.121,1031,2.812]],["body/classes/SessionGateway.html",[0,0.105,2,0.015,3,0.11,4,0.11,8,0.769,15,2.191,19,0.2,24,0.979,25,0.11,26,2.484,33,3.123,65,1.77,140,0.696,141,1.909,152,0.908,157,0.979,163,1.836,165,1.745,201,2.681,205,1.349,250,2.96,264,3.072,265,1.684,273,2.814,332,1.017,646,4.448,647,3.784,648,2.644,649,3.784,650,4.42,651,2.425,652,5.311,653,2.425,656,4.824,658,2.644,660,4.517,763,2.425,996,3.972,997,2.644,1031,3.47,1032,2.939,1033,5.658,1034,5.658,1035,5.658,1036,4.845,1037,4.845,1038,4.845,1039,5.658,1040,4.845,1041,3.385,1042,4.845,1043,6.176,1044,3.385,1045,4.845,1046,7.735,1047,3.385,1048,4.206,1049,4.845,1050,3.385,1051,3.385,1052,4.911,1053,4.845,1054,3.385,1055,3.385,1056,3.784,1057,4.845,1058,3.385,1059,3.385,1060,4.845,1061,3.385,1062,4.845,1063,3.385,1064,4.845,1065,6.176,1066,3.385,1067,3.385,1068,3.385,1069,3.385,1070,3.385,1071,3.385,1072,3.385,1073,3.385,1074,3.385,1075,3.385,1076,3.385,1077,3.385,1078,3.385,1079,3.385,1080,3.385,1081,3.385,1082,3.385,1083,3.385,1084,3.385,1085,3.385]],["title/modules/SessionModule.html",[69,0.976,88,2.608]],["body/modules/SessionModule.html",[0,0.162,2,0.015,3,0.17,4,0.17,19,0.254,25,0.17,57,0.564,69,1.753,71,2.081,72,2.171,73,2.171,74,1.996,75,2.687,76,2.171,79,4.792,88,5.379,104,4.097,124,3.064,519,5.125,965,5.05,996,4.507,997,4.097,1031,4.65,1086,4.553,1087,5.245,1088,4.553,1089,4.792,1090,5.245,1091,5.245,1092,4.553,1093,5.245,1094,5.245,1095,5.245]],["title/injectables/SessionRepository.html",[125,0.465,1089,2.439]],["body/injectables/SessionRepository.html",[0,0.086,2,0.015,3,0.09,4,0.09,7,3.616,8,0.833,17,1.664,19,0.182,25,0.09,33,3.825,39,2.359,57,0.299,64,1.37,65,1.533,125,0.497,131,1.626,132,2.542,134,2.451,137,1.737,140,1.494,145,1.451,149,1.626,152,1.354,157,0.805,163,1.824,291,1.597,292,1.533,293,1.664,294,1.737,295,1.597,296,1.814,299,1.597,307,1.737,310,1.597,319,0.977,332,0.836,365,4.499,368,3.616,369,3.616,370,3.616,376,4.851,421,3.358,433,2.787,472,3.844,475,3.354,477,5.29,478,3.492,494,3.354,495,2.174,553,4.387,556,6.016,558,6.016,603,2.174,610,3.005,612,4.711,646,2.606,724,3.642,990,5.29,998,2.174,999,2.174,1000,2.174,1089,2.606,1096,2.416,1097,4.195,1098,4.195,1099,5.049,1100,4.195,1101,2.783,1102,4.195,1103,2.783,1104,4.195,1105,2.783,1106,2.783,1107,2.783,1108,4.195,1109,2.783,1110,2.783,1111,2.783,1112,2.783,1113,5.049,1114,2.783,1115,4.195,1116,5.621,1117,2.783,1118,4.195,1119,5.049,1120,5.049,1121,2.783,1122,5.049,1123,2.783,1124,4.195,1125,4.195,1126,4.195,1127,3.642,1128,4.195,1129,5.049,1130,2.783,1131,2.783,1132,2.783]],["title/injectables/SessionService.html",[125,0.465,996,2.294]],["body/injectables/SessionService.html",[0,0.081,2,0.015,3,0.085,4,0.085,7,3.892,8,0.854,14,5.515,15,1.805,17,1.583,19,0.201,25,0.085,39,1.573,52,3.473,57,0.28,64,1.221,65,1.772,113,3.048,125,0.473,129,3.788,137,2.007,140,1.27,141,1.834,145,1.512,152,2.04,154,1.296,155,3.892,156,1.363,158,1.725,165,1.895,197,1.984,200,1.363,201,3.394,205,1.966,220,1.845,230,1.731,233,2.651,235,1.731,254,1.901,306,2.298,319,0.914,330,1.522,357,2.478,358,1.618,365,3.221,373,3.463,472,3.758,475,4.105,481,4.273,523,3.995,533,3.463,534,3.463,553,3.376,557,5.085,646,3.839,894,2.035,968,3.463,969,3.463,970,3.463,972,3.463,973,3.463,980,3.463,987,3.463,990,3.788,991,3.463,996,2.331,998,2.035,999,2.035,1000,2.035,1013,4.717,1056,3.116,1089,3.839,1092,2.261,1127,3.463,1133,2.261,1134,3.99,1135,4.849,1136,4.849,1137,3.99,1138,3.99,1139,3.99,1140,2.605,1141,2.605,1142,3.99,1143,2.605,1144,2.605,1145,2.605,1146,2.605,1147,2.605,1148,5.858,1149,2.605,1150,3.99,1151,2.605,1152,3.99,1153,2.605,1154,2.605,1155,3.99,1156,2.605,1157,3.99,1158,2.605,1159,5.858,1160,2.605,1161,3.99,1162,2.605,1163,2.605,1164,2.605,1165,2.605,1166,2.605,1167,2.605,1168,2.605,1169,2.605,1170,4.849,1171,4.849,1172,2.605,1173,2.605,1174,2.605,1175,2.605,1176,2.605,1177,2.605,1178,2.605,1179,3.99,1180,2.605,1181,2.605,1182,2.605,1183,3.99,1184,5.434,1185,2.605,1186,2.605,1187,2.605,1188,2.605,1189,2.605,1190,2.605,1191,2.605,1192,2.605,1193,3.99,1194,2.605,1195,2.605,1196,2.605,1197,2.605,1198,2.605,1199,2.605,1200,2.261]],["title/classes/StartSessionDto.html",[0,0.121,1201,3.067]],["body/classes/StartSessionDto.html",[0,0.214,2,0.015,3,0.189,4,0.189,8,0.743,9,2.635,19,0.225,21,3.191,22,2.412,23,3.129,24,1.685,25,0.189,26,2.129,140,1.422,474,4.172,646,4.585,1201,5.404,1202,6.006,1203,5.826]],["title/controllers/TaskController.html",[244,1.557,1204,2.812]],["body/controllers/TaskController.html",[0,0.102,2,0.015,3,0.107,4,0.107,8,0.828,11,5.268,19,0.226,24,0.956,25,0.107,31,3.068,40,4.022,56,2.366,57,0.355,59,0.822,64,1.28,65,2.365,140,1.428,141,2.061,152,1.638,157,0.956,163,1.982,165,1.845,205,1.803,220,2.464,244,1.311,250,3.387,254,2.101,264,3.354,265,2.368,266,2.628,267,1.93,268,3.081,273,3.22,276,3.573,278,3.573,279,3.782,280,3.782,291,1.812,292,2.039,293,1.889,294,1.971,295,1.812,299,1.258,300,2.958,307,1.368,308,2.195,310,1.258,311,2.958,313,2.053,314,2.053,315,2.053,316,3.163,319,1.16,321,1.729,322,2.053,323,2.491,324,2.053,325,1.824,326,2.053,327,1.93,328,2.053,329,2.053,330,1.93,332,0.993,333,2.195,335,2.366,337,2.195,343,2.366,459,2.491,478,3.467,496,4.502,654,3.081,655,2.366,678,4.637,839,2.195,851,2.868,852,2.868,1012,4.845,1018,2.868,1022,2.868,1204,3.41,1205,2.868,1206,2.868,1207,3.304,1208,3.304,1209,3.304,1210,3.304,1211,3.304,1212,5.302,1213,3.304,1214,2.581,1215,3.304,1216,3.304,1217,3.304,1218,3.304,1219,3.304,1220,3.304]],["title/classes/TaskGateway.html",[0,0.121,659,2.608]],["body/classes/TaskGateway.html",[0,0.122,2,0.015,3,0.128,4,0.128,8,0.767,15,2.441,19,0.214,24,1.142,25,0.128,26,2.609,33,3.393,39,1.751,141,2.074,152,1.059,157,1.142,163,2.372,165,1.709,193,1.635,205,1.1,250,3.216,264,3.286,265,1.964,273,3.057,332,1.187,641,5.235,642,3.085,643,4.801,644,5.336,645,3.085,646,3.352,647,4.215,648,3.085,649,4.215,650,4.801,651,2.828,652,5.577,653,2.828,654,3.941,655,2.828,656,5.16,657,3.428,658,3.085,659,3.585,660,4.744,661,4.684,662,3.428,663,3.428,664,4.684,665,3.428,666,4.215,667,3.428,668,3.428,669,3.428,670,4.684,671,5.336,672,3.428,673,3.428,674,3.428,1048,3.428,1052,5.336,1056,4.215,1221,5.396,1222,5.396,1223,3.949,1224,5.396,1225,3.949,1226,3.949,1227,3.949,1228,3.949,1229,3.949,1230,3.949]],["title/modules/TaskModule.html",[69,0.976,89,2.608]],["body/modules/TaskModule.html",[0,0.171,2,0.015,3,0.18,4,0.18,19,0.25,25,0.18,57,0.595,69,1.795,71,2.196,72,2.292,73,2.292,74,2.107,75,2.778,76,2.292,89,5.301,124,3.234,654,4.313,655,3.965,659,4.458,1204,5.172,1231,4.805,1232,4.805,1233,4.855,1234,5.536,1235,5.536,1236,4.805,1237,5.536]],["title/injectables/TaskRepository.html",[125,0.465,1233,2.439]],["body/injectables/TaskRepository.html",[0,0.133,2,0.015,3,0.139,4,0.139,8,0.859,19,0.208,25,0.139,57,0.461,64,1.406,125,0.676,131,2.506,132,3.09,134,3.333,140,1.503,141,2.4,145,1.889,149,2.506,152,1.15,157,1.24,163,1.851,165,1.535,254,1.392,291,2.171,292,2.084,293,2.263,294,2.361,295,2.171,296,2.467,299,2.171,307,2.361,310,2.171,319,1.505,332,1.289,459,3.354,496,4.638,839,3.79,882,3.723,883,3.723,1214,3.35,1233,3.544,1238,3.723,1239,4.289,1240,4.289,1241,4.289,1242,4.289,1243,4.289,1244,4.289,1245,4.289,1246,4.289,1247,4.289,1248,4.289,1249,4.289]],["title/injectables/TaskService.html",[125,0.465,654,2.167]],["body/injectables/TaskService.html",[0,0.116,2,0.015,3,0.122,4,0.122,8,0.863,11,5.632,15,1.698,19,0.194,25,0.122,31,1.779,52,4.287,57,0.403,64,1.39,65,2.363,125,0.618,140,1.534,141,2.182,152,1.821,157,1.086,165,1.905,175,2.332,205,1.892,220,2.461,254,2.281,266,2.072,268,2.072,291,1.983,292,1.904,293,2.068,294,2.157,295,1.983,299,1.983,307,2.157,310,1.983,319,1.318,332,1.128,459,1.964,496,4.567,643,5.051,645,4.071,654,2.876,839,3.462,894,2.933,1206,4.524,1212,5.613,1214,2.933,1233,4.367,1236,3.259,1250,3.259,1251,5.211,1252,3.754,1253,3.754,1254,3.754,1255,3.754,1256,3.754,1257,3.754,1258,5.211,1259,3.754,1260,3.754,1261,3.754,1262,3.754,1263,3.259,1264,3.754,1265,3.754,1266,3.754,1267,3.754,1268,3.754,1269,3.754,1270,3.754,1271,3.754,1272,3.754,1273,3.754,1274,3.754,1275,5.986,1276,5.211,1277,3.754,1278,3.754]],["title/coverage.html",[1279,5.374]],["body/coverage.html",[0,0.244,1,2.585,2,0.015,5,3.133,6,3.133,28,2.109,29,3.133,65,1.319,74,1.374,113,1.71,114,1.888,115,1.888,117,2.585,125,0.942,126,3.96,132,1.632,143,1.795,147,1.888,153,2.819,164,4.223,171,1.888,193,2.772,194,2.242,196,2.109,197,1.795,198,2.242,244,2.829,245,3.133,269,2.109,288,2.585,289,3.133,297,2.242,317,2.242,321,1.888,323,1.888,325,1.992,347,2.242,351,3.133,379,3.133,392,3.133,393,3.133,415,2.242,416,3.133,417,2.398,418,3.133,428,2.242,429,3.133,430,3.133,452,2.109,453,3.96,454,3.96,461,2.398,472,2.109,473,3.96,474,4.197,481,2.398,496,2.242,497,3.133,498,3.133,523,2.242,526,3.133,553,2.242,554,3.133,555,3.133,568,2.585,569,3.133,576,2.242,590,2.398,592,3.133,628,3.133,641,2.585,642,3.96,654,1.992,659,2.398,675,2.585,676,3.96,689,2.585,690,3.133,697,2.242,708,2.242,712,3.133,737,3.133,750,3.96,751,3.133,778,3.133,799,3.133,817,3.133,833,2.585,834,3.133,843,2.242,860,2.242,864,3.133,885,3.133,905,2.242,908,3.133,918,3.133,938,3.133,954,3.133,960,2.819,965,2.585,966,3.96,996,2.109,1031,2.585,1032,3.133,1089,2.242,1096,3.133,1133,3.133,1200,6.996,1201,2.819,1202,3.133,1204,2.585,1205,3.133,1233,2.242,1238,3.133,1250,3.133,1280,7.71,1281,5.86,1282,5.86,1283,5.07,1284,6.356,1285,5.86,1286,3.609,1287,3.609,1288,5.07,1289,5.07,1290,6.943,1291,6.943,1292,5.07,1293,3.609,1294,5.86,1295,3.609,1296,5.86,1297,5.86,1298,3.609,1299,3.609,1300,5.07,1301,6.943,1302,3.609,1303,5.07,1304,5.86,1305,3.609,1306,3.609,1307,6.356,1308,3.609,1309,5.07,1310,3.133,1311,3.609,1312,3.609,1313,3.609,1314,3.609,1315,3.609,1316,3.609,1317,4.401,1318,4.401,1319,3.609,1320,3.609,1321,3.609]],["title/dependencies.html",[71,1.875,1322,2.839]],["body/dependencies.html",[0,0.209,2,0.015,22,2.309,24,1.614,57,0.599,98,4.358,107,4.842,177,4.188,178,3.466,190,2.309,192,3.706,530,4.842,651,3.995,653,4.828,761,4.842,762,4.358,912,4.358,959,4.842,1323,7.245,1324,5.579,1325,6.741,1326,6.741,1327,5.579,1328,5.579,1329,5.579,1330,5.579,1331,5.579,1332,5.579,1333,5.579,1334,5.579,1335,5.579,1336,5.579,1337,5.579,1338,5.579,1339,5.579,1340,5.579,1341,5.579,1342,5.579,1343,5.579,1344,5.579,1345,5.579,1346,5.579,1347,5.579]],["title/miscellaneous/functions.html",[1348,2.839,1349,4.726]],["body/miscellaneous/functions.html",[2,0.015,74,2.908,1310,5.5,1350,6.336]],["title/index.html",[1351,3.27,1352,3.27,1353,3.27]],["body/index.html",[2,0.015,123,3.357,679,3.947,916,4.386,947,6.018,1263,5.506,1354,7.27,1355,6.342,1356,5.053,1357,6.342,1358,5.053,1359,5.053,1360,5.053,1361,5.053,1362,5.053,1363,5.053,1364,5.053,1365,5.053,1366,5.053,1367,5.053,1368,6.342,1369,5.053,1370,5.053,1371,5.053,1372,5.053,1373,5.053,1374,4.386,1375,5.053,1376,6.342,1377,5.053,1378,5.053,1379,5.053,1380,5.053,1381,5.053,1382,5.053,1383,5.053,1384,5.053,1385,5.053,1386,5.053,1387,5.053,1388,5.053,1389,5.053,1390,5.053,1391,5.053,1392,5.053]],["title/modules.html",[1393,5.374]],["body/modules.html",[2,0.015,70,3.927,79,3.406,80,3.643,81,3.643,82,3.643,83,3.643,84,3.643,85,3.643,86,3.406,87,3.643,88,3.643,89,3.643,519,3.643,1394,8.169]],["title/overview.html",[1395,5.374]],["body/overview.html",[2,0.015,69,0.965,70,5.832,71,1.539,72,1.606,73,1.606,74,1.477,75,1.606,76,1.606,77,3.368,78,3.368,79,4.875,80,4.923,81,4.567,82,4.833,83,4.719,84,4.719,85,4.833,86,4.519,87,4.719,88,5.104,89,4.833,109,3.368,111,3.368,112,3.368,113,3.447,114,3.806,115,3.187,132,3.29,171,3.806,214,2.578,269,4.25,317,3.784,345,3.368,346,3.368,347,3.784,519,4.719,520,3.368,521,3.368,522,3.368,523,4.519,576,3.784,586,3.368,587,3.368,654,3.362,697,3.784,706,3.368,707,3.368,708,3.784,772,3.368,773,3.368,774,3.368,811,3.368,812,3.368,813,3.368,843,3.784,858,3.368,859,3.368,860,3.784,902,3.368,903,3.368,904,3.368,905,4.519,949,3.368,950,3.368,951,3.368,996,3.559,1086,3.368,1088,3.368,1089,3.784,1231,3.368,1232,3.368,1233,3.784,1396,3.88,1397,3.88,1398,3.88,1399,3.88,1400,3.88]],["title/properties.html",[1322,2.839,1401,4.726]],["body/properties.html",[2,0.015,26,2.29,455,4.489,1402,6.267,1403,6.267,1404,6.267,1405,6.267]],["title/miscellaneous/variables.html",[1348,2.839,1374,4.102]],["body/miscellaneous/variables.html",[2,0.015,8,0.756,17,3.001,48,3.246,64,1.033,113,2.476,126,4.082,137,2.163,140,1.074,152,1.401,153,5.06,154,2.599,155,3.472,156,3.389,163,1.696,197,3.221,325,4.061,517,4.536,756,3.743,769,3.743,960,5.06,966,4.082,1004,4.536,1005,4.536,1006,4.536,1007,4.536,1317,4.536,1318,6.11,1406,6.477,1407,5.226,1408,5.226,1409,5.226]]],"invertedIndex":[["",{"_index":2,"title":{},"body":{"classes/AddTasksDto.html":{},"classes/ApiError.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"modules/CandidateInterviewModule.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"classes/CreateCandidateInterviewDto.html":{},"classes/CreateFinalTestDto.html":{},"classes/CreateInterviewDto.html":{},"classes/CreateQuestionWithGroupDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateTaskDto.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/FilterSessionsDto.html":{},"controllers/FinalTestController.html":{},"modules/FinalTestModule.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"interfaces/IData.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IResponseBuild.html":{},"interfaces/IUser.html":{},"controllers/InterviewController.html":{},"modules/InterviewModule.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"guards/JwtAuthGuard.html":{},"modules/JwtModule.html":{},"injectables/JwtService.html":{},"classes/LoginDto.html":{},"classes/ParticipantDto.html":{},"modules/PostgresModule.html":{},"injectables/PostgresService.html":{},"controllers/QuestionController.html":{},"classes/QuestionDto.html":{},"modules/QuestionModule.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshService.html":{},"classes/RegisterDto.html":{},"injectables/ResponseBuildService.html":{},"modules/ResponseBuilderModule.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"classes/SessionGateway.html":{},"modules/SessionModule.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{},"classes/StartSessionDto.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"modules/TaskModule.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1200,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1403,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1342,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":1332,"title":{},"body":{"dependencies.html":{}}}],["0.41.1",{"_index":1329,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1331,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1303,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1305,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1306,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1300,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1292,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1302,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1293,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1307,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1301,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1308,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1304,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":357,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"injectables/InterviewRepository.html":{},"injectables/SessionService.html":{}}}],["1.4.7",{"_index":1334,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1285,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1316,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1287,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":1289,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":358,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"injectables/InterviewRepository.html":{},"injectables/SessionService.html":{}}}],["10.0.0",{"_index":1323,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1280,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["11.0.11",{"_index":1326,"title":{},"body":{"dependencies.html":{}}}],["11.0.3",{"_index":1327,"title":{},"body":{"dependencies.html":{}}}],["12/12",{"_index":1295,"title":{},"body":{"coverage.html":{}}}],["13",{"_index":1396,"title":{},"body":{"overview.html":{}}}],["17",{"_index":1398,"title":{},"body":{"overview.html":{}}}],["19",{"_index":1397,"title":{},"body":{"overview.html":{}}}],["1d",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["1h",{"_index":790,"title":{},"body":{"injectables/JwtService.html":{}}}],["2",{"_index":1399,"title":{},"body":{"overview.html":{}}}],["2/2",{"_index":1314,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":1319,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1288,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":660,"title":{},"body":{"interfaces/IData.html":{},"interfaces/IResponseBuild.html":{},"injectables/ResponseBuildService.html":{},"classes/SessionGateway.html":{},"classes/TaskGateway.html":{}}}],["24",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["2d",{"_index":791,"title":{},"body":{"injectables/JwtService.html":{}}}],["3/4",{"_index":1297,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1286,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":1324,"title":{},"body":{"dependencies.html":{}}}],["4.8.1",{"_index":1344,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1309,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":1283,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":46,"title":{},"body":{"classes/ApiError.html":{},"interfaces/IResponseBuild.html":{},"injectables/ResponseBuildService.html":{}}}],["401",{"_index":54,"title":{},"body":{"classes/ApiError.html":{}}}],["404",{"_index":51,"title":{},"body":{"classes/ApiError.html":{},"interfaces/IResponseBuild.html":{},"injectables/ResponseBuildService.html":{}}}],["5",{"_index":1400,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":1347,"title":{},"body":{"dependencies.html":{}}}],["5.5.0",{"_index":1337,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1281,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":1299,"title":{},"body":{"coverage.html":{}}}],["5/7",{"_index":1313,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1315,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":680,"title":{},"body":{"interfaces/IResponseBuild.html":{},"injectables/ResponseBuildService.html":{}}}],["5432",{"_index":1380,"title":{},"body":{"index.html":{}}}],["6.10.0",{"_index":1339,"title":{},"body":{"dependencies.html":{}}}],["6.5.0",{"_index":1328,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":1294,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":1291,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["6379",{"_index":1390,"title":{},"body":{"index.html":{}}}],["66",{"_index":1282,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"overview.html":{}}}],["7.0.3",{"_index":1336,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1343,"title":{},"body":{"dependencies.html":{}}}],["71",{"_index":1312,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":1296,"title":{},"body":{"coverage.html":{}}}],["7d",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["80:80",{"_index":1359,"title":{},"body":{"index.html":{}}}],["83",{"_index":1298,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":1290,"title":{},"body":{"coverage.html":{}}}],["8601",{"_index":485,"title":{},"body":{"classes/CreateSessionDto.html":{},"classes/ParticipantDto.html":{}}}],["9.0.2",{"_index":1338,"title":{},"body":{"dependencies.html":{}}}],["_generatepassword",{"_index":1134,"title":{},"body":{"injectables/SessionService.html":{}}}],["_generatepassword(length",{"_index":1142,"title":{},"body":{"injectables/SessionService.html":{}}}],["_getusercredentials",{"_index":1135,"title":{},"body":{"injectables/SessionService.html":{}}}],["_getusercredentials(participants",{"_index":1145,"title":{},"body":{"injectables/SessionService.html":{}}}],["_sendinvitations",{"_index":1136,"title":{},"body":{"injectables/SessionService.html":{}}}],["_sendinvitations(participants",{"_index":1147,"title":{},"body":{"injectables/SessionService.html":{}}}],["a.singapore",{"_index":1384,"title":{},"body":{"index.html":{}}}],["abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_",{"_index":1199,"title":{},"body":{"injectables/SessionService.html":{}}}],["accesstoken",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["active",{"_index":1116,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["added",{"_index":13,"title":{},"body":{"classes/AddTasksDto.html":{},"controllers/SessionController.html":{}}}],["addtasks",{"_index":1097,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["addtasks(sessionid",{"_index":1102,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["addtasksdto",{"_index":1,"title":{"classes/AddTasksDto.html":{}},"body":{"classes/AddTasksDto.html":{},"controllers/SessionController.html":{},"coverage.html":{}}}],["addtasksdto.taskids",{"_index":1030,"title":{},"body":{"controllers/SessionController.html":{}}}],["addtaskstosession",{"_index":968,"title":{},"body":{"controllers/SessionController.html":{},"injectables/SessionService.html":{}}}],["addtaskstosession(@param('id",{"_index":1027,"title":{},"body":{"controllers/SessionController.html":{}}}],["addtaskstosession(id",{"_index":974,"title":{},"body":{"controllers/SessionController.html":{}}}],["addtaskstosession(sessionid",{"_index":1150,"title":{},"body":{"injectables/SessionService.html":{}}}],["andidateinterview.controller",{"_index":349,"title":{},"body":{"modules/CandidateInterviewModule.html":{}}}],["andidateinterview.dto",{"_index":320,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{}}}],["andidateinterview.dto.ts",{"_index":393,"title":{},"body":{"classes/CreateCandidateInterviewDto.html":{},"coverage.html":{}}}],["andidateinterview.dto.ts:12",{"_index":408,"title":{},"body":{"classes/CreateCandidateInterviewDto.html":{}}}],["andidateinterview.dto.ts:20",{"_index":407,"title":{},"body":{"classes/CreateCandidateInterviewDto.html":{}}}],["andidateinterview.dto.ts:28",{"_index":405,"title":{},"body":{"classes/CreateCandidateInterviewDto.html":{}}}],["andidateinterview.dto.ts:36",{"_index":409,"title":{},"body":{"classes/CreateCandidateInterviewDto.html":{}}}],["andidateinterview.dto.ts:44",{"_index":411,"title":{},"body":{"classes/CreateCandidateInterviewDto.html":{}}}],["andidateinterview.dto.ts:51",{"_index":401,"title":{},"body":{"classes/CreateCandidateInterviewDto.html":{}}}],["andidateinterview.dto.ts:59",{"_index":410,"title":{},"body":{"classes/CreateCandidateInterviewDto.html":{}}}],["andidateinterview.dto.ts:66",{"_index":403,"title":{},"body":{"classes/CreateCandidateInterviewDto.html":{}}}],["andidateinterview.repository",{"_index":350,"title":{},"body":{"modules/CandidateInterviewModule.html":{},"injectables/CandidateInterviewService.html":{}}}],["andidateinterview.service",{"_index":318,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"modules/CandidateInterviewModule.html":{}}}],["api",{"_index":30,"title":{},"body":{"classes/ApiError.html":{},"interfaces/IResponseBuild.html":{},"injectables/ResponseBuildService.html":{}}}],["api/auth",{"_index":246,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["api/sessions",{"_index":967,"title":{},"body":{"controllers/SessionController.html":{}}}],["apibearerauth",{"_index":316,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"controllers/TaskController.html":{}}}],["apierror",{"_index":28,"title":{"classes/ApiError.html":{}},"body":{"classes/ApiError.html":{},"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"coverage.html":{}}}],["apierror(httpstatus.bad_request",{"_index":67,"title":{},"body":{"classes/ApiError.html":{}}}],["apierror(httpstatus.not_found",{"_index":68,"title":{},"body":{"classes/ApiError.html":{}}}],["apierror(httpstatus.unauthorized",{"_index":66,"title":{},"body":{"classes/ApiError.html":{}}}],["apierror.badrequest",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["apierror.unauthorizederror",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["apioperation",{"_index":264,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"interfaces/IData.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"controllers/SessionController.html":{},"classes/SessionGateway.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{}}}],["apioperation({summary",{"_index":250,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"controllers/SessionController.html":{},"classes/SessionGateway.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{}}}],["apiproperty",{"_index":23,"title":{},"body":{"classes/AddTasksDto.html":{},"classes/CreateCandidateInterviewDto.html":{},"classes/CreateFinalTestDto.html":{},"classes/CreateInterviewDto.html":{},"classes/CreateQuestionWithGroupDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateTaskDto.html":{},"classes/LoginDto.html":{},"classes/ParticipantDto.html":{},"classes/QuestionDto.html":{},"classes/RegisterDto.html":{},"classes/StartSessionDto.html":{}}}],["apiproperty({description",{"_index":9,"title":{},"body":{"classes/AddTasksDto.html":{},"classes/CreateCandidateInterviewDto.html":{},"classes/CreateFinalTestDto.html":{},"classes/CreateInterviewDto.html":{},"classes/CreateQuestionWithGroupDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateTaskDto.html":{},"classes/LoginDto.html":{},"classes/ParticipantDto.html":{},"classes/QuestionDto.html":{},"classes/RegisterDto.html":{},"classes/StartSessionDto.html":{}}}],["apiproperty({type",{"_index":462,"title":{},"body":{"classes/CreateQuestionWithGroupDto.html":{}}}],["apiresponse",{"_index":656,"title":{},"body":{"interfaces/IData.html":{},"classes/SessionGateway.html":{},"classes/TaskGateway.html":{}}}],["apiresponse({status",{"_index":1052,"title":{},"body":{"classes/SessionGateway.html":{},"classes/TaskGateway.html":{}}}],["apitags",{"_index":265,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"interfaces/IData.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"controllers/SessionController.html":{},"classes/SessionGateway.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{}}}],["apitags('session",{"_index":1063,"title":{},"body":{"classes/SessionGateway.html":{}}}],["apitags('task",{"_index":657,"title":{},"body":{"interfaces/IData.html":{},"classes/TaskGateway.html":{}}}],["app",{"_index":825,"title":{},"body":{"injectables/PostgresService.html":{}}}],["app.close",{"_index":832,"title":{},"body":{"injectables/PostgresService.html":{}}}],["application/json",{"_index":1269,"title":{},"body":{"injectables/TaskService.html":{}}}],["applicationdate",{"_index":394,"title":{},"body":{"classes/CreateCandidateInterviewDto.html":{}}}],["appmodule",{"_index":70,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argon",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["argon.hash(dto.password",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["argon.verify(user.password",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["argon2",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"dependencies.html":{}}}],["array",{"_index":10,"title":{},"body":{"classes/AddTasksDto.html":{}}}],["arraynotempty",{"_index":468,"title":{},"body":{"classes/CreateQuestionWithGroupDto.html":{},"classes/QuestionDto.html":{}}}],["async",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"injectables/EmailService.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"interfaces/IData.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"controllers/InterviewController.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"injectables/PostgresService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"injectables/RefreshService.html":{},"controllers/SessionController.html":{},"classes/SessionGateway.html":{},"injectables/SessionService.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{}}}],["auth",{"_index":545,"title":{},"body":{"injectables/EmailService.html":{}}}],["auth.controller",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.decorator",{"_index":327,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{}}}],["auth.decorator.ts",{"_index":1318,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth.repository",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["auth/auth.module",{"_index":1094,"title":{},"body":{"modules/SessionModule.html":{}}}],["auth/auth.repository",{"_index":1165,"title":{},"body":{"injectables/SessionService.html":{}}}],["authenticationcontroller",{"_index":117,"title":{"controllers/AuthenticationController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["authheader",{"_index":765,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["authheader.split",{"_index":768,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["authmodule",{"_index":79,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SessionModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":455,"title":{},"body":{"classes/CreateQuestionWithGroupDto.html":{},"classes/QuestionDto.html":{},"injectables/QuestionRepository.html":{},"properties.html":{}}}],["authrepository",{"_index":113,"title":{"injectables/AuthRepository.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"injectables/SessionService.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["authservice",{"_index":114,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"injectables/EmailService.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"interfaces/IData.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"controllers/InterviewController.html":{},"injectables/InterviewRepository.html":{},"injectables/PostgresService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"injectables/RefreshService.html":{},"controllers/SessionController.html":{},"classes/SessionGateway.html":{},"injectables/SessionService.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"injectables/TaskService.html":{}}}],["bad",{"_index":47,"title":{},"body":{"classes/ApiError.html":{}}}],["badrequest",{"_index":35,"title":{},"body":{"classes/ApiError.html":{}}}],["badrequest(message",{"_index":44,"title":{},"body":{"classes/ApiError.html":{}}}],["bearer",{"_index":767,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["body",{"_index":266,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["boolean",{"_index":494,"title":{},"body":{"classes/CreateSessionDto.html":{},"guards/JwtAuthGuard.html":{},"classes/ParticipantDto.html":{},"guards/RolesGuard.html":{},"injectables/SessionRepository.html":{}}}],["boolean})@isoptional()@isboolean",{"_index":809,"title":{},"body":{"classes/ParticipantDto.html":{}}}],["bootstrap",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CandidateInterviewModule.html":{},"modules/EmailModule.html":{},"modules/FinalTestModule.html":{},"modules/InterviewModule.html":{},"modules/JwtModule.html":{},"modules/PostgresModule.html":{},"modules/QuestionModule.html":{},"modules/RedisModule.html":{},"modules/ResponseBuilderModule.html":{},"modules/SessionModule.html":{},"modules/TaskModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["build",{"_index":947,"title":{},"body":{"injectables/ResponseBuildService.html":{},"index.html":{}}}],["build(params",{"_index":685,"title":{},"body":{"interfaces/IResponseBuild.html":{},"injectables/ResponseBuildService.html":{}}}],["c",{"_index":677,"title":{},"body":{"interfaces/IResponseBuild.html":{},"injectables/ResponseBuildService.html":{}}}],["canactivate",{"_index":754,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":755,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["candidate",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"injectables/SessionService.html":{}}}],["candidate.email",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"injectables/SessionService.html":{}}}],["candidate.password",{"_index":1197,"title":{},"body":{"injectables/SessionService.html":{}}}],["candidatefullname",{"_index":431,"title":{},"body":{"classes/CreateInterviewDto.html":{},"injectables/InterviewRepository.html":{}}}],["candidateimageurl",{"_index":432,"title":{},"body":{"classes/CreateInterviewDto.html":{},"injectables/InterviewRepository.html":{}}}],["candidateinterview",{"_index":290,"title":{},"body":{"controllers/CandidateInterviewController.html":{}}}],["candidateinterviewcontroller",{"_index":288,"title":{"controllers/CandidateInterviewController.html":{}},"body":{"controllers/CandidateInterviewController.html":{},"modules/CandidateInterviewModule.html":{},"coverage.html":{}}}],["candidateinterviewmodule",{"_index":80,"title":{"modules/CandidateInterviewModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CandidateInterviewModule.html":{},"modules.html":{},"overview.html":{}}}],["candidateinterviewrepository",{"_index":347,"title":{"injectables/CandidateInterviewRepository.html":{}},"body":{"modules/CandidateInterviewModule.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"coverage.html":{},"overview.html":{}}}],["candidateinterviewservice",{"_index":317,"title":{"injectables/CandidateInterviewService.html":{}},"body":{"controllers/CandidateInterviewController.html":{},"modules/CandidateInterviewModule.html":{},"injectables/CandidateInterviewService.html":{},"coverage.html":{},"overview.html":{}}}],["catch",{"_index":278,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"guards/JwtAuthGuard.html":{},"controllers/QuestionController.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{}}}],["category",{"_index":459,"title":{},"body":{"classes/CreateQuestionWithGroupDto.html":{},"classes/CreateTaskDto.html":{},"controllers/QuestionController.html":{},"classes/QuestionDto.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"controllers/TaskController.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{}}}],["categoryname",{"_index":456,"title":{},"body":{"classes/CreateQuestionWithGroupDto.html":{},"classes/CreateTaskDto.html":{},"classes/QuestionDto.html":{},"injectables/QuestionRepository.html":{}}}],["cfg",{"_index":683,"title":{},"body":{"interfaces/IResponseBuild.html":{},"injectables/ResponseBuildService.html":{}}}],["charset",{"_index":1198,"title":{},"body":{"injectables/SessionService.html":{}}}],["class",{"_index":0,"title":{"classes/AddTasksDto.html":{},"classes/ApiError.html":{},"classes/CreateCandidateInterviewDto.html":{},"classes/CreateFinalTestDto.html":{},"classes/CreateInterviewDto.html":{},"classes/CreateQuestionWithGroupDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateTaskDto.html":{},"classes/FilterSessionsDto.html":{},"classes/FinalTestRepository.html":{},"classes/LoginDto.html":{},"classes/ParticipantDto.html":{},"classes/QuestionDto.html":{},"classes/RegisterDto.html":{},"classes/SessionGateway.html":{},"classes/StartSessionDto.html":{},"classes/TaskGateway.html":{}},"body":{"classes/AddTasksDto.html":{},"classes/ApiError.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"modules/CandidateInterviewModule.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"classes/CreateCandidateInterviewDto.html":{},"classes/CreateFinalTestDto.html":{},"classes/CreateInterviewDto.html":{},"classes/CreateQuestionWithGroupDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateTaskDto.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/FilterSessionsDto.html":{},"controllers/FinalTestController.html":{},"modules/FinalTestModule.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"interfaces/IData.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IResponseBuild.html":{},"interfaces/IUser.html":{},"controllers/InterviewController.html":{},"modules/InterviewModule.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"guards/JwtAuthGuard.html":{},"modules/JwtModule.html":{},"injectables/JwtService.html":{},"classes/LoginDto.html":{},"classes/ParticipantDto.html":{},"modules/PostgresModule.html":{},"injectables/PostgresService.html":{},"controllers/QuestionController.html":{},"classes/QuestionDto.html":{},"modules/QuestionModule.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshService.html":{},"classes/RegisterDto.html":{},"injectables/ResponseBuildService.html":{},"modules/ResponseBuilderModule.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"classes/SessionGateway.html":{},"modules/SessionModule.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{},"classes/StartSessionDto.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"modules/TaskModule.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{},"coverage.html":{},"dependencies.html":{}}}],["client",{"_index":1355,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_candidateinterviewmodule",{"_index":345,"title":{},"body":{"modules/CandidateInterviewModule.html":{},"overview.html":{}}}],["cluster_candidateinterviewmodule_providers",{"_index":346,"title":{},"body":{"modules/CandidateInterviewModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":520,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":521,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_providers",{"_index":522,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_finaltestmodule",{"_index":586,"title":{},"body":{"modules/FinalTestModule.html":{},"overview.html":{}}}],["cluster_finaltestmodule_providers",{"_index":587,"title":{},"body":{"modules/FinalTestModule.html":{},"overview.html":{}}}],["cluster_interviewmodule",{"_index":706,"title":{},"body":{"modules/InterviewModule.html":{},"overview.html":{}}}],["cluster_interviewmodule_providers",{"_index":707,"title":{},"body":{"modules/InterviewModule.html":{},"overview.html":{}}}],["cluster_jwtmodule",{"_index":772,"title":{},"body":{"modules/JwtModule.html":{},"overview.html":{}}}],["cluster_jwtmodule_exports",{"_index":773,"title":{},"body":{"modules/JwtModule.html":{},"overview.html":{}}}],["cluster_jwtmodule_providers",{"_index":774,"title":{},"body":{"modules/JwtModule.html":{},"overview.html":{}}}],["cluster_postgresmodule",{"_index":811,"title":{},"body":{"modules/PostgresModule.html":{},"overview.html":{}}}],["cluster_postgresmodule_exports",{"_index":813,"title":{},"body":{"modules/PostgresModule.html":{},"overview.html":{}}}],["cluster_postgresmodule_providers",{"_index":812,"title":{},"body":{"modules/PostgresModule.html":{},"overview.html":{}}}],["cluster_questionmodule",{"_index":858,"title":{},"body":{"modules/QuestionModule.html":{},"overview.html":{}}}],["cluster_questionmodule_providers",{"_index":859,"title":{},"body":{"modules/QuestionModule.html":{},"overview.html":{}}}],["cluster_redismodule",{"_index":902,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_redismodule_exports",{"_index":903,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_redismodule_providers",{"_index":904,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_responsebuildermodule",{"_index":949,"title":{},"body":{"modules/ResponseBuilderModule.html":{},"overview.html":{}}}],["cluster_responsebuildermodule_exports",{"_index":951,"title":{},"body":{"modules/ResponseBuilderModule.html":{},"overview.html":{}}}],["cluster_responsebuildermodule_providers",{"_index":950,"title":{},"body":{"modules/ResponseBuilderModule.html":{},"overview.html":{}}}],["cluster_sessionmodule",{"_index":1086,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_sessionmodule_imports",{"_index":1087,"title":{},"body":{"modules/SessionModule.html":{}}}],["cluster_sessionmodule_providers",{"_index":1088,"title":{},"body":{"modules/SessionModule.html":{},"overview.html":{}}}],["cluster_taskmodule",{"_index":1231,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["cluster_taskmodule_providers",{"_index":1232,"title":{},"body":{"modules/TaskModule.html":{},"overview.html":{}}}],["code",{"_index":643,"title":{},"body":{"interfaces/IData.html":{},"classes/TaskGateway.html":{},"injectables/TaskService.html":{}}}],["comment",{"_index":395,"title":{},"body":{"classes/CreateCandidateInterviewDto.html":{},"classes/CreateQuestionWithGroupDto.html":{},"classes/QuestionDto.html":{},"injectables/QuestionRepository.html":{}}}],["compose",{"_index":1360,"title":{},"body":{"index.html":{}}}],["config",{"_index":784,"title":{},"body":{"injectables/JwtService.html":{}}}],["configmodule",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":782,"title":{},"body":{"injectables/JwtService.html":{}}}],["connect",{"_index":612,"title":{},"body":{"classes/FinalTestRepository.html":{},"injectables/InterviewRepository.html":{},"injectables/SessionRepository.html":{}}}],["connectedsocket",{"_index":1062,"title":{},"body":{"classes/SessionGateway.html":{}}}],["connectedusers",{"_index":1035,"title":{},"body":{"classes/SessionGateway.html":{}}}],["console.log",{"_index":1064,"title":{},"body":{"classes/SessionGateway.html":{}}}],["const",{"_index":152,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/EmailService.html":{},"classes/FinalTestRepository.html":{},"interfaces/IData.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"injectables/InterviewRepository.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"classes/SessionGateway.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"injectables/CandidateInterviewService.html":{},"injectables/EmailService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"injectables/RedisService.html":{},"injectables/SessionService.html":{}}}],["constructor(authrepository",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(candidateinterviewrepository",{"_index":380,"title":{},"body":{"injectables/CandidateInterviewService.html":{}}}],["constructor(config",{"_index":781,"title":{},"body":{"injectables/JwtService.html":{}}}],["constructor(finaltestrepository",{"_index":629,"title":{},"body":{"injectables/FinalTestService.html":{}}}],["constructor(interviewrepository",{"_index":738,"title":{},"body":{"injectables/InterviewService.html":{}}}],["constructor(postgres",{"_index":131,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/CandidateInterviewRepository.html":{},"classes/FinalTestRepository.html":{},"injectables/InterviewRepository.html":{},"injectables/QuestionRepository.html":{},"injectables/SessionRepository.html":{},"injectables/TaskRepository.html":{}}}],["constructor(private",{"_index":157,"title":{},"body":{"injectables/AuthRepository.html":{},"controllers/CandidateInterviewController.html":{},"injectables/CandidateInterviewRepository.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"interfaces/IData.html":{},"controllers/InterviewController.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"injectables/JwtService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"injectables/RefreshService.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"classes/SessionGateway.html":{},"injectables/SessionRepository.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{}}}],["constructor(questionrepository",{"_index":887,"title":{},"body":{"injectables/QuestionService.html":{}}}],["constructor(redisservice",{"_index":923,"title":{},"body":{"injectables/RefreshService.html":{}}}],["constructor(reflector",{"_index":955,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(sessionrepository",{"_index":1140,"title":{},"body":{"injectables/SessionService.html":{}}}],["constructor(sessionservice",{"_index":1041,"title":{},"body":{"classes/SessionGateway.html":{}}}],["constructor(status",{"_index":38,"title":{},"body":{"classes/ApiError.html":{}}}],["constructor(taskrepository",{"_index":1252,"title":{},"body":{"injectables/TaskService.html":{}}}],["constructor(taskservice",{"_index":1223,"title":{},"body":{"classes/TaskGateway.html":{}}}],["contactdetails",{"_index":396,"title":{},"body":{"classes/CreateCandidateInterviewDto.html":{}}}],["contains",{"_index":368,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{},"classes/FinalTestRepository.html":{},"injectables/InterviewRepository.html":{},"injectables/SessionRepository.html":{}}}],["content",{"_index":1268,"title":{},"body":{"injectables/TaskService.html":{}}}],["context",{"_index":758,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":963,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":764,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["controller",{"_index":244,"title":{"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{},"coverage.html":{}}}],["controller('/api/auth",{"_index":271,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('/api/sessions",{"_index":1008,"title":{},"body":{"controllers/SessionController.html":{}}}],["controller('candidateinterview",{"_index":331,"title":{},"body":{"controllers/CandidateInterviewController.html":{}}}],["controller('finaltest",{"_index":579,"title":{},"body":{"controllers/FinalTestController.html":{}}}],["controller('interview",{"_index":700,"title":{},"body":{"controllers/InterviewController.html":{}}}],["controller('questions",{"_index":846,"title":{},"body":{"controllers/QuestionController.html":{}}}],["controller('tasks",{"_index":1215,"title":{},"body":{"controllers/TaskController.html":{}}}],["controllers",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{},"modules/CandidateInterviewModule.html":{},"modules/FinalTestModule.html":{},"modules/InterviewModule.html":{},"modules/QuestionModule.html":{},"modules/SessionModule.html":{},"modules/TaskModule.html":{}}}],["cookie",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"dependencies.html":{}}}],["correctanswer",{"_index":471,"title":{},"body":{"classes/CreateQuestionWithGroupDto.html":{},"classes/CreateTaskDto.html":{},"classes/QuestionDto.html":{},"injectables/QuestionRepository.html":{}}}],["count",{"_index":1098,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["count(filter",{"_index":1104,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["coverage",{"_index":1279,"title":{"coverage.html":{}},"body":{}}],["cqbfftrv2p9s73eqlqvg",{"_index":1383,"title":{},"body":{"index.html":{}}}],["create",{"_index":291,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"controllers/InterviewController.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"injectables/SessionRepository.html":{},"controllers/TaskController.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{}}}],["create(@body",{"_index":333,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"controllers/TaskController.html":{}}}],["create(createquestiondto",{"_index":835,"title":{},"body":{"controllers/QuestionController.html":{}}}],["create(createtaskdto",{"_index":1206,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["create(dto",{"_index":296,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"controllers/InterviewController.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"injectables/SessionRepository.html":{},"injectables/TaskRepository.html":{}}}],["createcandidateinterviewdto",{"_index":297,"title":{"classes/CreateCandidateInterviewDto.html":{}},"body":{"controllers/CandidateInterviewController.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"classes/CreateCandidateInterviewDto.html":{},"coverage.html":{}}}],["createdbyid",{"_index":1122,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["createfinaltestdto",{"_index":415,"title":{"classes/CreateFinalTestDto.html":{}},"body":{"classes/CreateFinalTestDto.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"coverage.html":{}}}],["createinterviewdto",{"_index":428,"title":{"classes/CreateInterviewDto.html":{}},"body":{"classes/CreateInterviewDto.html":{},"controllers/InterviewController.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":995,"title":{},"body":{"controllers/SessionController.html":{}}}],["createparamdecorator((data",{"_index":1004,"title":{},"body":{"controllers/SessionController.html":{},"miscellaneous/variables.html":{}}}],["createquestiondto",{"_index":837,"title":{},"body":{"controllers/QuestionController.html":{}}}],["createquestionwithgroupdto",{"_index":452,"title":{"classes/CreateQuestionWithGroupDto.html":{}},"body":{"classes/CreateQuestionWithGroupDto.html":{},"controllers/QuestionController.html":{},"classes/QuestionDto.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["createsession",{"_index":969,"title":{},"body":{"controllers/SessionController.html":{},"injectables/SessionService.html":{}}}],["createsession(@body",{"_index":1016,"title":{},"body":{"controllers/SessionController.html":{}}}],["createsession(createsessiondto",{"_index":977,"title":{},"body":{"controllers/SessionController.html":{}}}],["createsession(dto",{"_index":1152,"title":{},"body":{"injectables/SessionService.html":{}}}],["createsessiondto",{"_index":472,"title":{"classes/CreateSessionDto.html":{}},"body":{"classes/CreateSessionDto.html":{},"classes/ParticipantDto.html":{},"controllers/SessionController.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{},"coverage.html":{}}}],["createtaskdto",{"_index":496,"title":{"classes/CreateTaskDto.html":{}},"body":{"classes/CreateTaskDto.html":{},"controllers/TaskController.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["credentials",{"_index":1184,"title":{},"body":{"injectables/SessionService.html":{}}}],["credentials.login",{"_index":1186,"title":{},"body":{"injectables/SessionService.html":{}}}],["credentials.password",{"_index":1187,"title":{},"body":{"injectables/SessionService.html":{}}}],["credentials[candidate.email",{"_index":1196,"title":{},"body":{"injectables/SessionService.html":{}}}],["credentials[email",{"_index":1191,"title":{},"body":{"injectables/SessionService.html":{}}}],["cross",{"_index":1335,"title":{},"body":{"dependencies.html":{}}}],["crud/auth/auth.module",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["crud/finaltest/finaltest.module",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["crud/interview/interview.module",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["crud/question/question.module",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["crud/session/session.module",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["crud/task/task.module",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["crud/сandidateinterview/сandidateinterview.module",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["ctx",{"_index":1005,"title":{},"body":{"controllers/SessionController.html":{},"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1006,"title":{},"body":{"controllers/SessionController.html":{},"miscellaneous/variables.html":{}}}],["currentpage",{"_index":625,"title":{},"body":{"classes/FinalTestRepository.html":{},"injectables/InterviewRepository.html":{}}}],["cursorposition",{"_index":644,"title":{},"body":{"interfaces/IData.html":{},"classes/TaskGateway.html":{}}}],["d",{"_index":1357,"title":{},"body":{"index.html":{}}}],["data",{"_index":163,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"injectables/CandidateInterviewRepository.html":{},"classes/FinalTestRepository.html":{},"interfaces/IData.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IResponseBuild.html":{},"interfaces/IUser.html":{},"injectables/InterviewRepository.html":{},"injectables/JwtService.html":{},"injectables/QuestionRepository.html":{},"injectables/ResponseBuildService.html":{},"controllers/SessionController.html":{},"classes/SessionGateway.html":{},"injectables/SessionRepository.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"injectables/TaskRepository.html":{},"miscellaneous/variables.html":{}}}],["data.code",{"_index":668,"title":{},"body":{"interfaces/IData.html":{},"classes/TaskGateway.html":{}}}],["data.cursorposition",{"_index":674,"title":{},"body":{"interfaces/IData.html":{},"classes/TaskGateway.html":{}}}],["data.userid",{"_index":673,"title":{},"body":{"interfaces/IData.html":{},"classes/TaskGateway.html":{}}}],["database_url",{"_index":1381,"title":{},"body":{"index.html":{}}}],["date",{"_index":399,"title":{},"body":{"classes/CreateCandidateInterviewDto.html":{},"classes/CreateInterviewDto.html":{},"classes/FilterSessionsDto.html":{}}}],["date(dto.starttime",{"_index":1124,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["date})@isnotempty",{"_index":400,"title":{},"body":{"classes/CreateCandidateInterviewDto.html":{}}}],["db",{"_index":1379,"title":{},"body":{"index.html":{}}}],["db/postgres/postgres.module",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["db/postgres/postgres.service",{"_index":149,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/CandidateInterviewRepository.html":{},"classes/FinalTestRepository.html":{},"injectables/InterviewRepository.html":{},"injectables/QuestionRepository.html":{},"injectables/SessionRepository.html":{},"injectables/TaskRepository.html":{}}}],["db/redis/redis.module",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["db/redis/redis.service",{"_index":932,"title":{},"body":{"injectables/RefreshService.html":{}}}],["declarations",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CandidateInterviewModule.html":{},"modules/EmailModule.html":{},"modules/FinalTestModule.html":{},"modules/InterviewModule.html":{},"modules/JwtModule.html":{},"modules/PostgresModule.html":{},"modules/QuestionModule.html":{},"modules/RedisModule.html":{},"modules/ResponseBuilderModule.html":{},"modules/SessionModule.html":{},"modules/TaskModule.html":{},"overview.html":{}}}],["delete",{"_index":292,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"controllers/InterviewController.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"controllers/SessionController.html":{},"injectables/SessionRepository.html":{},"controllers/TaskController.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{}}}],["delete(':id",{"_index":300,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{}}}],["delete(@param('id",{"_index":337,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"controllers/TaskController.html":{}}}],["delete(id",{"_index":299,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"controllers/InterviewController.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"injectables/SessionRepository.html":{},"controllers/TaskController.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{}}}],["deletesession",{"_index":970,"title":{},"body":{"controllers/SessionController.html":{},"injectables/SessionService.html":{}}}],["deletesession(@param('id",{"_index":1020,"title":{},"body":{"controllers/SessionController.html":{}}}],["deletesession(id",{"_index":980,"title":{},"body":{"controllers/SessionController.html":{},"injectables/SessionService.html":{}}}],["dependencies",{"_index":71,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CandidateInterviewModule.html":{},"modules/EmailModule.html":{},"modules/FinalTestModule.html":{},"modules/InterviewModule.html":{},"modules/JwtModule.html":{},"modules/PostgresModule.html":{},"modules/QuestionModule.html":{},"modules/RedisModule.html":{},"modules/ResponseBuilderModule.html":{},"modules/SessionModule.html":{},"modules/TaskModule.html":{},"overview.html":{}}}],["description",{"_index":26,"title":{},"body":{"classes/AddTasksDto.html":{},"classes/CreateCandidateInterviewDto.html":{},"classes/CreateFinalTestDto.html":{},"classes/CreateInterviewDto.html":{},"classes/CreateQuestionWithGroupDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateTaskDto.html":{},"classes/FinalTestRepository.html":{},"interfaces/IData.html":{},"classes/LoginDto.html":{},"classes/ParticipantDto.html":{},"classes/QuestionDto.html":{},"classes/RegisterDto.html":{},"classes/SessionGateway.html":{},"classes/StartSessionDto.html":{},"classes/TaskGateway.html":{},"properties.html":{}}}],["developerlevel",{"_index":469,"title":{},"body":{"classes/CreateQuestionWithGroupDto.html":{},"classes/QuestionDto.html":{},"injectables/QuestionRepository.html":{}}}],["development",{"_index":1365,"title":{},"body":{"index.html":{}}}],["difficulty",{"_index":499,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["difficulty})@isnotempty()@isenum(difficulty",{"_index":509,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["docker",{"_index":1354,"title":{},"body":{"index.html":{}}}],["dto",{"_index":145,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"classes/CreateFinalTestDto.html":{},"classes/CreateInterviewDto.html":{},"classes/CreateQuestionWithGroupDto.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"controllers/InterviewController.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"classes/LoginDto.html":{},"classes/QuestionDto.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"classes/RegisterDto.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{},"injectables/TaskRepository.html":{}}}],["dto.author",{"_index":872,"title":{},"body":{"injectables/QuestionRepository.html":{}}}],["dto.candidatefullname",{"_index":722,"title":{},"body":{"injectables/InterviewRepository.html":{}}}],["dto.candidateimageurl",{"_index":721,"title":{},"body":{"injectables/InterviewRepository.html":{}}}],["dto.categoryname",{"_index":874,"title":{},"body":{"injectables/QuestionRepository.html":{}}}],["dto.description",{"_index":611,"title":{},"body":{"classes/FinalTestRepository.html":{}}}],["dto.duration",{"_index":724,"title":{},"body":{"injectables/InterviewRepository.html":{},"injectables/SessionRepository.html":{}}}],["dto.email",{"_index":161,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["dto.excludetaskids?.includes(question.id",{"_index":607,"title":{},"body":{"classes/FinalTestRepository.html":{}}}],["dto.finalcomment",{"_index":725,"title":{},"body":{"injectables/InterviewRepository.html":{}}}],["dto.interviewdatetime",{"_index":723,"title":{},"body":{"injectables/InterviewRepository.html":{}}}],["dto.participantids.map((id",{"_index":727,"title":{},"body":{"injectables/InterviewRepository.html":{}}}],["dto.participants.map((participant",{"_index":1126,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["dto.password",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["dto.questiongroupid",{"_index":600,"title":{},"body":{"classes/FinalTestRepository.html":{}}}],["dto.questiongroupid.map((groupid",{"_index":616,"title":{},"body":{"classes/FinalTestRepository.html":{}}}],["dto.questions.map((question",{"_index":875,"title":{},"body":{"injectables/QuestionRepository.html":{}}}],["dto.recruiter_id",{"_index":1125,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["dto.reportlink",{"_index":726,"title":{},"body":{"injectables/InterviewRepository.html":{}}}],["dto.status",{"_index":720,"title":{},"body":{"injectables/InterviewRepository.html":{}}}],["dto.taskids.map((id",{"_index":730,"title":{},"body":{"injectables/InterviewRepository.html":{}}}],["dto.tasks.map((id",{"_index":1128,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["dto.testids.map((id",{"_index":729,"title":{},"body":{"injectables/InterviewRepository.html":{}}}],["dto.title",{"_index":610,"title":{},"body":{"classes/FinalTestRepository.html":{},"injectables/InterviewRepository.html":{},"injectables/QuestionRepository.html":{},"injectables/SessionRepository.html":{}}}],["dto.userid",{"_index":873,"title":{},"body":{"injectables/QuestionRepository.html":{}}}],["dto/add",{"_index":1001,"title":{},"body":{"controllers/SessionController.html":{}}}],["dto/create",{"_index":319,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"controllers/InterviewController.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"controllers/SessionController.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{},"controllers/TaskController.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{}}}],["dto/filter",{"_index":999,"title":{},"body":{"controllers/SessionController.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{}}}],["dto/login.dto",{"_index":151,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["dto/register.dto",{"_index":150,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["duration",{"_index":433,"title":{},"body":{"classes/CreateInterviewDto.html":{},"classes/CreateSessionDto.html":{},"injectables/InterviewRepository.html":{},"classes/ParticipantDto.html":{},"injectables/SessionRepository.html":{}}}],["each",{"_index":27,"title":{},"body":{"classes/AddTasksDto.html":{}}}],["email",{"_index":137,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"injectables/CandidateInterviewRepository.html":{},"classes/CreateCandidateInterviewDto.html":{},"classes/CreateSessionDto.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"classes/LoginDto.html":{},"classes/ParticipantDto.html":{},"classes/RegisterDto.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["email.service",{"_index":525,"title":{},"body":{"modules/EmailModule.html":{}}}],["emailmodule",{"_index":519,"title":{"modules/EmailModule.html":{}},"body":{"modules/EmailModule.html":{},"modules/SessionModule.html":{},"modules.html":{},"overview.html":{}}}],["emailservice",{"_index":523,"title":{"injectables/EmailService.html":{}},"body":{"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/SessionService.html":{},"coverage.html":{},"overview.html":{}}}],["emit('notifyparticipants",{"_index":1082,"title":{},"body":{"classes/SessionGateway.html":{}}}],["enableshutdownhooks",{"_index":819,"title":{},"body":{"injectables/PostgresService.html":{}}}],["enableshutdownhooks(app",{"_index":822,"title":{},"body":{"injectables/PostgresService.html":{}}}],["enddate",{"_index":556,"title":{},"body":{"classes/FilterSessionsDto.html":{},"injectables/SessionRepository.html":{}}}],["endsession",{"_index":1137,"title":{},"body":{"injectables/SessionService.html":{}}}],["endsession(sessionid",{"_index":1155,"title":{},"body":{"injectables/SessionService.html":{}}}],["enum",{"_index":508,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["enums",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"classes/RegisterDto.html":{}}}],["enums.userrole",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"classes/RegisterDto.html":{}}}],["env",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["envfilepath",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":1373,"title":{},"body":{"index.html":{}}}],["error",{"_index":31,"title":{},"body":{"classes/ApiError.html":{},"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"controllers/QuestionController.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["error.status",{"_index":280,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{}}}],["errors",{"_index":32,"title":{},"body":{"classes/ApiError.html":{}}}],["example",{"_index":800,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["excludetaskids",{"_index":419,"title":{},"body":{"classes/CreateFinalTestDto.html":{}}}],["executioncontext",{"_index":756,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":786,"title":{},"body":{"injectables/JwtService.html":{}}}],["export",{"_index":25,"title":{},"body":{"classes/AddTasksDto.html":{},"classes/ApiError.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"modules/CandidateInterviewModule.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"classes/CreateCandidateInterviewDto.html":{},"classes/CreateFinalTestDto.html":{},"classes/CreateInterviewDto.html":{},"classes/CreateQuestionWithGroupDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateTaskDto.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/FilterSessionsDto.html":{},"controllers/FinalTestController.html":{},"modules/FinalTestModule.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"interfaces/IData.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IResponseBuild.html":{},"interfaces/IUser.html":{},"controllers/InterviewController.html":{},"modules/InterviewModule.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"guards/JwtAuthGuard.html":{},"modules/JwtModule.html":{},"injectables/JwtService.html":{},"classes/LoginDto.html":{},"classes/ParticipantDto.html":{},"modules/PostgresModule.html":{},"injectables/PostgresService.html":{},"controllers/QuestionController.html":{},"classes/QuestionDto.html":{},"modules/QuestionModule.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshService.html":{},"classes/RegisterDto.html":{},"injectables/ResponseBuildService.html":{},"modules/ResponseBuilderModule.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"classes/SessionGateway.html":{},"modules/SessionModule.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{},"classes/StartSessionDto.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"modules/TaskModule.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{}}}],["exports",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CandidateInterviewModule.html":{},"modules/EmailModule.html":{},"modules/FinalTestModule.html":{},"modules/InterviewModule.html":{},"modules/JwtModule.html":{},"modules/PostgresModule.html":{},"modules/QuestionModule.html":{},"modules/RedisModule.html":{},"modules/ResponseBuilderModule.html":{},"modules/SessionModule.html":{},"modules/TaskModule.html":{},"overview.html":{}}}],["express",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"dependencies.html":{}}}],["extends",{"_index":58,"title":{},"body":{"classes/ApiError.html":{},"injectables/PostgresService.html":{},"classes/RegisterDto.html":{}}}],["false",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"classes/FinalTestRepository.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["fetch(url",{"_index":1265,"title":{},"body":{"injectables/TaskService.html":{}}}],["filter",{"_index":990,"title":{},"body":{"controllers/SessionController.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{}}}],["filteredquestions",{"_index":604,"title":{},"body":{"classes/FinalTestRepository.html":{}}}],["filtersessionsdto",{"_index":553,"title":{"classes/FilterSessionsDto.html":{}},"body":{"classes/FilterSessionsDto.html":{},"controllers/SessionController.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{},"coverage.html":{}}}],["final",{"_index":417,"title":{},"body":{"classes/CreateFinalTestDto.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"coverage.html":{}}}],["finalcomment",{"_index":434,"title":{},"body":{"classes/CreateInterviewDto.html":{},"injectables/InterviewRepository.html":{}}}],["finaltest",{"_index":570,"title":{},"body":{"controllers/FinalTestController.html":{}}}],["finaltest.controller",{"_index":589,"title":{},"body":{"modules/FinalTestModule.html":{}}}],["finaltest.repository",{"_index":591,"title":{},"body":{"modules/FinalTestModule.html":{},"injectables/FinalTestService.html":{}}}],["finaltest.service",{"_index":577,"title":{},"body":{"controllers/FinalTestController.html":{},"modules/FinalTestModule.html":{}}}],["finaltestcontroller",{"_index":568,"title":{"controllers/FinalTestController.html":{}},"body":{"controllers/FinalTestController.html":{},"modules/FinalTestModule.html":{},"coverage.html":{}}}],["finaltestmodule",{"_index":81,"title":{"modules/FinalTestModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FinalTestModule.html":{},"modules.html":{},"overview.html":{}}}],["finaltestrepository",{"_index":590,"title":{"classes/FinalTestRepository.html":{}},"body":{"modules/FinalTestModule.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"coverage.html":{}}}],["finaltests",{"_index":618,"title":{},"body":{"classes/FinalTestRepository.html":{}}}],["finaltestservice",{"_index":576,"title":{"injectables/FinalTestService.html":{}},"body":{"controllers/FinalTestController.html":{},"modules/FinalTestModule.html":{},"injectables/FinalTestService.html":{},"coverage.html":{},"overview.html":{}}}],["findall",{"_index":293,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"controllers/InterviewController.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionRepository.html":{},"injectables/SessionRepository.html":{},"controllers/TaskController.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{}}}],["findall(@query('category",{"_index":851,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/TaskController.html":{}}}],["findall(category",{"_index":839,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionRepository.html":{},"controllers/TaskController.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{}}}],["findall(filter",{"_index":1108,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["findall(page",{"_index":302,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"controllers/InterviewController.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{}}}],["findbyid",{"_index":294,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"controllers/InterviewController.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"injectables/QuestionRepository.html":{},"injectables/SessionRepository.html":{},"controllers/TaskController.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{}}}],["findbyid(@param('id",{"_index":343,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/TaskController.html":{}}}],["findbyid(id",{"_index":307,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"controllers/InterviewController.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"injectables/QuestionRepository.html":{},"injectables/SessionRepository.html":{},"controllers/TaskController.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{}}}],["findbyinterviewerid",{"_index":1099,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["findbyinterviewerid(interviewerid",{"_index":1111,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["findemail",{"_index":127,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["findemail(email",{"_index":135,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["findid",{"_index":128,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["findid(userid",{"_index":138,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["findtoken",{"_index":920,"title":{},"body":{"injectables/RefreshService.html":{}}}],["findtoken(userid",{"_index":925,"title":{},"body":{"injectables/RefreshService.html":{}}}],["fix",{"_index":1369,"title":{},"body":{"index.html":{}}}],["format",{"_index":1371,"title":{},"body":{"index.html":{}}}],["found",{"_index":52,"title":{},"body":{"classes/ApiError.html":{},"injectables/QuestionService.html":{},"injectables/SessionService.html":{},"injectables/TaskService.html":{}}}],["full_name",{"_index":154,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateSessionDto.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"classes/ParticipantDto.html":{},"classes/RegisterDto.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["fullname",{"_index":367,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{},"classes/CreateCandidateInterviewDto.html":{}}}],["function",{"_index":1311,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1349,"title":{"miscellaneous/functions.html":{}},"body":{}}],["gateway",{"_index":658,"title":{},"body":{"interfaces/IData.html":{},"classes/SessionGateway.html":{},"classes/TaskGateway.html":{}}}],["generatetokens",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetokens(userid",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["get(':id",{"_index":308,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{}}}],["get('logout",{"_index":251,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["get('refresh",{"_index":256,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["getall",{"_index":886,"title":{},"body":{"injectables/QuestionService.html":{}}}],["getall(category",{"_index":891,"title":{},"body":{"injectables/QuestionService.html":{}}}],["getredisclient",{"_index":909,"title":{},"body":{"injectables/RedisService.html":{}}}],["getsession",{"_index":971,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(@param('id",{"_index":1023,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(id",{"_index":983,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsessionbyid",{"_index":1138,"title":{},"body":{"injectables/SessionService.html":{}}}],["getsessionbyid(id",{"_index":1157,"title":{},"body":{"injectables/SessionService.html":{}}}],["getsessions",{"_index":972,"title":{},"body":{"controllers/SessionController.html":{},"injectables/SessionService.html":{}}}],["getsessions(@query",{"_index":1010,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsessions(filter",{"_index":987,"title":{},"body":{"controllers/SessionController.html":{},"injectables/SessionService.html":{}}}],["getting",{"_index":1351,"title":{"index.html":{}},"body":{}}],["global",{"_index":776,"title":{},"body":{"modules/JwtModule.html":{},"modules/PostgresModule.html":{},"modules/RedisModule.html":{},"modules/ResponseBuilderModule.html":{}}}],["gmail",{"_index":544,"title":{},"body":{"injectables/EmailService.html":{}}}],["group",{"_index":898,"title":{},"body":{"injectables/QuestionService.html":{}}}],["group.id",{"_index":614,"title":{},"body":{"classes/FinalTestRepository.html":{}}}],["groupid",{"_index":617,"title":{},"body":{"classes/FinalTestRepository.html":{}}}],["gte",{"_index":1119,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["guard",{"_index":750,"title":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}},"body":{"coverage.html":{}}}],["handlechangedcode",{"_index":1221,"title":{},"body":{"classes/TaskGateway.html":{}}}],["handlechangedcode(@messagebody",{"_index":662,"title":{},"body":{"interfaces/IData.html":{},"classes/TaskGateway.html":{}}}],["handlechangedcode(data",{"_index":1225,"title":{},"body":{"classes/TaskGateway.html":{}}}],["handlecoderuntest",{"_index":1222,"title":{},"body":{"classes/TaskGateway.html":{}}}],["handlecoderuntest(@messagebody",{"_index":665,"title":{},"body":{"interfaces/IData.html":{},"classes/TaskGateway.html":{}}}],["handlecoderuntest(data",{"_index":1227,"title":{},"body":{"classes/TaskGateway.html":{}}}],["handleconnection",{"_index":1036,"title":{},"body":{"classes/SessionGateway.html":{}}}],["handleconnection(socket",{"_index":1045,"title":{},"body":{"classes/SessionGateway.html":{}}}],["handledisconnect",{"_index":1037,"title":{},"body":{"classes/SessionGateway.html":{}}}],["handledisconnect(socket",{"_index":1049,"title":{},"body":{"classes/SessionGateway.html":{}}}],["handleendsession",{"_index":1038,"title":{},"body":{"classes/SessionGateway.html":{}}}],["handleendsession(@messagebody",{"_index":1083,"title":{},"body":{"classes/SessionGateway.html":{}}}],["handleendsession(sessionid",{"_index":1051,"title":{},"body":{"classes/SessionGateway.html":{}}}],["handlejoinsession",{"_index":1039,"title":{},"body":{"classes/SessionGateway.html":{}}}],["handlejoinsession(data",{"_index":1055,"title":{},"body":{"classes/SessionGateway.html":{}}}],["handlestartsession",{"_index":1040,"title":{},"body":{"classes/SessionGateway.html":{}}}],["handlestartsession(@messagebody",{"_index":1077,"title":{},"body":{"classes/SessionGateway.html":{}}}],["handlestartsession(sessionid",{"_index":1059,"title":{},"body":{"classes/SessionGateway.html":{}}}],["handleupdatecursor",{"_index":671,"title":{},"body":{"interfaces/IData.html":{},"classes/TaskGateway.html":{}}}],["handleupdatecursor(data",{"_index":1229,"title":{},"body":{"classes/TaskGateway.html":{}}}],["headers",{"_index":1267,"title":{},"body":{"injectables/TaskService.html":{}}}],["host",{"_index":914,"title":{},"body":{"injectables/RedisService.html":{}}}],["hr",{"_index":1166,"title":{},"body":{"injectables/SessionService.html":{}}}],["html",{"_index":551,"title":{},"body":{"injectables/EmailService.html":{}}}],["http",{"_index":42,"title":{},"body":{"classes/ApiError.html":{}}}],["http://localhost:3000",{"_index":1387,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/run",{"_index":1264,"title":{},"body":{"injectables/TaskService.html":{}}}],["httpexception",{"_index":267,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{}}}],["httpexception(error.response",{"_index":279,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{}}}],["httponly",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["https://your",{"_index":1181,"title":{},"body":{"injectables/SessionService.html":{}}}],["httpstatus",{"_index":56,"title":{},"body":{"classes/ApiError.html":{},"controllers/AuthenticationController.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{}}}],["httpstatus.created",{"_index":1018,"title":{},"body":{"controllers/SessionController.html":{},"controllers/TaskController.html":{}}}],["httpstatus.no_content",{"_index":1022,"title":{},"body":{"controllers/SessionController.html":{},"controllers/TaskController.html":{}}}],["httpstatus.ok",{"_index":1012,"title":{},"body":{"controllers/SessionController.html":{},"controllers/TaskController.html":{}}}],["id",{"_index":140,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/CandidateInterviewController.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"classes/CreateQuestionWithGroupDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateTaskDto.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"controllers/InterviewController.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"classes/ParticipantDto.html":{},"controllers/QuestionController.html":{},"classes/QuestionDto.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"injectables/RefreshService.html":{},"controllers/SessionController.html":{},"classes/SessionGateway.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{},"classes/StartSessionDto.html":{},"controllers/TaskController.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{},"miscellaneous/variables.html":{}}}],["id'})@get(':id",{"_index":1210,"title":{},"body":{"controllers/TaskController.html":{}}}],["idata",{"_index":641,"title":{"interfaces/IData.html":{}},"body":{"interfaces/IData.html":{},"classes/TaskGateway.html":{},"coverage.html":{}}}],["ids",{"_index":12,"title":{},"body":{"classes/AddTasksDto.html":{},"classes/CreateFinalTestDto.html":{}}}],["ids'})@isnotempty",{"_index":425,"title":{},"body":{"classes/CreateFinalTestDto.html":{}}}],["igeneratetokens",{"_index":194,"title":{"interfaces/IGenerateTokens.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"coverage.html":{}}}],["ilogin",{"_index":196,"title":{"interfaces/ILogin.html":{}},"body":{"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"coverage.html":{}}}],["imageurl",{"_index":397,"title":{},"body":{"classes/CreateCandidateInterviewDto.html":{}}}],["implements",{"_index":763,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/PostgresService.html":{},"guards/RolesGuard.html":{},"classes/SessionGateway.html":{}}}],["import",{"_index":19,"title":{},"body":{"classes/AddTasksDto.html":{},"classes/ApiError.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"modules/CandidateInterviewModule.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"classes/CreateCandidateInterviewDto.html":{},"classes/CreateFinalTestDto.html":{},"classes/CreateInterviewDto.html":{},"classes/CreateQuestionWithGroupDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateTaskDto.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/FilterSessionsDto.html":{},"controllers/FinalTestController.html":{},"modules/FinalTestModule.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"interfaces/IData.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IResponseBuild.html":{},"interfaces/IUser.html":{},"controllers/InterviewController.html":{},"modules/InterviewModule.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"guards/JwtAuthGuard.html":{},"modules/JwtModule.html":{},"injectables/JwtService.html":{},"classes/LoginDto.html":{},"classes/ParticipantDto.html":{},"modules/PostgresModule.html":{},"injectables/PostgresService.html":{},"controllers/QuestionController.html":{},"classes/QuestionDto.html":{},"modules/QuestionModule.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshService.html":{},"classes/RegisterDto.html":{},"injectables/ResponseBuildService.html":{},"modules/ResponseBuilderModule.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"classes/SessionGateway.html":{},"modules/SessionModule.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{},"classes/StartSessionDto.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"modules/TaskModule.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{}}}],["imports",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SessionModule.html":{}}}],["include",{"_index":603,"title":{},"body":{"classes/FinalTestRepository.html":{},"injectables/InterviewRepository.html":{},"injectables/SessionRepository.html":{}}}],["index",{"_index":1353,"title":{"index.html":{}},"body":{}}],["inestapplication",{"_index":823,"title":{},"body":{"injectables/PostgresService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddTasksDto.html":{},"classes/ApiError.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"modules/CandidateInterviewModule.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"classes/CreateCandidateInterviewDto.html":{},"classes/CreateFinalTestDto.html":{},"classes/CreateInterviewDto.html":{},"classes/CreateQuestionWithGroupDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateTaskDto.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/FilterSessionsDto.html":{},"controllers/FinalTestController.html":{},"modules/FinalTestModule.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"interfaces/IData.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IResponseBuild.html":{},"interfaces/IUser.html":{},"controllers/InterviewController.html":{},"modules/InterviewModule.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"guards/JwtAuthGuard.html":{},"modules/JwtModule.html":{},"injectables/JwtService.html":{},"classes/LoginDto.html":{},"classes/ParticipantDto.html":{},"modules/PostgresModule.html":{},"injectables/PostgresService.html":{},"controllers/QuestionController.html":{},"classes/QuestionDto.html":{},"modules/QuestionModule.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshService.html":{},"classes/RegisterDto.html":{},"injectables/ResponseBuildService.html":{},"modules/ResponseBuilderModule.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"classes/SessionGateway.html":{},"modules/SessionModule.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{},"classes/StartSessionDto.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"modules/TaskModule.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{}}}],["injectable",{"_index":125,"title":{"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"injectables/EmailService.html":{},"injectables/FinalTestService.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"injectables/JwtService.html":{},"injectables/PostgresService.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"injectables/RedisService.html":{},"injectables/RefreshService.html":{},"injectables/ResponseBuildService.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{}},"body":{"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"injectables/EmailService.html":{},"injectables/FinalTestService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IResponseBuild.html":{},"interfaces/IUser.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/PostgresService.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"injectables/RedisService.html":{},"injectables/RefreshService.html":{},"injectables/ResponseBuildService.html":{},"guards/RolesGuard.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["inputdata",{"_index":500,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["insensitive",{"_index":370,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{},"classes/FinalTestRepository.html":{},"injectables/InterviewRepository.html":{},"injectables/SessionRepository.html":{}}}],["install",{"_index":1363,"title":{},"body":{"index.html":{}}}],["interface",{"_index":193,"title":{"interfaces/IData.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IResponseBuild.html":{},"interfaces/IUser.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/IData.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IResponseBuild.html":{},"interfaces/IUser.html":{},"injectables/ResponseBuildService.html":{},"classes/TaskGateway.html":{},"coverage.html":{}}}],["interview",{"_index":691,"title":{},"body":{"controllers/InterviewController.html":{}}}],["interview.controller",{"_index":710,"title":{},"body":{"modules/InterviewModule.html":{}}}],["interview.dto",{"_index":699,"title":{},"body":{"controllers/InterviewController.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{}}}],["interview.dto.ts",{"_index":430,"title":{},"body":{"classes/CreateInterviewDto.html":{},"coverage.html":{}}}],["interview.dto.ts:15",{"_index":450,"title":{},"body":{"classes/CreateInterviewDto.html":{}}}],["interview.dto.ts:23",{"_index":447,"title":{},"body":{"classes/CreateInterviewDto.html":{}}}],["interview.dto.ts:31",{"_index":441,"title":{},"body":{"classes/CreateInterviewDto.html":{}}}],["interview.dto.ts:39",{"_index":439,"title":{},"body":{"classes/CreateInterviewDto.html":{}}}],["interview.dto.ts:46",{"_index":444,"title":{},"body":{"classes/CreateInterviewDto.html":{}}}],["interview.dto.ts:53",{"_index":442,"title":{},"body":{"classes/CreateInterviewDto.html":{}}}],["interview.dto.ts:61",{"_index":443,"title":{},"body":{"classes/CreateInterviewDto.html":{}}}],["interview.dto.ts:69",{"_index":446,"title":{},"body":{"classes/CreateInterviewDto.html":{}}}],["interview.dto.ts:76",{"_index":445,"title":{},"body":{"classes/CreateInterviewDto.html":{}}}],["interview.dto.ts:83",{"_index":449,"title":{},"body":{"classes/CreateInterviewDto.html":{}}}],["interview.dto.ts:90",{"_index":448,"title":{},"body":{"classes/CreateInterviewDto.html":{}}}],["interview.repository",{"_index":711,"title":{},"body":{"modules/InterviewModule.html":{},"injectables/InterviewService.html":{}}}],["interview.service",{"_index":698,"title":{},"body":{"controllers/InterviewController.html":{},"modules/InterviewModule.html":{}}}],["interviewcontroller",{"_index":689,"title":{"controllers/InterviewController.html":{}},"body":{"controllers/InterviewController.html":{},"modules/InterviewModule.html":{},"coverage.html":{}}}],["interviewdatetime",{"_index":435,"title":{},"body":{"classes/CreateInterviewDto.html":{},"injectables/InterviewRepository.html":{}}}],["interviewer",{"_index":330,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"controllers/TaskController.html":{}}}],["interviewer'])@get",{"_index":988,"title":{},"body":{"controllers/SessionController.html":{}}}],["interviewer'])@get(':id",{"_index":985,"title":{},"body":{"controllers/SessionController.html":{}}}],["interviewerid",{"_index":1113,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["interviewmodule",{"_index":82,"title":{"modules/InterviewModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InterviewModule.html":{},"modules.html":{},"overview.html":{}}}],["interviewrepository",{"_index":708,"title":{"injectables/InterviewRepository.html":{}},"body":{"modules/InterviewModule.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"coverage.html":{},"overview.html":{}}}],["interviews",{"_index":732,"title":{},"body":{"injectables/InterviewRepository.html":{}}}],["interviewservice",{"_index":697,"title":{"injectables/InterviewService.html":{}},"body":{"controllers/InterviewController.html":{},"modules/InterviewModule.html":{},"injectables/InterviewService.html":{},"coverage.html":{},"overview.html":{}}}],["interviewstage",{"_index":398,"title":{},"body":{"classes/CreateCandidateInterviewDto.html":{},"classes/CreateInterviewDto.html":{}}}],["interviewstatus",{"_index":563,"title":{},"body":{"classes/FilterSessionsDto.html":{}}}],["ioredis",{"_index":912,"title":{},"body":{"injectables/RedisService.html":{},"injectables/RefreshService.html":{},"dependencies.html":{}}}],["iresponsebuild",{"_index":675,"title":{"interfaces/IResponseBuild.html":{}},"body":{"interfaces/IResponseBuild.html":{},"injectables/ResponseBuildService.html":{},"coverage.html":{}}}],["isactive",{"_index":495,"title":{},"body":{"classes/CreateSessionDto.html":{},"classes/ParticipantDto.html":{},"injectables/SessionRepository.html":{}}}],["isarray",{"_index":20,"title":{},"body":{"classes/AddTasksDto.html":{},"classes/CreateInterviewDto.html":{},"classes/CreateQuestionWithGroupDto.html":{},"classes/CreateSessionDto.html":{},"classes/ParticipantDto.html":{},"classes/QuestionDto.html":{}}}],["isarray()@arraynotempty",{"_index":464,"title":{},"body":{"classes/CreateQuestionWithGroupDto.html":{}}}],["isboolean",{"_index":493,"title":{},"body":{"classes/CreateSessionDto.html":{},"classes/ParticipantDto.html":{}}}],["isdate",{"_index":414,"title":{},"body":{"classes/CreateCandidateInterviewDto.html":{}}}],["isdatestring",{"_index":491,"title":{},"body":{"classes/CreateSessionDto.html":{},"classes/ParticipantDto.html":{}}}],["isemail",{"_index":413,"title":{},"body":{"classes/CreateCandidateInterviewDto.html":{},"classes/CreateSessionDto.html":{},"classes/LoginDto.html":{},"classes/ParticipantDto.html":{}}}],["isenum",{"_index":516,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/FilterSessionsDto.html":{}}}],["isenum(difficulty",{"_index":518,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["isenum(interviewstatus",{"_index":567,"title":{},"body":{"classes/FilterSessionsDto.html":{}}}],["isglobal",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":412,"title":{},"body":{"classes/CreateCandidateInterviewDto.html":{},"classes/CreateFinalTestDto.html":{},"classes/CreateInterviewDto.html":{},"classes/CreateQuestionWithGroupDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateTaskDto.html":{},"classes/LoginDto.html":{},"classes/ParticipantDto.html":{},"classes/QuestionDto.html":{},"classes/RegisterDto.html":{}}}],["isnotempty()@isstring",{"_index":422,"title":{},"body":{"classes/CreateFinalTestDto.html":{},"classes/CreateInterviewDto.html":{},"classes/CreateQuestionWithGroupDto.html":{},"classes/CreateTaskDto.html":{},"classes/QuestionDto.html":{}}}],["isnumber",{"_index":492,"title":{},"body":{"classes/CreateSessionDto.html":{},"classes/ParticipantDto.html":{}}}],["iso",{"_index":484,"title":{},"body":{"classes/CreateSessionDto.html":{},"classes/ParticipantDto.html":{}}}],["isoptional",{"_index":451,"title":{},"body":{"classes/CreateInterviewDto.html":{},"classes/CreateSessionDto.html":{},"classes/FilterSessionsDto.html":{},"classes/ParticipantDto.html":{}}}],["isoptional()@isenum(interviewstatus",{"_index":564,"title":{},"body":{"classes/FilterSessionsDto.html":{}}}],["isoptional()@isstring",{"_index":440,"title":{},"body":{"classes/CreateInterviewDto.html":{},"classes/FilterSessionsDto.html":{}}}],["isstring",{"_index":21,"title":{},"body":{"classes/AddTasksDto.html":{},"classes/CreateCandidateInterviewDto.html":{},"classes/CreateFinalTestDto.html":{},"classes/CreateInterviewDto.html":{},"classes/CreateQuestionWithGroupDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateTaskDto.html":{},"classes/FilterSessionsDto.html":{},"classes/LoginDto.html":{},"classes/ParticipantDto.html":{},"classes/QuestionDto.html":{},"classes/RegisterDto.html":{},"classes/StartSessionDto.html":{}}}],["isstring()@isnotempty",{"_index":939,"title":{},"body":{"classes/RegisterDto.html":{}}}],["items",{"_index":372,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{}}}],["iuser",{"_index":198,"title":{"interfaces/IUser.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"coverage.html":{}}}],["json",{"_index":504,"title":{},"body":{"classes/CreateTaskDto.html":{},"guards/JwtAuthGuard.html":{},"modules/JwtModule.html":{},"injectables/JwtService.html":{}}}],["json'})@isnotempty",{"_index":511,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["json.stringify",{"_index":1270,"title":{},"body":{"injectables/TaskService.html":{}}}],["jsonwebtoken",{"_index":762,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"dependencies.html":{}}}],["jsonwebtokenerror",{"_index":798,"title":{},"body":{"injectables/JwtService.html":{}}}],["jwt",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"guards/JwtAuthGuard.html":{},"modules/JwtModule.html":{},"injectables/JwtService.html":{}}}],["jwt.service",{"_index":777,"title":{},"body":{"modules/JwtModule.html":{}}}],["jwt.sign",{"_index":797,"title":{},"body":{"injectables/JwtService.html":{}}}],["jwt.verify(token",{"_index":770,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/JwtService.html":{}}}],["jwt_secret",{"_index":1391,"title":{},"body":{"index.html":{}}}],["jwtauthguard",{"_index":321,"title":{"guards/JwtAuthGuard.html":{}},"body":{"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"guards/JwtAuthGuard.html":{},"controllers/QuestionController.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{},"coverage.html":{}}}],["jwtmodule",{"_index":83,"title":{"modules/JwtModule.html":{}},"body":{"modules/AppModule.html":{},"modules/JwtModule.html":{},"modules.html":{},"overview.html":{}}}],["jwtservice",{"_index":171,"title":{"injectables/JwtService.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"modules/JwtModule.html":{},"injectables/JwtService.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":1180,"title":{},"body":{"injectables/SessionService.html":{}}}],["language",{"_index":645,"title":{},"body":{"interfaces/IData.html":{},"classes/TaskGateway.html":{},"injectables/TaskService.html":{}}}],["lax",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["legend",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CandidateInterviewModule.html":{},"modules/EmailModule.html":{},"modules/FinalTestModule.html":{},"modules/InterviewModule.html":{},"modules/JwtModule.html":{},"modules/PostgresModule.html":{},"modules/QuestionModule.html":{},"modules/RedisModule.html":{},"modules/ResponseBuilderModule.html":{},"modules/SessionModule.html":{},"modules/TaskModule.html":{},"overview.html":{}}}],["length",{"_index":1144,"title":{},"body":{"injectables/SessionService.html":{}}}],["license",{"_index":1404,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":303,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"controllers/InterviewController.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{}}}],["link",{"_index":533,"title":{},"body":{"injectables/EmailService.html":{},"injectables/SessionService.html":{}}}],["lint",{"_index":1368,"title":{},"body":{"index.html":{}}}],["literal",{"_index":1056,"title":{},"body":{"classes/SessionGateway.html":{},"injectables/SessionService.html":{},"classes/TaskGateway.html":{}}}],["login",{"_index":129,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"injectables/SessionService.html":{}}}],["login(dto",{"_index":142,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["login.dto",{"_index":945,"title":{},"body":{"classes/RegisterDto.html":{}}}],["logindto",{"_index":143,"title":{"classes/LoginDto.html":{}},"body":{"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["logindto:13",{"_index":943,"title":{},"body":{"classes/RegisterDto.html":{}}}],["logindto:18",{"_index":944,"title":{},"body":{"classes/RegisterDto.html":{}}}],["logininfo",{"_index":534,"title":{},"body":{"injectables/EmailService.html":{},"injectables/SessionService.html":{}}}],["logout",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{}}}],["logout(@req",{"_index":286,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(refreshtoken",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["logout(req",{"_index":249,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["lte",{"_index":1120,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["mail/email.module",{"_index":1093,"title":{},"body":{"modules/SessionModule.html":{}}}],["mail/email.service",{"_index":1164,"title":{},"body":{"injectables/SessionService.html":{}}}],["mailoptions",{"_index":549,"title":{},"body":{"injectables/EmailService.html":{}}}],["map",{"_index":1043,"title":{},"body":{"classes/SessionGateway.html":{}}}],["math.ceil(totalcount",{"_index":624,"title":{},"body":{"classes/FinalTestRepository.html":{},"injectables/InterviewRepository.html":{}}}],["maxage",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["message",{"_index":40,"title":{},"body":{"classes/ApiError.html":{},"interfaces/IResponseBuild.html":{},"injectables/ResponseBuildService.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{}}}],["messagebody",{"_index":647,"title":{},"body":{"interfaces/IData.html":{},"classes/SessionGateway.html":{},"classes/TaskGateway.html":{}}}],["metadata",{"_index":1341,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":1266,"title":{},"body":{"injectables/TaskService.html":{}}}],["miscellaneous",{"_index":1348,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{}}],["mode",{"_index":369,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{},"classes/FinalTestRepository.html":{},"injectables/InterviewRepository.html":{},"injectables/SessionRepository.html":{}}}],["module",{"_index":69,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CandidateInterviewModule.html":{},"modules/EmailModule.html":{},"modules/FinalTestModule.html":{},"modules/InterviewModule.html":{},"modules/JwtModule.html":{},"modules/PostgresModule.html":{},"modules/QuestionModule.html":{},"modules/RedisModule.html":{},"modules/ResponseBuilderModule.html":{},"modules/SessionModule.html":{},"modules/TaskModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CandidateInterviewModule.html":{},"modules/EmailModule.html":{},"modules/FinalTestModule.html":{},"modules/InterviewModule.html":{},"modules/JwtModule.html":{},"modules/PostgresModule.html":{},"modules/QuestionModule.html":{},"modules/RedisModule.html":{},"modules/ResponseBuilderModule.html":{},"modules/SessionModule.html":{},"modules/TaskModule.html":{},"overview.html":{}}}],["modules",{"_index":1393,"title":{"modules.html":{}},"body":{}}],["ms",{"_index":794,"title":{},"body":{"injectables/JwtService.html":{}}}],["nestjs",{"_index":826,"title":{},"body":{"injectables/PostgresService.html":{}}}],["nestjs/common",{"_index":57,"title":{},"body":{"classes/ApiError.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"modules/CandidateInterviewModule.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/FinalTestController.html":{},"modules/FinalTestModule.html":{},"injectables/FinalTestService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IResponseBuild.html":{},"interfaces/IUser.html":{},"controllers/InterviewController.html":{},"modules/InterviewModule.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"guards/JwtAuthGuard.html":{},"modules/JwtModule.html":{},"injectables/JwtService.html":{},"modules/PostgresModule.html":{},"injectables/PostgresService.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshService.html":{},"injectables/ResponseBuildService.html":{},"modules/ResponseBuilderModule.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{},"controllers/TaskController.html":{},"modules/TaskModule.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":959,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1325,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":24,"title":{},"body":{"classes/AddTasksDto.html":{},"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"classes/CreateCandidateInterviewDto.html":{},"classes/CreateFinalTestDto.html":{},"classes/CreateInterviewDto.html":{},"classes/CreateQuestionWithGroupDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateTaskDto.html":{},"controllers/FinalTestController.html":{},"interfaces/IData.html":{},"controllers/InterviewController.html":{},"classes/LoginDto.html":{},"classes/ParticipantDto.html":{},"controllers/QuestionController.html":{},"classes/QuestionDto.html":{},"classes/RegisterDto.html":{},"controllers/SessionController.html":{},"classes/SessionGateway.html":{},"classes/StartSessionDto.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":651,"title":{},"body":{"interfaces/IData.html":{},"classes/SessionGateway.html":{},"classes/TaskGateway.html":{},"dependencies.html":{}}}],["new",{"_index":65,"title":{},"body":{"classes/ApiError.html":{},"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"guards/JwtAuthGuard.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"injectables/RedisService.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"classes/SessionGateway.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{},"coverage.html":{}}}],["newpassword",{"_index":1193,"title":{},"body":{"injectables/SessionService.html":{}}}],["nodemailer",{"_index":530,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["nodemailer.createtransport",{"_index":542,"title":{},"body":{"injectables/EmailService.html":{}}}],["nodemailer.transporter",{"_index":536,"title":{},"body":{"injectables/EmailService.html":{}}}],["nodemailer/lib/smtp",{"_index":538,"title":{},"body":{"injectables/EmailService.html":{}}}],["notfound",{"_index":36,"title":{},"body":{"classes/ApiError.html":{}}}],["notfound(message",{"_index":49,"title":{},"body":{"classes/ApiError.html":{}}}],["notfoundexception",{"_index":894,"title":{},"body":{"injectables/QuestionService.html":{},"injectables/SessionService.html":{},"injectables/TaskService.html":{}}}],["notfoundexception(`question",{"_index":897,"title":{},"body":{"injectables/QuestionService.html":{}}}],["notfoundexception(`session",{"_index":1171,"title":{},"body":{"injectables/SessionService.html":{}}}],["notfoundexception(`task",{"_index":1275,"title":{},"body":{"injectables/TaskService.html":{}}}],["null",{"_index":927,"title":{},"body":{"injectables/RefreshService.html":{}}}],["number",{"_index":39,"title":{},"body":{"classes/ApiError.html":{},"controllers/CandidateInterviewController.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"classes/CreateInterviewDto.html":{},"classes/CreateSessionDto.html":{},"classes/FilterSessionsDto.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"interfaces/IData.html":{},"interfaces/IResponseBuild.html":{},"controllers/InterviewController.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"classes/ParticipantDto.html":{},"injectables/ResponseBuildService.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{},"classes/TaskGateway.html":{}}}],["number(process.env.redis_port",{"_index":917,"title":{},"body":{"injectables/RedisService.html":{}}}],["number})@isnotempty()@isnumber",{"_index":479,"title":{},"body":{"classes/CreateSessionDto.html":{}}}],["object",{"_index":517,"title":{},"body":{"classes/CreateTaskDto.html":{},"miscellaneous/variables.html":{}}}],["object})@isnotempty",{"_index":505,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["observable",{"_index":759,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["ongatewayconnection",{"_index":1033,"title":{},"body":{"classes/SessionGateway.html":{}}}],["ongatewaydisconnect",{"_index":1034,"title":{},"body":{"classes/SessionGateway.html":{}}}],["onmoduledestroy",{"_index":820,"title":{},"body":{"injectables/PostgresService.html":{}}}],["onmoduleinit",{"_index":821,"title":{},"body":{"injectables/PostgresService.html":{}}}],["overview",{"_index":1395,"title":{"overview.html":{}},"body":{}}],["p",{"_index":1358,"title":{},"body":{"index.html":{}}}],["package",{"_index":1322,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":306,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"classes/FilterSessionsDto.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"controllers/InterviewController.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"injectables/SessionService.html":{}}}],["pagesize",{"_index":557,"title":{},"body":{"classes/FilterSessionsDto.html":{},"injectables/SessionService.html":{}}}],["param",{"_index":59,"title":{},"body":{"classes/ApiError.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"injectables/EmailService.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IResponseBuild.html":{},"interfaces/IUser.html":{},"controllers/InterviewController.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/PostgresService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"injectables/RefreshService.html":{},"injectables/ResponseBuildService.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{}}}],["param('id",{"_index":848,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/SessionController.html":{}}}],["params",{"_index":684,"title":{},"body":{"interfaces/IResponseBuild.html":{},"injectables/ResponseBuildService.html":{}}}],["params.data",{"_index":688,"title":{},"body":{"interfaces/IResponseBuild.html":{},"injectables/ResponseBuildService.html":{}}}],["params.message",{"_index":687,"title":{},"body":{"interfaces/IResponseBuild.html":{},"injectables/ResponseBuildService.html":{}}}],["params.statuscode",{"_index":686,"title":{},"body":{"interfaces/IResponseBuild.html":{},"injectables/ResponseBuildService.html":{}}}],["parser",{"_index":1333,"title":{},"body":{"dependencies.html":{}}}],["participant",{"_index":1183,"title":{},"body":{"injectables/SessionService.html":{}}}],["participant.email",{"_index":1127,"title":{},"body":{"injectables/SessionRepository.html":{},"injectables/SessionService.html":{}}}],["participantdto",{"_index":481,"title":{"classes/ParticipantDto.html":{}},"body":{"classes/CreateSessionDto.html":{},"classes/ParticipantDto.html":{},"injectables/SessionService.html":{},"coverage.html":{}}}],["participantids",{"_index":436,"title":{},"body":{"classes/CreateInterviewDto.html":{}}}],["participants",{"_index":475,"title":{},"body":{"classes/CreateSessionDto.html":{},"injectables/InterviewRepository.html":{},"classes/ParticipantDto.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{}}}],["pass",{"_index":547,"title":{},"body":{"injectables/EmailService.html":{}}}],["passthrough",{"_index":275,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["password",{"_index":155,"title":{},"body":{"injectables/AuthRepository.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["passwordmatched",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["patch",{"_index":313,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{}}}],["patch(':id",{"_index":311,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{}}}],["patch(':id/tasks",{"_index":1026,"title":{},"body":{"controllers/SessionController.html":{}}}],["payload",{"_index":789,"title":{},"body":{"injectables/JwtService.html":{}}}],["platform.com/sessions/${session.id",{"_index":1182,"title":{},"body":{"injectables/SessionService.html":{}}}],["port",{"_index":916,"title":{},"body":{"injectables/RedisService.html":{},"index.html":{}}}],["position",{"_index":371,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{},"classes/CreateCandidateInterviewDto.html":{}}}],["post",{"_index":268,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["post('login",{"_index":259,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('register",{"_index":262,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["postgres",{"_index":134,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/CandidateInterviewRepository.html":{},"classes/FinalTestRepository.html":{},"injectables/InterviewRepository.html":{},"injectables/QuestionRepository.html":{},"injectables/SessionRepository.html":{},"injectables/TaskRepository.html":{}}}],["postgres.render.com:${port}/${postgres_db}?schema=public",{"_index":1385,"title":{},"body":{"index.html":{}}}],["postgres.service",{"_index":816,"title":{},"body":{"modules/PostgresModule.html":{}}}],["postgres_db",{"_index":1378,"title":{},"body":{"index.html":{}}}],["postgres_password",{"_index":1377,"title":{},"body":{"index.html":{}}}],["postgres_user",{"_index":1375,"title":{},"body":{"index.html":{}}}],["postgresmodule",{"_index":84,"title":{"modules/PostgresModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostgresModule.html":{},"modules.html":{},"overview.html":{}}}],["postgresql",{"_index":815,"title":{},"body":{"modules/PostgresModule.html":{},"injectables/PostgresService.html":{}}}],["postgresql://${postgres_user}:${postgres_password}@dpg",{"_index":1382,"title":{},"body":{"index.html":{}}}],["postgresservice",{"_index":132,"title":{"injectables/PostgresService.html":{}},"body":{"injectables/AuthRepository.html":{},"injectables/CandidateInterviewRepository.html":{},"classes/FinalTestRepository.html":{},"injectables/InterviewRepository.html":{},"modules/PostgresModule.html":{},"injectables/PostgresService.html":{},"injectables/QuestionRepository.html":{},"injectables/SessionRepository.html":{},"injectables/TaskRepository.html":{},"coverage.html":{},"overview.html":{}}}],["prettier",{"_index":1372,"title":{},"body":{"index.html":{}}}],["preview",{"_index":1370,"title":{},"body":{"index.html":{}}}],["prisma",{"_index":361,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{},"injectables/PostgresService.html":{}}}],["prisma.candidateinterviewwhereinput",{"_index":366,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{}}}],["prisma/client",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CandidateInterviewRepository.html":{},"classes/CreateCandidateInterviewDto.html":{},"classes/CreateInterviewDto.html":{},"classes/CreateQuestionWithGroupDto.html":{},"classes/CreateTaskDto.html":{},"classes/FilterSessionsDto.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"injectables/PostgresService.html":{},"classes/QuestionDto.html":{},"classes/RegisterDto.html":{},"dependencies.html":{}}}],["prismaclient",{"_index":818,"title":{},"body":{"injectables/PostgresService.html":{}}}],["private",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"injectables/CandidateInterviewService.html":{},"injectables/EmailService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"injectables/RedisService.html":{},"injectables/RefreshService.html":{},"classes/SessionGateway.html":{},"injectables/SessionService.html":{}}}],["process",{"_index":540,"title":{},"body":{"injectables/EmailService.html":{},"injectables/PostgresService.html":{},"injectables/RedisService.html":{}}}],["process.env.jwt_secret",{"_index":771,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["process.env.redis_host",{"_index":915,"title":{},"body":{"injectables/RedisService.html":{}}}],["process.env.smtp_password",{"_index":548,"title":{},"body":{"injectables/EmailService.html":{}}}],["process.env.smtp_user",{"_index":546,"title":{},"body":{"injectables/EmailService.html":{}}}],["process.on('beforeexit",{"_index":831,"title":{},"body":{"injectables/PostgresService.html":{}}}],["production",{"_index":1367,"title":{},"body":{"index.html":{}}}],["promise",{"_index":158,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"injectables/EmailService.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"guards/JwtAuthGuard.html":{},"injectables/RefreshService.html":{},"injectables/SessionService.html":{}}}],["promise.all",{"_index":620,"title":{},"body":{"classes/FinalTestRepository.html":{},"injectables/InterviewRepository.html":{}}}],["properties",{"_index":1401,"title":{"properties.html":{}},"body":{}}],["providers",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CandidateInterviewModule.html":{},"modules/EmailModule.html":{},"modules/FinalTestModule.html":{},"modules/InterviewModule.html":{},"modules/JwtModule.html":{},"modules/PostgresModule.html":{},"modules/QuestionModule.html":{},"modules/RedisModule.html":{},"modules/ResponseBuilderModule.html":{},"modules/SessionModule.html":{},"modules/TaskModule.html":{},"overview.html":{}}}],["public",{"_index":682,"title":{},"body":{"interfaces/IResponseBuild.html":{},"injectables/ResponseBuildService.html":{}}}],["qrufw323rgrth43fewpo",{"_index":1392,"title":{},"body":{"index.html":{}}}],["query",{"_index":314,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{}}}],["query('counts",{"_index":583,"title":{},"body":{"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{}}}],["query('limit",{"_index":340,"title":{},"body":{"controllers/CandidateInterviewController.html":{}}}],["query('page",{"_index":339,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{}}}],["query('search",{"_index":341,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{}}}],["query('userid",{"_index":852,"title":{},"body":{"controllers/QuestionController.html":{},"controllers/TaskController.html":{}}}],["question",{"_index":606,"title":{},"body":{"classes/FinalTestRepository.html":{}}}],["question.comment",{"_index":879,"title":{},"body":{"injectables/QuestionRepository.html":{}}}],["question.controller",{"_index":862,"title":{},"body":{"modules/QuestionModule.html":{}}}],["question.correctanswer",{"_index":878,"title":{},"body":{"injectables/QuestionRepository.html":{}}}],["question.developerlevel",{"_index":876,"title":{},"body":{"injectables/QuestionRepository.html":{}}}],["question.dto",{"_index":845,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{}}}],["question.dto.ts",{"_index":454,"title":{},"body":{"classes/CreateQuestionWithGroupDto.html":{},"classes/QuestionDto.html":{},"coverage.html":{}}}],["question.dto.ts:15",{"_index":856,"title":{},"body":{"classes/QuestionDto.html":{}}}],["question.dto.ts:23",{"_index":857,"title":{},"body":{"classes/QuestionDto.html":{}}}],["question.dto.ts:31",{"_index":855,"title":{},"body":{"classes/QuestionDto.html":{}}}],["question.dto.ts:38",{"_index":854,"title":{},"body":{"classes/QuestionDto.html":{}}}],["question.dto.ts:51",{"_index":466,"title":{},"body":{"classes/CreateQuestionWithGroupDto.html":{}}}],["question.dto.ts:59",{"_index":458,"title":{},"body":{"classes/CreateQuestionWithGroupDto.html":{}}}],["question.dto.ts:67",{"_index":467,"title":{},"body":{"classes/CreateQuestionWithGroupDto.html":{}}}],["question.dto.ts:75",{"_index":460,"title":{},"body":{"classes/CreateQuestionWithGroupDto.html":{}}}],["question.dto.ts:83",{"_index":465,"title":{},"body":{"classes/CreateQuestionWithGroupDto.html":{}}}],["question.questiontext",{"_index":877,"title":{},"body":{"injectables/QuestionRepository.html":{}}}],["question.repository",{"_index":863,"title":{},"body":{"modules/QuestionModule.html":{},"injectables/QuestionService.html":{}}}],["question.service",{"_index":844,"title":{},"body":{"controllers/QuestionController.html":{},"modules/QuestionModule.html":{}}}],["questioncontroller",{"_index":833,"title":{"controllers/QuestionController.html":{}},"body":{"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"coverage.html":{}}}],["questiondto",{"_index":461,"title":{"classes/QuestionDto.html":{}},"body":{"classes/CreateQuestionWithGroupDto.html":{},"classes/QuestionDto.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["questiongroup",{"_index":601,"title":{},"body":{"classes/FinalTestRepository.html":{},"injectables/QuestionService.html":{}}}],["questiongroup.questions.filter",{"_index":605,"title":{},"body":{"classes/FinalTestRepository.html":{}}}],["questiongroupid",{"_index":420,"title":{},"body":{"classes/CreateFinalTestDto.html":{},"classes/FinalTestRepository.html":{}}}],["questiongroups",{"_index":599,"title":{},"body":{"classes/FinalTestRepository.html":{}}}],["questiongroups.map((group",{"_index":613,"title":{},"body":{"classes/FinalTestRepository.html":{}}}],["questiongroups.push",{"_index":608,"title":{},"body":{"classes/FinalTestRepository.html":{}}}],["questionmodule",{"_index":85,"title":{"modules/QuestionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/QuestionModule.html":{},"modules.html":{},"overview.html":{}}}],["questionrepository",{"_index":860,"title":{"injectables/QuestionRepository.html":{}},"body":{"modules/QuestionModule.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"coverage.html":{},"overview.html":{}}}],["questions",{"_index":457,"title":{},"body":{"classes/CreateQuestionWithGroupDto.html":{},"classes/FinalTestRepository.html":{},"controllers/QuestionController.html":{},"classes/QuestionDto.html":{},"injectables/QuestionRepository.html":{}}}],["questionservice",{"_index":843,"title":{"injectables/QuestionService.html":{}},"body":{"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"coverage.html":{},"overview.html":{}}}],["questiontext",{"_index":470,"title":{},"body":{"classes/CreateQuestionWithGroupDto.html":{},"classes/QuestionDto.html":{},"injectables/QuestionRepository.html":{}}}],["readonly",{"_index":332,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"interfaces/IData.html":{},"controllers/InterviewController.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"injectables/RedisService.html":{},"injectables/RefreshService.html":{},"controllers/SessionController.html":{},"classes/SessionGateway.html":{},"injectables/SessionRepository.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{}}}],["record",{"_index":503,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["recruiter",{"_index":946,"title":{},"body":{"classes/RegisterDto.html":{}}}],["recruiter'})@isstring()@isnotempty",{"_index":941,"title":{},"body":{"classes/RegisterDto.html":{}}}],["recruiter_id",{"_index":476,"title":{},"body":{"classes/CreateSessionDto.html":{},"classes/ParticipantDto.html":{}}}],["redis",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshService.html":{},"index.html":{}}}],["redis.service",{"_index":907,"title":{},"body":{"modules/RedisModule.html":{}}}],["redis_host",{"_index":1388,"title":{},"body":{"index.html":{}}}],["redis_port",{"_index":1389,"title":{},"body":{"index.html":{}}}],["redisclient",{"_index":919,"title":{},"body":{"injectables/RefreshService.html":{}}}],["redismodule",{"_index":86,"title":{"modules/RedisModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RedisModule.html":{},"modules.html":{},"overview.html":{}}}],["redisservice",{"_index":905,"title":{"injectables/RedisService.html":{}},"body":{"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshService.html":{},"coverage.html":{},"overview.html":{}}}],["reflect",{"_index":1340,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":956,"title":{},"body":{"guards/RolesGuard.html":{}}}],["refresh",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{}}}],["refresh(@req",{"_index":283,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh(refreshtoken",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["refresh(req",{"_index":255,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.service",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["refreshservice",{"_index":115,"title":{"injectables/RefreshService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"injectables/RefreshService.html":{},"coverage.html":{},"overview.html":{}}}],["refreshtoken",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"injectables/RefreshService.html":{}}}],["register",{"_index":130,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/AuthService.html":{}}}],["register(dto",{"_index":146,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["registerdto",{"_index":147,"title":{"classes/RegisterDto.html":{}},"body":{"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["removetoken",{"_index":921,"title":{},"body":{"injectables/RefreshService.html":{}}}],["removetoken(userid",{"_index":928,"title":{},"body":{"injectables/RefreshService.html":{}}}],["reportlink",{"_index":437,"title":{},"body":{"classes/CreateInterviewDto.html":{},"injectables/InterviewRepository.html":{}}}],["req",{"_index":253,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["req.cookies.refreshtoken",{"_index":284,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request",{"_index":48,"title":{},"body":{"classes/ApiError.html":{},"controllers/AuthenticationController.html":{},"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization",{"_index":766,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["request.user",{"_index":769,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"miscellaneous/variables.html":{}}}],["request.user[data",{"_index":1007,"title":{},"body":{"controllers/SessionController.html":{},"miscellaneous/variables.html":{}}}],["requiredrole",{"_index":961,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredrole.some((role",{"_index":964,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["res.clearcookie('refreshtoken",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["res.cookie('refreshtoken",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["resbuild.service",{"_index":953,"title":{},"body":{"modules/ResponseBuilderModule.html":{}}}],["response",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"injectables/TaskService.html":{}}}],["response.json",{"_index":1273,"title":{},"body":{"injectables/TaskService.html":{}}}],["response.ok",{"_index":1271,"title":{},"body":{"injectables/TaskService.html":{}}}],["response.statustext",{"_index":1272,"title":{},"body":{"injectables/TaskService.html":{}}}],["responsebuilder",{"_index":272,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["responsebuildermodule",{"_index":87,"title":{"modules/ResponseBuilderModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ResponseBuilderModule.html":{},"modules.html":{},"overview.html":{}}}],["responsebuildservice",{"_index":269,"title":{"injectables/ResponseBuildService.html":{}},"body":{"controllers/AuthenticationController.html":{},"interfaces/IResponseBuild.html":{},"injectables/ResponseBuildService.html":{},"modules/ResponseBuilderModule.html":{},"coverage.html":{},"overview.html":{}}}],["result",{"_index":666,"title":{},"body":{"interfaces/IData.html":{},"controllers/SessionController.html":{},"classes/TaskGateway.html":{}}}],["retrieved",{"_index":1014,"title":{},"body":{"controllers/SessionController.html":{}}}],["return",{"_index":64,"title":{},"body":{"classes/ApiError.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IResponseBuild.html":{},"interfaces/IUser.html":{},"controllers/InterviewController.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"injectables/RedisService.html":{},"injectables/RefreshService.html":{},"injectables/ResponseBuildService.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{},"controllers/TaskController.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":63,"title":{},"body":{"classes/ApiError.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"injectables/EmailService.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IResponseBuild.html":{},"interfaces/IUser.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/RedisService.html":{},"injectables/RefreshService.html":{},"injectables/ResponseBuildService.html":{},"guards/RolesGuard.html":{}}}],["role",{"_index":156,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"classes/RegisterDto.html":{},"guards/RolesGuard.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["role_key",{"_index":960,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles",{"_index":325,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(['hr",{"_index":329,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{}}}],["roles(['interviewer",{"_index":1025,"title":{},"body":{"controllers/SessionController.html":{}}}],["rolesguard",{"_index":323,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{},"coverage.html":{}}}],["root",{"_index":1376,"title":{},"body":{"index.html":{}}}],["root1234",{"_index":806,"title":{},"body":{"classes/LoginDto.html":{}}}],["root1234'})@isstring()@isnotempty",{"_index":803,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["run",{"_index":1356,"title":{},"body":{"index.html":{}}}],["runtestcode",{"_index":1251,"title":{},"body":{"injectables/TaskService.html":{}}}],["runtestcode(language",{"_index":1258,"title":{},"body":{"injectables/TaskService.html":{}}}],["rxjs",{"_index":761,"title":{},"body":{"guards/JwtAuthGuard.html":{},"dependencies.html":{}}}],["samesite",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["savetoken",{"_index":922,"title":{},"body":{"injectables/RefreshService.html":{}}}],["savetoken(userid",{"_index":930,"title":{},"body":{"injectables/RefreshService.html":{}}}],["search",{"_index":304,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"injectables/CandidateInterviewService.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"controllers/InterviewController.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{}}}],["searchterm",{"_index":355,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{}}}],["secret",{"_index":795,"title":{},"body":{"injectables/JwtService.html":{}}}],["secure",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["select",{"_index":160,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["select_fields",{"_index":153,"title":{},"body":{"injectables/AuthRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sendsessioninvitation",{"_index":528,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendsessioninvitation(to",{"_index":531,"title":{},"body":{"injectables/EmailService.html":{}}}],["sentmessageinfo",{"_index":537,"title":{},"body":{"injectables/EmailService.html":{}}}],["server",{"_index":652,"title":{},"body":{"interfaces/IData.html":{},"classes/SessionGateway.html":{},"classes/TaskGateway.html":{}}}],["service",{"_index":543,"title":{},"body":{"injectables/EmailService.html":{}}}],["service/auth.service",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{},"controllers/AuthenticationController.html":{}}}],["service/refresh.service",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{}}}],["session",{"_index":14,"title":{},"body":{"classes/AddTasksDto.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{}}}],["session.controller",{"_index":1091,"title":{},"body":{"modules/SessionModule.html":{}}}],["session.dto",{"_index":998,"title":{},"body":{"controllers/SessionController.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{}}}],["session.dto.ts",{"_index":474,"title":{},"body":{"classes/CreateSessionDto.html":{},"classes/ParticipantDto.html":{},"classes/StartSessionDto.html":{},"coverage.html":{}}}],["session.dto.ts:20",{"_index":483,"title":{},"body":{"classes/CreateSessionDto.html":{}}}],["session.dto.ts:28",{"_index":490,"title":{},"body":{"classes/CreateSessionDto.html":{}}}],["session.dto.ts:36",{"_index":487,"title":{},"body":{"classes/CreateSessionDto.html":{}}}],["session.dto.ts:44",{"_index":480,"title":{},"body":{"classes/CreateSessionDto.html":{}}}],["session.dto.ts:51",{"_index":482,"title":{},"body":{"classes/CreateSessionDto.html":{}}}],["session.dto.ts:58",{"_index":489,"title":{},"body":{"classes/CreateSessionDto.html":{}}}],["session.dto.ts:68",{"_index":807,"title":{},"body":{"classes/ParticipantDto.html":{}}}],["session.dto.ts:7",{"_index":1203,"title":{},"body":{"classes/StartSessionDto.html":{}}}],["session.dto.ts:76",{"_index":808,"title":{},"body":{"classes/ParticipantDto.html":{}}}],["session.dto.ts:84",{"_index":810,"title":{},"body":{"classes/ParticipantDto.html":{}}}],["session.gateway",{"_index":1095,"title":{},"body":{"modules/SessionModule.html":{}}}],["session.repository",{"_index":1092,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["session.service",{"_index":997,"title":{},"body":{"controllers/SessionController.html":{},"classes/SessionGateway.html":{},"modules/SessionModule.html":{}}}],["session.title",{"_index":1189,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessioncontroller",{"_index":965,"title":{"controllers/SessionController.html":{}},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"coverage.html":{}}}],["sessiongateway",{"_index":1031,"title":{"classes/SessionGateway.html":{}},"body":{"classes/SessionGateway.html":{},"modules/SessionModule.html":{},"coverage.html":{}}}],["sessionid",{"_index":646,"title":{},"body":{"interfaces/IData.html":{},"classes/SessionGateway.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{},"classes/StartSessionDto.html":{},"classes/TaskGateway.html":{}}}],["sessionmodule",{"_index":88,"title":{"modules/SessionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SessionModule.html":{},"modules.html":{},"overview.html":{}}}],["sessionrepository",{"_index":1089,"title":{"injectables/SessionRepository.html":{}},"body":{"modules/SessionModule.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{},"coverage.html":{},"overview.html":{}}}],["sessions",{"_index":1013,"title":{},"body":{"controllers/SessionController.html":{},"injectables/SessionService.html":{}}}],["sessions.dto",{"_index":1000,"title":{},"body":{"controllers/SessionController.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{}}}],["sessions.dto.ts",{"_index":555,"title":{},"body":{"classes/FilterSessionsDto.html":{},"coverage.html":{}}}],["sessions.dto.ts:10",{"_index":562,"title":{},"body":{"classes/FilterSessionsDto.html":{}}}],["sessions.dto.ts:13",{"_index":559,"title":{},"body":{"classes/FilterSessionsDto.html":{}}}],["sessions.dto.ts:17",{"_index":565,"title":{},"body":{"classes/FilterSessionsDto.html":{}}}],["sessions.dto.ts:20",{"_index":560,"title":{},"body":{"classes/FilterSessionsDto.html":{}}}],["sessions.dto.ts:23",{"_index":561,"title":{},"body":{"classes/FilterSessionsDto.html":{}}}],["sessions.dto.ts:7",{"_index":566,"title":{},"body":{"classes/FilterSessionsDto.html":{}}}],["sessionservice",{"_index":996,"title":{"injectables/SessionService.html":{}},"body":{"controllers/SessionController.html":{},"classes/SessionGateway.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"coverage.html":{},"overview.html":{}}}],["sessiontitle",{"_index":532,"title":{},"body":{"injectables/EmailService.html":{}}}],["setmetadata(role_key",{"_index":1409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signin",{"_index":247,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["signin(@body",{"_index":274,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["signin(dto",{"_index":258,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["signjwt",{"_index":779,"title":{},"body":{"injectables/JwtService.html":{}}}],["signjwt(payload",{"_index":785,"title":{},"body":{"injectables/JwtService.html":{}}}],["signup",{"_index":248,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["signup(@body",{"_index":281,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["signup(dto",{"_index":261,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["skip",{"_index":365,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{},"classes/FinalTestRepository.html":{},"injectables/InterviewRepository.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{}}}],["socket",{"_index":1046,"title":{},"body":{"classes/SessionGateway.html":{}}}],["socket.id",{"_index":1065,"title":{},"body":{"classes/SessionGateway.html":{}}}],["socket.io",{"_index":653,"title":{},"body":{"interfaces/IData.html":{},"classes/SessionGateway.html":{},"classes/TaskGateway.html":{},"dependencies.html":{}}}],["socket.join(sessionid",{"_index":1073,"title":{},"body":{"classes/SessionGateway.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddTasksDto.html":{},"classes/ApiError.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"modules/CandidateInterviewModule.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"classes/CreateCandidateInterviewDto.html":{},"classes/CreateFinalTestDto.html":{},"classes/CreateInterviewDto.html":{},"classes/CreateQuestionWithGroupDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateTaskDto.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/FilterSessionsDto.html":{},"controllers/FinalTestController.html":{},"modules/FinalTestModule.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"interfaces/IData.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IResponseBuild.html":{},"interfaces/IUser.html":{},"controllers/InterviewController.html":{},"modules/InterviewModule.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"guards/JwtAuthGuard.html":{},"modules/JwtModule.html":{},"injectables/JwtService.html":{},"classes/LoginDto.html":{},"classes/ParticipantDto.html":{},"modules/PostgresModule.html":{},"injectables/PostgresService.html":{},"controllers/QuestionController.html":{},"classes/QuestionDto.html":{},"modules/QuestionModule.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"injectables/RefreshService.html":{},"classes/RegisterDto.html":{},"injectables/ResponseBuildService.html":{},"modules/ResponseBuilderModule.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"classes/SessionGateway.html":{},"modules/SessionModule.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{},"classes/StartSessionDto.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"modules/TaskModule.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{}}}],["sourcecode",{"_index":501,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["src/.../auth.repository.ts",{"_index":1407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1350,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../role",{"_index":1406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session.controller.ts",{"_index":1408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["src/crud/auth/auth.controller.ts",{"_index":245,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/crud/auth/auth.controller.ts:41",{"_index":260,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/crud/auth/auth.controller.ts:59",{"_index":263,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/crud/auth/auth.controller.ts:77",{"_index":257,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/crud/auth/auth.controller.ts:96",{"_index":252,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/crud/auth/auth.module.ts",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/crud/auth/auth.repository.ts",{"_index":126,"title":{},"body":{"injectables/AuthRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crud/auth/auth.repository.ts:20",{"_index":133,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["src/crud/auth/auth.repository.ts:29",{"_index":144,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["src/crud/auth/auth.repository.ts:44",{"_index":148,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["src/crud/auth/auth.repository.ts:57",{"_index":136,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["src/crud/auth/auth.repository.ts:72",{"_index":139,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["src/crud/auth/dto/login.dto.ts",{"_index":799,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/crud/auth/dto/login.dto.ts:13",{"_index":802,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/crud/auth/dto/login.dto.ts:18",{"_index":804,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/crud/auth/dto/register.dto.ts",{"_index":938,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/crud/auth/dto/register.dto.ts:15",{"_index":940,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/crud/auth/dto/register.dto.ts:20",{"_index":942,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/crud/auth/service/auth.service.ts",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"coverage.html":{}}}],["src/crud/auth/service/auth.service.ts:105",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/crud/auth/service/auth.service.ts:136",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/crud/auth/service/auth.service.ts:172",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/crud/auth/service/auth.service.ts:35",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/crud/auth/service/auth.service.ts:49",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/crud/auth/service/auth.service.ts:72",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/crud/auth/service/refresh.service.ts",{"_index":918,"title":{},"body":{"injectables/RefreshService.html":{},"coverage.html":{}}}],["src/crud/auth/service/refresh.service.ts:12",{"_index":924,"title":{},"body":{"injectables/RefreshService.html":{}}}],["src/crud/auth/service/refresh.service.ts:24",{"_index":931,"title":{},"body":{"injectables/RefreshService.html":{}}}],["src/crud/auth/service/refresh.service.ts:34",{"_index":926,"title":{},"body":{"injectables/RefreshService.html":{}}}],["src/crud/auth/service/refresh.service.ts:43",{"_index":929,"title":{},"body":{"injectables/RefreshService.html":{}}}],["src/crud/finaltest/dto/create",{"_index":416,"title":{},"body":{"classes/CreateFinalTestDto.html":{},"coverage.html":{}}}],["src/crud/finaltest/finaltest.controller.ts",{"_index":569,"title":{},"body":{"controllers/FinalTestController.html":{},"coverage.html":{}}}],["src/crud/finaltest/finaltest.controller.ts:117",{"_index":574,"title":{},"body":{"controllers/FinalTestController.html":{}}}],["src/crud/finaltest/finaltest.controller.ts:42",{"_index":571,"title":{},"body":{"controllers/FinalTestController.html":{}}}],["src/crud/finaltest/finaltest.controller.ts:60",{"_index":575,"title":{},"body":{"controllers/FinalTestController.html":{}}}],["src/crud/finaltest/finaltest.controller.ts:77",{"_index":572,"title":{},"body":{"controllers/FinalTestController.html":{}}}],["src/crud/finaltest/finaltest.controller.ts:96",{"_index":573,"title":{},"body":{"controllers/FinalTestController.html":{}}}],["src/crud/finaltest/finaltest.module.ts",{"_index":588,"title":{},"body":{"modules/FinalTestModule.html":{}}}],["src/crud/finaltest/finaltest.repository.ts",{"_index":592,"title":{},"body":{"classes/FinalTestRepository.html":{},"coverage.html":{}}}],["src/crud/finaltest/finaltest.repository.ts:121",{"_index":597,"title":{},"body":{"classes/FinalTestRepository.html":{}}}],["src/crud/finaltest/finaltest.repository.ts:136",{"_index":595,"title":{},"body":{"classes/FinalTestRepository.html":{}}}],["src/crud/finaltest/finaltest.repository.ts:18",{"_index":594,"title":{},"body":{"classes/FinalTestRepository.html":{}}}],["src/crud/finaltest/finaltest.repository.ts:55",{"_index":598,"title":{},"body":{"classes/FinalTestRepository.html":{}}}],["src/crud/finaltest/finaltest.repository.ts:76",{"_index":596,"title":{},"body":{"classes/FinalTestRepository.html":{}}}],["src/crud/finaltest/finaltest.repository.ts:9",{"_index":593,"title":{},"body":{"classes/FinalTestRepository.html":{}}}],["src/crud/finaltest/finaltest.service.ts",{"_index":628,"title":{},"body":{"injectables/FinalTestService.html":{},"coverage.html":{}}}],["src/crud/finaltest/finaltest.service.ts:11",{"_index":630,"title":{},"body":{"injectables/FinalTestService.html":{}}}],["src/crud/finaltest/finaltest.service.ts:20",{"_index":631,"title":{},"body":{"injectables/FinalTestService.html":{}}}],["src/crud/finaltest/finaltest.service.ts:31",{"_index":635,"title":{},"body":{"injectables/FinalTestService.html":{}}}],["src/crud/finaltest/finaltest.service.ts:41",{"_index":632,"title":{},"body":{"injectables/FinalTestService.html":{}}}],["src/crud/finaltest/finaltest.service.ts:53",{"_index":633,"title":{},"body":{"injectables/FinalTestService.html":{}}}],["src/crud/finaltest/finaltest.service.ts:63",{"_index":634,"title":{},"body":{"injectables/FinalTestService.html":{}}}],["src/crud/interview/dto/create",{"_index":429,"title":{},"body":{"classes/CreateInterviewDto.html":{},"coverage.html":{}}}],["src/crud/interview/interview.controller.ts",{"_index":690,"title":{},"body":{"controllers/InterviewController.html":{},"coverage.html":{}}}],["src/crud/interview/interview.controller.ts:100",{"_index":695,"title":{},"body":{"controllers/InterviewController.html":{}}}],["src/crud/interview/interview.controller.ts:37",{"_index":692,"title":{},"body":{"controllers/InterviewController.html":{}}}],["src/crud/interview/interview.controller.ts:52",{"_index":696,"title":{},"body":{"controllers/InterviewController.html":{}}}],["src/crud/interview/interview.controller.ts:66",{"_index":693,"title":{},"body":{"controllers/InterviewController.html":{}}}],["src/crud/interview/interview.controller.ts:82",{"_index":694,"title":{},"body":{"controllers/InterviewController.html":{}}}],["src/crud/interview/interview.module.ts",{"_index":709,"title":{},"body":{"modules/InterviewModule.html":{}}}],["src/crud/interview/interview.repository.ts",{"_index":712,"title":{},"body":{"injectables/InterviewRepository.html":{},"coverage.html":{}}}],["src/crud/interview/interview.repository.ts:116",{"_index":717,"title":{},"body":{"injectables/InterviewRepository.html":{}}}],["src/crud/interview/interview.repository.ts:131",{"_index":715,"title":{},"body":{"injectables/InterviewRepository.html":{}}}],["src/crud/interview/interview.repository.ts:16",{"_index":714,"title":{},"body":{"injectables/InterviewRepository.html":{}}}],["src/crud/interview/interview.repository.ts:45",{"_index":718,"title":{},"body":{"injectables/InterviewRepository.html":{}}}],["src/crud/interview/interview.repository.ts:76",{"_index":716,"title":{},"body":{"injectables/InterviewRepository.html":{}}}],["src/crud/interview/interview.repository.ts:9",{"_index":713,"title":{},"body":{"injectables/InterviewRepository.html":{}}}],["src/crud/interview/interview.service.ts",{"_index":737,"title":{},"body":{"injectables/InterviewService.html":{},"coverage.html":{}}}],["src/crud/interview/interview.service.ts:16",{"_index":740,"title":{},"body":{"injectables/InterviewService.html":{}}}],["src/crud/interview/interview.service.ts:25",{"_index":744,"title":{},"body":{"injectables/InterviewService.html":{}}}],["src/crud/interview/interview.service.ts:33",{"_index":741,"title":{},"body":{"injectables/InterviewService.html":{}}}],["src/crud/interview/interview.service.ts:43",{"_index":742,"title":{},"body":{"injectables/InterviewService.html":{}}}],["src/crud/interview/interview.service.ts:51",{"_index":743,"title":{},"body":{"injectables/InterviewService.html":{}}}],["src/crud/interview/interview.service.ts:9",{"_index":739,"title":{},"body":{"injectables/InterviewService.html":{}}}],["src/crud/mail/email.module.ts",{"_index":524,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/crud/mail/email.service.ts",{"_index":526,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/crud/mail/email.service.ts:11",{"_index":529,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/crud/mail/email.service.ts:35",{"_index":535,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/crud/question/dto/create",{"_index":453,"title":{},"body":{"classes/CreateQuestionWithGroupDto.html":{},"classes/QuestionDto.html":{},"coverage.html":{}}}],["src/crud/question/question.controller.ts",{"_index":834,"title":{},"body":{"controllers/QuestionController.html":{},"coverage.html":{}}}],["src/crud/question/question.controller.ts:37",{"_index":836,"title":{},"body":{"controllers/QuestionController.html":{}}}],["src/crud/question/question.controller.ts:52",{"_index":842,"title":{},"body":{"controllers/QuestionController.html":{}}}],["src/crud/question/question.controller.ts:69",{"_index":838,"title":{},"body":{"controllers/QuestionController.html":{}}}],["src/crud/question/question.controller.ts:84",{"_index":840,"title":{},"body":{"controllers/QuestionController.html":{}}}],["src/crud/question/question.module.ts",{"_index":861,"title":{},"body":{"modules/QuestionModule.html":{}}}],["src/crud/question/question.repository.ts",{"_index":864,"title":{},"body":{"injectables/QuestionRepository.html":{},"coverage.html":{}}}],["src/crud/question/question.repository.ts:16",{"_index":866,"title":{},"body":{"injectables/QuestionRepository.html":{}}}],["src/crud/question/question.repository.ts:40",{"_index":870,"title":{},"body":{"injectables/QuestionRepository.html":{}}}],["src/crud/question/question.repository.ts:64",{"_index":869,"title":{},"body":{"injectables/QuestionRepository.html":{}}}],["src/crud/question/question.repository.ts:72",{"_index":867,"title":{},"body":{"injectables/QuestionRepository.html":{}}}],["src/crud/question/question.repository.ts:81",{"_index":868,"title":{},"body":{"injectables/QuestionRepository.html":{}}}],["src/crud/question/question.repository.ts:9",{"_index":865,"title":{},"body":{"injectables/QuestionRepository.html":{}}}],["src/crud/question/question.service.ts",{"_index":885,"title":{},"body":{"injectables/QuestionService.html":{},"coverage.html":{}}}],["src/crud/question/question.service.ts:16",{"_index":889,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/crud/question/question.service.ts:25",{"_index":893,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/crud/question/question.service.ts:37",{"_index":890,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/crud/question/question.service.ts:50",{"_index":892,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/crud/question/question.service.ts:9",{"_index":888,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/crud/session/dto/add",{"_index":5,"title":{},"body":{"classes/AddTasksDto.html":{},"coverage.html":{}}}],["src/crud/session/dto/create",{"_index":473,"title":{},"body":{"classes/CreateSessionDto.html":{},"classes/ParticipantDto.html":{},"coverage.html":{}}}],["src/crud/session/dto/filter",{"_index":554,"title":{},"body":{"classes/FilterSessionsDto.html":{},"coverage.html":{}}}],["src/crud/session/dto/start",{"_index":1202,"title":{},"body":{"classes/StartSessionDto.html":{},"coverage.html":{}}}],["src/crud/session/session.controller.ts",{"_index":966,"title":{},"body":{"controllers/SessionController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crud/session/session.controller.ts:111",{"_index":986,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/crud/session/session.controller.ts:128",{"_index":976,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/crud/session/session.controller.ts:41",{"_index":989,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/crud/session/session.controller.ts:58",{"_index":979,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/crud/session/session.controller.ts:75",{"_index":994,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/crud/session/session.controller.ts:95",{"_index":982,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/crud/session/session.gateway.ts",{"_index":1032,"title":{},"body":{"classes/SessionGateway.html":{},"coverage.html":{}}}],["src/crud/session/session.gateway.ts:17",{"_index":1044,"title":{},"body":{"classes/SessionGateway.html":{}}}],["src/crud/session/session.gateway.ts:18",{"_index":1042,"title":{},"body":{"classes/SessionGateway.html":{}}}],["src/crud/session/session.gateway.ts:22",{"_index":1047,"title":{},"body":{"classes/SessionGateway.html":{}}}],["src/crud/session/session.gateway.ts:26",{"_index":1050,"title":{},"body":{"classes/SessionGateway.html":{}}}],["src/crud/session/session.gateway.ts:43",{"_index":1058,"title":{},"body":{"classes/SessionGateway.html":{}}}],["src/crud/session/session.gateway.ts:66",{"_index":1061,"title":{},"body":{"classes/SessionGateway.html":{}}}],["src/crud/session/session.gateway.ts:77",{"_index":1054,"title":{},"body":{"classes/SessionGateway.html":{}}}],["src/crud/session/session.module.ts",{"_index":1090,"title":{},"body":{"modules/SessionModule.html":{}}}],["src/crud/session/session.repository.ts",{"_index":1096,"title":{},"body":{"injectables/SessionRepository.html":{},"coverage.html":{}}}],["src/crud/session/session.repository.ts:10",{"_index":1109,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["src/crud/session/session.repository.ts:115",{"_index":1117,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["src/crud/session/session.repository.ts:124",{"_index":1107,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["src/crud/session/session.repository.ts:25",{"_index":1105,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["src/crud/session/session.repository.ts:38",{"_index":1112,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["src/crud/session/session.repository.ts:59",{"_index":1106,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["src/crud/session/session.repository.ts:7",{"_index":1101,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["src/crud/session/session.repository.ts:76",{"_index":1103,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["src/crud/session/session.repository.ts:87",{"_index":1110,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["src/crud/session/session.repository.ts:97",{"_index":1114,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["src/crud/session/session.service.ts",{"_index":1133,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["src/crud/session/session.service.ts:107",{"_index":1146,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/crud/session/session.service.ts:133",{"_index":1143,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/crud/session/session.service.ts:16",{"_index":1160,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/crud/session/session.service.ts:42",{"_index":1151,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/crud/session/session.service.ts:51",{"_index":1153,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/crud/session/session.service.ts:57",{"_index":1163,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/crud/session/session.service.ts:61",{"_index":1154,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/crud/session/session.service.ts:65",{"_index":1158,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/crud/session/session.service.ts:69",{"_index":1162,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/crud/session/session.service.ts:77",{"_index":1156,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/crud/session/session.service.ts:85",{"_index":1149,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/crud/session/session.service.ts:9",{"_index":1141,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/crud/task/dto/create",{"_index":497,"title":{},"body":{"classes/CreateTaskDto.html":{},"coverage.html":{}}}],["src/crud/task/task.controller.ts",{"_index":1205,"title":{},"body":{"controllers/TaskController.html":{},"coverage.html":{}}}],["src/crud/task/task.controller.ts:31",{"_index":1207,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/crud/task/task.controller.ts:46",{"_index":1209,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/crud/task/task.controller.ts:61",{"_index":1211,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/crud/task/task.controller.ts:76",{"_index":1213,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/crud/task/task.controller.ts:91",{"_index":1208,"title":{},"body":{"controllers/TaskController.html":{}}}],["src/crud/task/task.gateway.ts",{"_index":642,"title":{},"body":{"interfaces/IData.html":{},"classes/TaskGateway.html":{},"coverage.html":{}}}],["src/crud/task/task.gateway.ts:22",{"_index":1224,"title":{},"body":{"classes/TaskGateway.html":{}}}],["src/crud/task/task.gateway.ts:29",{"_index":1226,"title":{},"body":{"classes/TaskGateway.html":{}}}],["src/crud/task/task.gateway.ts:36",{"_index":1228,"title":{},"body":{"classes/TaskGateway.html":{}}}],["src/crud/task/task.gateway.ts:44",{"_index":1230,"title":{},"body":{"classes/TaskGateway.html":{}}}],["src/crud/task/task.module.ts",{"_index":1234,"title":{},"body":{"modules/TaskModule.html":{}}}],["src/crud/task/task.repository.ts",{"_index":1238,"title":{},"body":{"injectables/TaskRepository.html":{},"coverage.html":{}}}],["src/crud/task/task.repository.ts:15",{"_index":1244,"title":{},"body":{"injectables/TaskRepository.html":{}}}],["src/crud/task/task.repository.ts:22",{"_index":1243,"title":{},"body":{"injectables/TaskRepository.html":{}}}],["src/crud/task/task.repository.ts:26",{"_index":1241,"title":{},"body":{"injectables/TaskRepository.html":{}}}],["src/crud/task/task.repository.ts:30",{"_index":1242,"title":{},"body":{"injectables/TaskRepository.html":{}}}],["src/crud/task/task.repository.ts:6",{"_index":1239,"title":{},"body":{"injectables/TaskRepository.html":{}}}],["src/crud/task/task.repository.ts:9",{"_index":1240,"title":{},"body":{"injectables/TaskRepository.html":{}}}],["src/crud/task/task.service.ts",{"_index":1250,"title":{},"body":{"injectables/TaskService.html":{},"coverage.html":{}}}],["src/crud/task/task.service.ts:13",{"_index":1256,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/crud/task/task.service.ts:17",{"_index":1259,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/crud/task/task.service.ts:34",{"_index":1257,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/crud/task/task.service.ts:42",{"_index":1260,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/crud/task/task.service.ts:50",{"_index":1255,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/crud/task/task.service.ts:6",{"_index":1253,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/crud/task/task.service.ts:9",{"_index":1254,"title":{},"body":{"injectables/TaskService.html":{}}}],["src/crud/сandidateinterview/dto/create",{"_index":392,"title":{},"body":{"classes/CreateCandidateInterviewDto.html":{},"coverage.html":{}}}],["src/crud/сandidateinterview/сandidateinterview.controller.ts",{"_index":289,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"coverage.html":{}}}],["src/crud/сandidateinterview/сandidateinterview.controller.ts:30",{"_index":298,"title":{},"body":{"controllers/CandidateInterviewController.html":{}}}],["src/crud/сandidateinterview/сandidateinterview.controller.ts:40",{"_index":312,"title":{},"body":{"controllers/CandidateInterviewController.html":{}}}],["src/crud/сandidateinterview/сandidateinterview.controller.ts:50",{"_index":301,"title":{},"body":{"controllers/CandidateInterviewController.html":{}}}],["src/crud/сandidateinterview/сandidateinterview.controller.ts:60",{"_index":305,"title":{},"body":{"controllers/CandidateInterviewController.html":{}}}],["src/crud/сandidateinterview/сandidateinterview.controller.ts:74",{"_index":309,"title":{},"body":{"controllers/CandidateInterviewController.html":{}}}],["src/crud/сandidateinterview/сandidateinterview.module.ts",{"_index":348,"title":{},"body":{"modules/CandidateInterviewModule.html":{}}}],["src/crud/сandidateinterview/сandidateinterview.repository.ts",{"_index":351,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{},"coverage.html":{}}}],["src/crud/сandidateinterview/сandidateinterview.repository.ts:10",{"_index":353,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{}}}],["src/crud/сandidateinterview/сandidateinterview.repository.ts:18",{"_index":360,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{}}}],["src/crud/сandidateinterview/сandidateinterview.repository.ts:27",{"_index":354,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{}}}],["src/crud/сandidateinterview/сandidateinterview.repository.ts:33",{"_index":356,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{}}}],["src/crud/сandidateinterview/сandidateinterview.repository.ts:62",{"_index":359,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{}}}],["src/crud/сandidateinterview/сandidateinterview.repository.ts:7",{"_index":352,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{}}}],["src/crud/сandidateinterview/сandidateinterview.service.ts",{"_index":379,"title":{},"body":{"injectables/CandidateInterviewService.html":{},"coverage.html":{}}}],["src/crud/сandidateinterview/сandidateinterview.service.ts:11",{"_index":382,"title":{},"body":{"injectables/CandidateInterviewService.html":{}}}],["src/crud/сandidateinterview/сandidateinterview.service.ts:15",{"_index":386,"title":{},"body":{"injectables/CandidateInterviewService.html":{}}}],["src/crud/сandidateinterview/сandidateinterview.service.ts:19",{"_index":383,"title":{},"body":{"injectables/CandidateInterviewService.html":{}}}],["src/crud/сandidateinterview/сandidateinterview.service.ts:23",{"_index":384,"title":{},"body":{"injectables/CandidateInterviewService.html":{}}}],["src/crud/сandidateinterview/сandidateinterview.service.ts:27",{"_index":385,"title":{},"body":{"injectables/CandidateInterviewService.html":{}}}],["src/crud/сandidateinterview/сandidateinterview.service.ts:6",{"_index":381,"title":{},"body":{"injectables/CandidateInterviewService.html":{}}}],["src/db/postgres/postgres.module.ts",{"_index":814,"title":{},"body":{"modules/PostgresModule.html":{}}}],["src/db/postgres/postgres.service.ts",{"_index":817,"title":{},"body":{"injectables/PostgresService.html":{},"coverage.html":{}}}],["src/db/postgres/postgres.service.ts:25",{"_index":828,"title":{},"body":{"injectables/PostgresService.html":{}}}],["src/db/postgres/postgres.service.ts:33",{"_index":827,"title":{},"body":{"injectables/PostgresService.html":{}}}],["src/db/postgres/postgres.service.ts:42",{"_index":824,"title":{},"body":{"injectables/PostgresService.html":{}}}],["src/db/redis/redis.module",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/db/redis/redis.module.ts",{"_index":906,"title":{},"body":{"modules/RedisModule.html":{}}}],["src/db/redis/redis.service.ts",{"_index":908,"title":{},"body":{"injectables/RedisService.html":{},"coverage.html":{}}}],["src/db/redis/redis.service.ts:12",{"_index":910,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/db/redis/redis.service.ts:31",{"_index":911,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/main.ts",{"_index":1310,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/apierror/apierror.ts",{"_index":29,"title":{},"body":{"classes/ApiError.html":{},"coverage.html":{}}}],["src/utils/apierror/apierror.ts:10",{"_index":43,"title":{},"body":{"classes/ApiError.html":{}}}],["src/utils/apierror/apierror.ts:11",{"_index":41,"title":{},"body":{"classes/ApiError.html":{}}}],["src/utils/apierror/apierror.ts:31",{"_index":53,"title":{},"body":{"classes/ApiError.html":{}}}],["src/utils/apierror/apierror.ts:42",{"_index":45,"title":{},"body":{"classes/ApiError.html":{}}}],["src/utils/apierror/apierror.ts:53",{"_index":50,"title":{},"body":{"classes/ApiError.html":{}}}],["src/utils/jwt/jwt.module.ts",{"_index":775,"title":{},"body":{"modules/JwtModule.html":{}}}],["src/utils/jwt/jwt.service.ts",{"_index":778,"title":{},"body":{"injectables/JwtService.html":{},"coverage.html":{}}}],["src/utils/jwt/jwt.service.ts:12",{"_index":783,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/utils/jwt/jwt.service.ts:23",{"_index":788,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/utils/jwt/jwt.service.ts:35",{"_index":793,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/utils/jwtauthguard/jwtauthguard.ts",{"_index":751,"title":{},"body":{"guards/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/utils/jwtauthguard/jwtauthguard.ts:25",{"_index":757,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["src/utils/resbuild/resbuild.module.ts",{"_index":952,"title":{},"body":{"modules/ResponseBuilderModule.html":{}}}],["src/utils/resbuild/resbuild.service.ts",{"_index":676,"title":{},"body":{"interfaces/IResponseBuild.html":{},"injectables/ResponseBuildService.html":{},"coverage.html":{}}}],["src/utils/resbuild/resbuild.service.ts:53",{"_index":948,"title":{},"body":{"injectables/ResponseBuildService.html":{}}}],["src/utils/roleguard/role",{"_index":1317,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/roleguard/roles.guard.ts",{"_index":954,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/utils/roleguard/roles.guard.ts:14",{"_index":957,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/utils/roleguard/roles.guard.ts:25",{"_index":958,"title":{},"body":{"guards/RolesGuard.html":{}}}],["start:dev",{"_index":1364,"title":{},"body":{"index.html":{}}}],["start:prod",{"_index":1366,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":558,"title":{},"body":{"classes/FilterSessionsDto.html":{},"injectables/SessionRepository.html":{}}}],["started",{"_index":1352,"title":{"index.html":{}},"body":{}}],["startsession",{"_index":1139,"title":{},"body":{"injectables/SessionService.html":{}}}],["startsession(sessionid",{"_index":1161,"title":{},"body":{"injectables/SessionService.html":{}}}],["startsessiondto",{"_index":1201,"title":{"classes/StartSessionDto.html":{}},"body":{"classes/StartSessionDto.html":{},"coverage.html":{}}}],["starttime",{"_index":477,"title":{},"body":{"classes/CreateSessionDto.html":{},"classes/ParticipantDto.html":{},"injectables/SessionRepository.html":{}}}],["static",{"_index":34,"title":{},"body":{"classes/ApiError.html":{}}}],["status",{"_index":33,"title":{},"body":{"classes/ApiError.html":{},"classes/CreateInterviewDto.html":{},"classes/FilterSessionsDto.html":{},"interfaces/IData.html":{},"injectables/InterviewRepository.html":{},"classes/SessionGateway.html":{},"injectables/SessionRepository.html":{},"classes/TaskGateway.html":{}}}],["statuscode",{"_index":678,"title":{},"body":{"interfaces/IResponseBuild.html":{},"injectables/ResponseBuildService.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{}}}],["string",{"_index":8,"title":{},"body":{"classes/AddTasksDto.html":{},"classes/ApiError.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/CandidateInterviewController.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"classes/CreateCandidateInterviewDto.html":{},"classes/CreateFinalTestDto.html":{},"classes/CreateInterviewDto.html":{},"classes/CreateQuestionWithGroupDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateTaskDto.html":{},"injectables/EmailService.html":{},"classes/FilterSessionsDto.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"interfaces/IData.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IResponseBuild.html":{},"interfaces/IUser.html":{},"controllers/InterviewController.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"injectables/JwtService.html":{},"classes/LoginDto.html":{},"classes/ParticipantDto.html":{},"controllers/QuestionController.html":{},"classes/QuestionDto.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"injectables/RefreshService.html":{},"classes/RegisterDto.html":{},"injectables/ResponseBuildService.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"classes/SessionGateway.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{},"classes/StartSessionDto.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{},"miscellaneous/variables.html":{}}}],["stringvalue",{"_index":787,"title":{},"body":{"injectables/JwtService.html":{}}}],["string})@isnotempty()@isdatestring",{"_index":486,"title":{},"body":{"classes/CreateSessionDto.html":{}}}],["string})@isnotempty()@isemail",{"_index":406,"title":{},"body":{"classes/CreateCandidateInterviewDto.html":{},"classes/ParticipantDto.html":{}}}],["string})@isnotempty()@isstring",{"_index":404,"title":{},"body":{"classes/CreateCandidateInterviewDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateTaskDto.html":{},"classes/ParticipantDto.html":{}}}],["string})@isstring",{"_index":402,"title":{},"body":{"classes/CreateCandidateInterviewDto.html":{}}}],["subject",{"_index":550,"title":{},"body":{"injectables/EmailService.html":{}}}],["subscribemessage",{"_index":648,"title":{},"body":{"interfaces/IData.html":{},"classes/SessionGateway.html":{},"classes/TaskGateway.html":{}}}],["subscribemessage('coderuntest",{"_index":664,"title":{},"body":{"interfaces/IData.html":{},"classes/TaskGateway.html":{}}}],["subscribemessage('endsession",{"_index":1053,"title":{},"body":{"classes/SessionGateway.html":{}}}],["subscribemessage('joinsession",{"_index":1057,"title":{},"body":{"classes/SessionGateway.html":{}}}],["subscribemessage('sessionchangecode",{"_index":661,"title":{},"body":{"interfaces/IData.html":{},"classes/TaskGateway.html":{}}}],["subscribemessage('startsession",{"_index":1060,"title":{},"body":{"classes/SessionGateway.html":{}}}],["subscribemessage('updatecursor",{"_index":670,"title":{},"body":{"interfaces/IData.html":{},"classes/TaskGateway.html":{}}}],["successfully",{"_index":1015,"title":{},"body":{"controllers/SessionController.html":{}}}],["summary",{"_index":273,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"interfaces/IData.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"controllers/SessionController.html":{},"classes/SessionGateway.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{}}}],["super(message",{"_index":60,"title":{},"body":{"classes/ApiError.html":{}}}],["svg",{"_index":1394,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1345,"title":{},"body":{"dependencies.html":{}}}],["t",{"_index":679,"title":{},"body":{"interfaces/IResponseBuild.html":{},"injectables/ResponseBuildService.html":{},"index.html":{}}}],["table",{"_index":1321,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1320,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":376,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{},"classes/FinalTestRepository.html":{},"injectables/InterviewRepository.html":{},"injectables/SessionRepository.html":{}}}],["task",{"_index":11,"title":{},"body":{"classes/AddTasksDto.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["task.controller",{"_index":1235,"title":{},"body":{"modules/TaskModule.html":{}}}],["task.dto",{"_index":1214,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{}}}],["task.dto.ts",{"_index":498,"title":{},"body":{"classes/CreateTaskDto.html":{},"coverage.html":{}}}],["task.dto.ts:12",{"_index":514,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:20",{"_index":515,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:28",{"_index":502,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:32",{"_index":512,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:37",{"_index":513,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:44",{"_index":506,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:52",{"_index":507,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:60",{"_index":510,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.gateway",{"_index":1237,"title":{},"body":{"modules/TaskModule.html":{}}}],["task.repository",{"_index":1236,"title":{},"body":{"modules/TaskModule.html":{},"injectables/TaskService.html":{}}}],["task.service",{"_index":655,"title":{},"body":{"interfaces/IData.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"modules/TaskModule.html":{}}}],["taskcontroller",{"_index":1204,"title":{"controllers/TaskController.html":{}},"body":{"controllers/TaskController.html":{},"modules/TaskModule.html":{},"coverage.html":{}}}],["taskgateway",{"_index":659,"title":{"classes/TaskGateway.html":{}},"body":{"interfaces/IData.html":{},"classes/TaskGateway.html":{},"modules/TaskModule.html":{},"coverage.html":{}}}],["taskids",{"_index":7,"title":{},"body":{"classes/AddTasksDto.html":{},"classes/CreateInterviewDto.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{}}}],["taskids.map((id",{"_index":1130,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["taskmodule",{"_index":89,"title":{"modules/TaskModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TaskModule.html":{},"modules.html":{},"overview.html":{}}}],["taskrepository",{"_index":1233,"title":{"injectables/TaskRepository.html":{}},"body":{"modules/TaskModule.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{},"coverage.html":{},"overview.html":{}}}],["tasks",{"_index":478,"title":{},"body":{"classes/CreateSessionDto.html":{},"injectables/InterviewRepository.html":{},"classes/ParticipantDto.html":{},"controllers/SessionController.html":{},"injectables/SessionRepository.html":{},"controllers/TaskController.html":{}}}],["tasks.dto",{"_index":1002,"title":{},"body":{"controllers/SessionController.html":{}}}],["tasks.dto.ts",{"_index":6,"title":{},"body":{"classes/AddTasksDto.html":{},"coverage.html":{}}}],["tasks.dto.ts:11",{"_index":18,"title":{},"body":{"classes/AddTasksDto.html":{}}}],["taskservice",{"_index":654,"title":{"injectables/TaskService.html":{}},"body":{"interfaces/IData.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"modules/TaskModule.html":{},"injectables/TaskService.html":{},"coverage.html":{},"overview.html":{}}}],["template",{"_index":681,"title":{},"body":{"interfaces/IResponseBuild.html":{},"injectables/ResponseBuildService.html":{}}}],["test.dto",{"_index":578,"title":{},"body":{"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{}}}],["test.dto.ts",{"_index":418,"title":{},"body":{"classes/CreateFinalTestDto.html":{},"coverage.html":{}}}],["test.dto.ts:13",{"_index":427,"title":{},"body":{"classes/CreateFinalTestDto.html":{}}}],["test.dto.ts:18",{"_index":423,"title":{},"body":{"classes/CreateFinalTestDto.html":{}}}],["test.dto.ts:22",{"_index":426,"title":{},"body":{"classes/CreateFinalTestDto.html":{}}}],["test.dto.ts:25",{"_index":424,"title":{},"body":{"classes/CreateFinalTestDto.html":{}}}],["testids",{"_index":438,"title":{},"body":{"classes/CreateInterviewDto.html":{}}}],["tests",{"_index":728,"title":{},"body":{"injectables/InterviewRepository.html":{}}}],["this.$connect",{"_index":829,"title":{},"body":{"injectables/PostgresService.html":{}}}],["this.$disconnect",{"_index":830,"title":{},"body":{"injectables/PostgresService.html":{}}}],["this._generatepassword(6",{"_index":1194,"title":{},"body":{"injectables/SessionService.html":{}}}],["this._getusercredentials(dto.participants",{"_index":1174,"title":{},"body":{"injectables/SessionService.html":{}}}],["this._sendinvitations(dto.participants",{"_index":1175,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.authrepository.findemail(dto.email",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["this.authrepository.findemail(email",{"_index":1190,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.authrepository.findid(data",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["this.authrepository.login(dto",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["this.authrepository.register",{"_index":1195,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.authrepository.register(dto",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["this.authservice.login(dto",{"_index":277,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authservice.logout(refreshtoken",{"_index":287,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authservice.refresh(refreshtoken",{"_index":285,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authservice.register(dto",{"_index":282,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.candidateinterviewrepository.create(dto",{"_index":387,"title":{},"body":{"injectables/CandidateInterviewService.html":{}}}],["this.candidateinterviewrepository.delete(id",{"_index":389,"title":{},"body":{"injectables/CandidateInterviewService.html":{}}}],["this.candidateinterviewrepository.findall(page",{"_index":390,"title":{},"body":{"injectables/CandidateInterviewService.html":{}}}],["this.candidateinterviewrepository.findbyid(id",{"_index":391,"title":{},"body":{"injectables/CandidateInterviewService.html":{}}}],["this.candidateinterviewrepository.update(id",{"_index":388,"title":{},"body":{"injectables/CandidateInterviewService.html":{}}}],["this.candidateinterviewservice.create(dto",{"_index":334,"title":{},"body":{"controllers/CandidateInterviewController.html":{}}}],["this.candidateinterviewservice.delete(id",{"_index":338,"title":{},"body":{"controllers/CandidateInterviewController.html":{}}}],["this.candidateinterviewservice.findall(page",{"_index":342,"title":{},"body":{"controllers/CandidateInterviewController.html":{}}}],["this.candidateinterviewservice.findbyid(id",{"_index":344,"title":{},"body":{"controllers/CandidateInterviewController.html":{}}}],["this.candidateinterviewservice.update(id",{"_index":336,"title":{},"body":{"controllers/CandidateInterviewController.html":{}}}],["this.config.get('jwt_secret",{"_index":796,"title":{},"body":{"injectables/JwtService.html":{}}}],["this.connectedusers.foreach((userids",{"_index":1066,"title":{},"body":{"classes/SessionGateway.html":{}}}],["this.connectedusers.get(sessionid",{"_index":1076,"title":{},"body":{"classes/SessionGateway.html":{}}}],["this.connectedusers.get(sessionid).push(userid",{"_index":1072,"title":{},"body":{"classes/SessionGateway.html":{}}}],["this.connectedusers.has(sessionid",{"_index":1070,"title":{},"body":{"classes/SessionGateway.html":{}}}],["this.connectedusers.set",{"_index":1067,"title":{},"body":{"classes/SessionGateway.html":{}}}],["this.connectedusers.set(sessionid",{"_index":1071,"title":{},"body":{"classes/SessionGateway.html":{}}}],["this.emailservice.sendsessioninvitation",{"_index":1188,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.errors",{"_index":62,"title":{},"body":{"classes/ApiError.html":{}}}],["this.finaltestrepository.create(dto",{"_index":636,"title":{},"body":{"injectables/FinalTestService.html":{}}}],["this.finaltestrepository.delete(id",{"_index":638,"title":{},"body":{"injectables/FinalTestService.html":{}}}],["this.finaltestrepository.findall(page",{"_index":639,"title":{},"body":{"injectables/FinalTestService.html":{}}}],["this.finaltestrepository.findbyid(id",{"_index":640,"title":{},"body":{"injectables/FinalTestService.html":{}}}],["this.finaltestrepository.update(id",{"_index":637,"title":{},"body":{"injectables/FinalTestService.html":{}}}],["this.finaltestservice.create(dto",{"_index":580,"title":{},"body":{"controllers/FinalTestController.html":{}}}],["this.finaltestservice.delete(id",{"_index":582,"title":{},"body":{"controllers/FinalTestController.html":{}}}],["this.finaltestservice.findall(page",{"_index":584,"title":{},"body":{"controllers/FinalTestController.html":{}}}],["this.finaltestservice.findbyid(id",{"_index":585,"title":{},"body":{"controllers/FinalTestController.html":{}}}],["this.finaltestservice.update(id",{"_index":581,"title":{},"body":{"controllers/FinalTestController.html":{}}}],["this.findbyid(id",{"_index":1276,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.generatetokens(user.id",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["this.interviewrepository.create(dto",{"_index":745,"title":{},"body":{"injectables/InterviewService.html":{}}}],["this.interviewrepository.delete(id",{"_index":747,"title":{},"body":{"injectables/InterviewService.html":{}}}],["this.interviewrepository.findall(page",{"_index":748,"title":{},"body":{"injectables/InterviewService.html":{}}}],["this.interviewrepository.findbyid(id",{"_index":749,"title":{},"body":{"injectables/InterviewService.html":{}}}],["this.interviewrepository.update(id",{"_index":746,"title":{},"body":{"injectables/InterviewService.html":{}}}],["this.interviewservice.create(dto",{"_index":701,"title":{},"body":{"controllers/InterviewController.html":{}}}],["this.interviewservice.delete(id",{"_index":703,"title":{},"body":{"controllers/InterviewController.html":{}}}],["this.interviewservice.findall(page",{"_index":704,"title":{},"body":{"controllers/InterviewController.html":{}}}],["this.interviewservice.findbyid(id",{"_index":705,"title":{},"body":{"controllers/InterviewController.html":{}}}],["this.interviewservice.update(id",{"_index":702,"title":{},"body":{"controllers/InterviewController.html":{}}}],["this.jwt.signjwt(userid",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["this.jwt.verifyjwt(refreshtoken",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["this.postgres.$transaction",{"_index":374,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{}}}],["this.postgres.candidateinterview.count",{"_index":377,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{}}}],["this.postgres.candidateinterview.create",{"_index":362,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{}}}],["this.postgres.candidateinterview.delete",{"_index":364,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{}}}],["this.postgres.candidateinterview.findmany",{"_index":375,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{}}}],["this.postgres.candidateinterview.findunique",{"_index":378,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{}}}],["this.postgres.candidateinterview.update",{"_index":363,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{}}}],["this.postgres.finaltest.count",{"_index":622,"title":{},"body":{"classes/FinalTestRepository.html":{}}}],["this.postgres.finaltest.create",{"_index":609,"title":{},"body":{"classes/FinalTestRepository.html":{}}}],["this.postgres.finaltest.delete",{"_index":627,"title":{},"body":{"classes/FinalTestRepository.html":{}}}],["this.postgres.finaltest.findmany",{"_index":621,"title":{},"body":{"classes/FinalTestRepository.html":{}}}],["this.postgres.finaltest.findunique",{"_index":626,"title":{},"body":{"classes/FinalTestRepository.html":{}}}],["this.postgres.finaltest.update",{"_index":615,"title":{},"body":{"classes/FinalTestRepository.html":{}}}],["this.postgres.interview.count",{"_index":734,"title":{},"body":{"injectables/InterviewRepository.html":{}}}],["this.postgres.interview.create",{"_index":719,"title":{},"body":{"injectables/InterviewRepository.html":{}}}],["this.postgres.interview.delete",{"_index":736,"title":{},"body":{"injectables/InterviewRepository.html":{}}}],["this.postgres.interview.findmany",{"_index":733,"title":{},"body":{"injectables/InterviewRepository.html":{}}}],["this.postgres.interview.findunique",{"_index":735,"title":{},"body":{"injectables/InterviewRepository.html":{}}}],["this.postgres.interview.update",{"_index":731,"title":{},"body":{"injectables/InterviewRepository.html":{}}}],["this.postgres.questiongroup.create",{"_index":871,"title":{},"body":{"injectables/QuestionRepository.html":{}}}],["this.postgres.questiongroup.delete",{"_index":881,"title":{},"body":{"injectables/QuestionRepository.html":{}}}],["this.postgres.questiongroup.findmany",{"_index":884,"title":{},"body":{"injectables/QuestionRepository.html":{}}}],["this.postgres.questiongroup.findunique",{"_index":602,"title":{},"body":{"classes/FinalTestRepository.html":{},"injectables/QuestionRepository.html":{}}}],["this.postgres.questiongroup.update",{"_index":880,"title":{},"body":{"injectables/QuestionRepository.html":{}}}],["this.postgres.session.count",{"_index":1121,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["this.postgres.session.create",{"_index":1123,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["this.postgres.session.delete",{"_index":1132,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["this.postgres.session.findmany",{"_index":1118,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["this.postgres.session.findunique",{"_index":1131,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["this.postgres.session.update",{"_index":1129,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["this.postgres.task.create",{"_index":1245,"title":{},"body":{"injectables/TaskRepository.html":{}}}],["this.postgres.task.delete",{"_index":1248,"title":{},"body":{"injectables/TaskRepository.html":{}}}],["this.postgres.task.findmany",{"_index":1249,"title":{},"body":{"injectables/TaskRepository.html":{}}}],["this.postgres.task.findunique",{"_index":1247,"title":{},"body":{"injectables/TaskRepository.html":{}}}],["this.postgres.task.update",{"_index":1246,"title":{},"body":{"injectables/TaskRepository.html":{}}}],["this.postgres.user.create",{"_index":162,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["this.postgres.user.findfirst",{"_index":159,"title":{},"body":{"injectables/AuthRepository.html":{}}}],["this.questionrepository.create(dto",{"_index":895,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.questionrepository.delete(id",{"_index":900,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.questionrepository.findall(category",{"_index":901,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.questionrepository.findbyid(id",{"_index":896,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.questionrepository.update(id",{"_index":899,"title":{},"body":{"injectables/QuestionService.html":{}}}],["this.questionservice.create(createquestiondto",{"_index":847,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.delete(id",{"_index":850,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.getall(category",{"_index":853,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.update(id",{"_index":849,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.redis",{"_index":913,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.redisclient",{"_index":933,"title":{},"body":{"injectables/RefreshService.html":{}}}],["this.redisclient.del(`refresh_token:${userid",{"_index":937,"title":{},"body":{"injectables/RefreshService.html":{}}}],["this.redisclient.get(`refresh_token:${userid",{"_index":936,"title":{},"body":{"injectables/RefreshService.html":{}}}],["this.redisclient.set(`refresh_token:${userid",{"_index":935,"title":{},"body":{"injectables/RefreshService.html":{}}}],["this.redisservice.getredisclient",{"_index":934,"title":{},"body":{"injectables/RefreshService.html":{}}}],["this.reflector.get(role_key",{"_index":962,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.refreshservice.findtoken(data",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["this.refreshservice.removetoken(data",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["this.refreshservice.savetoken(userid",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["this.server",{"_index":1080,"title":{},"body":{"classes/SessionGateway.html":{}}}],["this.server.to(data.sessionid).emit('change",{"_index":663,"title":{},"body":{"interfaces/IData.html":{},"classes/TaskGateway.html":{}}}],["this.server.to(data.sessionid).emit('cursorupdate",{"_index":672,"title":{},"body":{"interfaces/IData.html":{},"classes/TaskGateway.html":{}}}],["this.server.to(data.sessionid).emit('test",{"_index":669,"title":{},"body":{"interfaces/IData.html":{},"classes/TaskGateway.html":{}}}],["this.server.to(sessionid).emit('currentusers",{"_index":1075,"title":{},"body":{"classes/SessionGateway.html":{}}}],["this.server.to(sessionid).emit('sessionended",{"_index":1085,"title":{},"body":{"classes/SessionGateway.html":{}}}],["this.server.to(sessionid).emit('sessionstarted",{"_index":1079,"title":{},"body":{"classes/SessionGateway.html":{}}}],["this.server.to(sessionid).emit('userconnected",{"_index":1074,"title":{},"body":{"classes/SessionGateway.html":{}}}],["this.server.to(sessionid).emit('userdisconnected",{"_index":1069,"title":{},"body":{"classes/SessionGateway.html":{}}}],["this.sessionrepository.addtasks(sessionid",{"_index":1172,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.count(filter",{"_index":1169,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.create(dto",{"_index":1173,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.delete(id",{"_index":1177,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findall(filter",{"_index":1167,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findbyid(id",{"_index":1178,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findbyid(sessionid",{"_index":1170,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findbyinterviewerid",{"_index":1168,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.update(id",{"_index":1176,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.updateactive(sessionid",{"_index":1179,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionservice.addtaskstosession",{"_index":1029,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.createsession(createsessiondto",{"_index":1017,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.deletesession(id",{"_index":1021,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.endsession(sessionid",{"_index":1084,"title":{},"body":{"classes/SessionGateway.html":{}}}],["this.sessionservice.getsessionbyid(id",{"_index":1024,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.getsessions(filter",{"_index":1011,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.startsession(sessionid",{"_index":1078,"title":{},"body":{"classes/SessionGateway.html":{}}}],["this.sessionservice.updatesession(id",{"_index":1019,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.status",{"_index":61,"title":{},"body":{"classes/ApiError.html":{}}}],["this.taskrepository.create(createtaskdto",{"_index":1261,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.delete(id",{"_index":1278,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.findall(category",{"_index":1262,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.findbyid(id",{"_index":1274,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskrepository.update(id",{"_index":1277,"title":{},"body":{"injectables/TaskService.html":{}}}],["this.taskservice.create(createtaskdto",{"_index":1216,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.delete(id",{"_index":1220,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.findall(category",{"_index":1217,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.findbyid(id",{"_index":1218,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.taskservice.runtestcode(data.language",{"_index":667,"title":{},"body":{"interfaces/IData.html":{},"classes/TaskGateway.html":{}}}],["this.taskservice.update(id",{"_index":1219,"title":{},"body":{"controllers/TaskController.html":{}}}],["this.transporter",{"_index":541,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.transporter.sendmail(mailoptions",{"_index":552,"title":{},"body":{"injectables/EmailService.html":{}}}],["throw",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"controllers/InterviewController.html":{},"guards/JwtAuthGuard.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["throws",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"controllers/FinalTestController.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"guards/RolesGuard.html":{}}}],["title",{"_index":421,"title":{},"body":{"classes/CreateFinalTestDto.html":{},"classes/CreateInterviewDto.html":{},"classes/CreateQuestionWithGroupDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateTaskDto.html":{},"classes/FilterSessionsDto.html":{},"classes/FinalTestRepository.html":{},"injectables/InterviewRepository.html":{},"classes/ParticipantDto.html":{},"classes/QuestionDto.html":{},"injectables/QuestionRepository.html":{},"injectables/SessionRepository.html":{}}}],["to(sessionid",{"_index":1081,"title":{},"body":{"classes/SessionGateway.html":{}}}],["todo",{"_index":1003,"title":{},"body":{"controllers/SessionController.html":{}}}],["token",{"_index":753,"title":{},"body":{"guards/JwtAuthGuard.html":{},"modules/JwtModule.html":{},"injectables/JwtService.html":{}}}],["tokendata",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["tokens",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["tokens.accesstoken",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["total",{"_index":373,"title":{},"body":{"injectables/CandidateInterviewRepository.html":{},"injectables/SessionService.html":{}}}],["totalcount",{"_index":619,"title":{},"body":{"classes/FinalTestRepository.html":{},"injectables/InterviewRepository.html":{}}}],["totalpages",{"_index":623,"title":{},"body":{"classes/FinalTestRepository.html":{},"injectables/InterviewRepository.html":{}}}],["transformer",{"_index":1330,"title":{},"body":{"dependencies.html":{}}}],["transport",{"_index":539,"title":{},"body":{"injectables/EmailService.html":{}}}],["transporter",{"_index":527,"title":{},"body":{"injectables/EmailService.html":{}}}],["true",{"_index":17,"title":{},"body":{"classes/AddTasksDto.html":{},"modules/AppModule.html":{},"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"classes/FinalTestRepository.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"injectables/InterviewRepository.html":{},"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"injectables/SessionRepository.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":276,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"guards/JwtAuthGuard.html":{},"controllers/QuestionController.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{}}}],["type",{"_index":15,"title":{},"body":{"classes/AddTasksDto.html":{},"classes/CreateCandidateInterviewDto.html":{},"classes/CreateQuestionWithGroupDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateTaskDto.html":{},"injectables/JwtService.html":{},"classes/ParticipantDto.html":{},"classes/QuestionDto.html":{},"classes/SessionGateway.html":{},"injectables/SessionService.html":{},"classes/TaskGateway.html":{},"injectables/TaskService.html":{}}}],["ui",{"_index":1346,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":55,"title":{},"body":{"classes/ApiError.html":{}}}],["unauthorizederror",{"_index":37,"title":{},"body":{"classes/ApiError.html":{}}}],["unauthorizedexception",{"_index":760,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["undefined",{"_index":463,"title":{},"body":{"classes/CreateQuestionWithGroupDto.html":{}}}],["undefined})@isarray",{"_index":488,"title":{},"body":{"classes/CreateSessionDto.html":{}}}],["undefined})@isarray()@isstring({each",{"_index":16,"title":{},"body":{"classes/AddTasksDto.html":{}}}],["unknown",{"_index":254,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CandidateInterviewController.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"controllers/InterviewController.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"injectables/JwtService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"injectables/RefreshService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"controllers/TaskController.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{}}}],["unlicensed",{"_index":1405,"title":{},"body":{"properties.html":{}}}],["up",{"_index":1361,"title":{},"body":{"index.html":{}}}],["update",{"_index":295,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"controllers/InterviewController.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"injectables/SessionRepository.html":{},"controllers/TaskController.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{}}}],["update(@param('id",{"_index":335,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/TaskController.html":{}}}],["update(id",{"_index":310,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"injectables/CandidateInterviewRepository.html":{},"injectables/CandidateInterviewService.html":{},"controllers/FinalTestController.html":{},"classes/FinalTestRepository.html":{},"injectables/FinalTestService.html":{},"controllers/InterviewController.html":{},"injectables/InterviewRepository.html":{},"injectables/InterviewService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"injectables/SessionRepository.html":{},"controllers/TaskController.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{}}}],["updateactive",{"_index":1100,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["updateactive(id",{"_index":1115,"title":{},"body":{"injectables/SessionRepository.html":{}}}],["updatedsession",{"_index":1028,"title":{},"body":{"controllers/SessionController.html":{}}}],["updatequestiondto",{"_index":841,"title":{},"body":{"controllers/QuestionController.html":{}}}],["updatesession",{"_index":973,"title":{},"body":{"controllers/SessionController.html":{},"injectables/SessionService.html":{}}}],["updatesession(id",{"_index":991,"title":{},"body":{"controllers/SessionController.html":{},"injectables/SessionService.html":{}}}],["updatesessiondto",{"_index":992,"title":{},"body":{"controllers/SessionController.html":{}}}],["updatetaskdto",{"_index":1212,"title":{},"body":{"controllers/TaskController.html":{},"injectables/TaskService.html":{}}}],["url",{"_index":1263,"title":{},"body":{"injectables/TaskService.html":{},"index.html":{}}}],["url_client",{"_index":1386,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":315,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{}}}],["useguards(jwtauthguard",{"_index":328,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{}}}],["useguards(rolesguard",{"_index":1009,"title":{},"body":{"controllers/SessionController.html":{}}}],["useguards(rolesguard)@roles(['hr",{"_index":984,"title":{},"body":{"controllers/SessionController.html":{}}}],["useguards(rolesguard)@roles(['hr'])@delete(':id",{"_index":981,"title":{},"body":{"controllers/SessionController.html":{}}}],["useguards(rolesguard)@roles(['hr'])@patch(':id",{"_index":993,"title":{},"body":{"controllers/SessionController.html":{}}}],["useguards(rolesguard)@roles(['hr'])@post",{"_index":978,"title":{},"body":{"controllers/SessionController.html":{}}}],["useguards(rolesguard)@roles(['interviewer'])@patch(':id/tasks",{"_index":975,"title":{},"body":{"controllers/SessionController.html":{}}}],["user",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["user.full_name",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"injectables/SessionService.html":{}}}],["user.id",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"controllers/SessionController.html":{}}}],["user.password",{"_index":1192,"title":{},"body":{"injectables/SessionService.html":{}}}],["user.role",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"guards/RolesGuard.html":{},"controllers/SessionController.html":{}}}],["user@gmail.com",{"_index":805,"title":{},"body":{"classes/LoginDto.html":{}}}],["user@gmail.com'})@isemail()@isnotempty",{"_index":801,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["usercredentials",{"_index":1148,"title":{},"body":{"injectables/SessionService.html":{}}}],["usercredentials[participant.email",{"_index":1185,"title":{},"body":{"injectables/SessionService.html":{}}}],["userid",{"_index":141,"title":{},"body":{"injectables/AuthRepository.html":{},"injectables/AuthService.html":{},"classes/CreateQuestionWithGroupDto.html":{},"classes/CreateTaskDto.html":{},"interfaces/IData.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{},"controllers/QuestionController.html":{},"classes/QuestionDto.html":{},"injectables/QuestionRepository.html":{},"injectables/QuestionService.html":{},"injectables/RefreshService.html":{},"classes/SessionGateway.html":{},"injectables/SessionService.html":{},"controllers/TaskController.html":{},"classes/TaskGateway.html":{},"injectables/TaskRepository.html":{},"injectables/TaskService.html":{}}}],["userids.filter((id",{"_index":1068,"title":{},"body":{"classes/SessionGateway.html":{}}}],["userrole",{"_index":1159,"title":{},"body":{"injectables/SessionService.html":{}}}],["utils/apierror/apierror",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["utils/jwt/jwt.module",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["utils/jwt/jwt.service",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGenerateTokens.html":{},"interfaces/ILogin.html":{},"interfaces/IUser.html":{}}}],["utils/jwtauthguard/jwtauthguard",{"_index":322,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{}}}],["utils/resbuild/resbuild.module",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["utils/resbuild/resbuild.service",{"_index":270,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["utils/roleguard/role",{"_index":326,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{}}}],["utils/roleguard/roles.guard",{"_index":324,"title":{},"body":{"controllers/CandidateInterviewController.html":{},"controllers/FinalTestController.html":{},"controllers/InterviewController.html":{},"controllers/QuestionController.html":{},"controllers/SessionController.html":{},"controllers/TaskController.html":{}}}],["validator",{"_index":22,"title":{},"body":{"classes/AddTasksDto.html":{},"classes/CreateCandidateInterviewDto.html":{},"classes/CreateFinalTestDto.html":{},"classes/CreateInterviewDto.html":{},"classes/CreateQuestionWithGroupDto.html":{},"classes/CreateSessionDto.html":{},"classes/CreateTaskDto.html":{},"classes/FilterSessionsDto.html":{},"classes/LoginDto.html":{},"classes/ParticipantDto.html":{},"classes/QuestionDto.html":{},"classes/RegisterDto.html":{},"classes/StartSessionDto.html":{},"dependencies.html":{}}}],["variable",{"_index":1284,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1374,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{}}}],["verifyjwt",{"_index":780,"title":{},"body":{"injectables/JwtService.html":{}}}],["verifyjwt(token",{"_index":792,"title":{},"body":{"injectables/JwtService.html":{}}}],["version",{"_index":1402,"title":{},"body":{"properties.html":{}}}],["void",{"_index":1048,"title":{},"body":{"classes/SessionGateway.html":{},"classes/TaskGateway.html":{}}}],["web",{"_index":752,"title":{},"body":{"guards/JwtAuthGuard.html":{},"modules/JwtModule.html":{},"injectables/JwtService.html":{}}}],["websocketgateway",{"_index":649,"title":{},"body":{"interfaces/IData.html":{},"classes/SessionGateway.html":{},"classes/TaskGateway.html":{}}}],["websocketserver",{"_index":650,"title":{},"body":{"interfaces/IData.html":{},"classes/SessionGateway.html":{},"classes/TaskGateway.html":{}}}],["where.categoryname",{"_index":882,"title":{},"body":{"injectables/QuestionRepository.html":{},"injectables/TaskRepository.html":{}}}],["where.userid",{"_index":883,"title":{},"body":{"injectables/QuestionRepository.html":{},"injectables/TaskRepository.html":{}}}],["yarn",{"_index":1362,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddTasksDto.html":{"url":"classes/AddTasksDto.html","title":"class - AddTasksDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Классы\n  AddTasksDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/session/dto/add-tasks.dto.ts\n        \n\n\n\n\n\n\n            \n    Индекс\n    \n        \n                \n                    \n                        Свойства\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                taskIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Свойства\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        taskIds\n                        \n                    \n                \n            \n                \n                    \n                        Тип :     string[]\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Array of task IDs to be added to the session', type: undefined})@IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/session/dto/add-tasks.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsString } from 'class-validator'\nimport { ApiProperty } from '@nestjs/swagger'\n\nexport class AddTasksDto {\n  @ApiProperty({\n    description: 'Array of task IDs to be added to the session',\n    type: [String],\n  })\n  @IsArray()\n  @IsString({ each: true })\n  taskIds: string[]\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"classes/ApiError.html":{"url":"classes/ApiError.html","title":"class - ApiError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Классы\n  ApiError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/utils/apiError/apiError.ts\n        \n\n\n            \n                Описание\n            \n            \n                Класс для представления ошибок API (ApiError).\nЭтот класс расширяет стандартный класс ошибки и добавляет\nдополнительные свойства для статуса и ошибок.\n\n            \n\n            \n                Расширяет\n            \n            \n                        Error\n            \n\n\n\n            \n    Индекс\n    \n        \n                \n                    \n                        Свойства\n                    \n                \n                \n                    \n                        \n                            \n                                errors\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                BadRequest\n                            \n                            \n                                    Static\n                                NotFound\n                            \n                            \n                                    Static\n                                UnauthorizedError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Конструктор\n        \n            \n                \n                    \nconstructor(status: number, message: string, errors: any[])\n                    \n                \n                        \n                            \n                                Определен в src/utils/apiError/apiError.ts:11\n                            \n                        \n\n                \n                    \n                            Конструктор для создания экземпляра ApiError.\n\n                            \n                                    Параметры :\n                                    \n                                        \n                                            \n                                                Имя\n                                                    Тип\n                                                Опциональный\n                                                    Описание\n                                            \n                                        \n                                        \n                                                \n                                                        status\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Нет\n                                                    \n                                                    \n                                                        \n                                                                \nHTTP статус ошибки.\n\n\n                                                        \n                                                \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Нет\n                                                    \n                                                    \n                                                        \n                                                                \nСообщение об ошибке.\n\n\n                                                        \n                                                \n                                                \n                                                        errors\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            Нет\n                                                    \n                                                    \n                                                        \n                                                                \nДополнительные ошибки или детали (по умолчанию пустой массив).\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Свойства\n    \n    \n        \n            \n                \n                    \n                    \n                        errors\n                        \n                    \n                \n            \n                \n                    \n                        Тип :     any[]\n\n                    \n                \n                    \n                        \n                                Определен в src/utils/apiError/apiError.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         number\n\n                    \n                \n                    \n                        \n                                Определен в src/utils/apiError/apiError.ts:10\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        BadRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    BadRequest(message: string, errors: any[])\n                \n            \n\n\n                    \n                        \n                            Определен в src/utils/apiError/apiError.ts:42\n                        \n                    \n\n\n            \n                \n                        Создает экземпляр ApiError для неверного запроса.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Значение по умолчанию\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nСообщение об ошибке.\n\n\n                                            \n                                        \n                                        \n                                                errors\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n                                            \n                                                    []\n                                            \n\n                                            \n                                                    \nДополнительные ошибки или детали (по умолчанию пустой массив).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         ApiError\n\n                        \n                            \n                                Экземпляр ApiError с статусом 400 (Bad Request).\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        NotFound\n                        \n                    \n                \n            \n            \n                \n                        \n                    NotFound(message: string, errors: any[])\n                \n            \n\n\n                    \n                        \n                            Определен в src/utils/apiError/apiError.ts:53\n                        \n                    \n\n\n            \n                \n                        Создает экземпляр ApiError для не найденного ресурса.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Значение по умолчанию\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nСообщение об ошибке.\n\n\n                                            \n                                        \n                                        \n                                                errors\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n                                            \n                                                    []\n                                            \n\n                                            \n                                                    \nДополнительные ошибки или детали (по умолчанию пустой массив).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         ApiError\n\n                        \n                            \n                                Экземпляр ApiError с статусом 404 (Not Found).\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        UnauthorizedError\n                        \n                    \n                \n            \n            \n                \n                        \n                    UnauthorizedError()\n                \n            \n\n\n                    \n                        \n                            Определен в src/utils/apiError/apiError.ts:31\n                        \n                    \n\n\n            \n                \n                        Создает экземпляр ApiError для неавторизованного доступа.\n\n\n                        \n                            Тип возвращаемого значения :         ApiError\n\n                        \n                            \n                                Экземпляр ApiError с статусом 401 (Unauthorized).\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common'\n\n/**\n * Класс для представления ошибок API (ApiError).\n *\n * Этот класс расширяет стандартный класс ошибки и добавляет\n * дополнительные свойства для статуса и ошибок.\n */\nexport class ApiError extends Error {\n  status: number // HTTP статус ошибки\n  errors: any[] // Дополнительные ошибки или детали\n\n  /**\n   * Конструктор для создания экземпляра ApiError.\n   *\n   * @param {number} status - HTTP статус ошибки.\n   * @param {string} message - Сообщение об ошибке.\n   * @param {any[]} [errors] - Дополнительные ошибки или детали (по умолчанию пустой массив).\n   */\n  constructor(status: number, message: string, errors: any[] = []) {\n    super(message)\n    this.status = status\n    this.errors = errors\n  }\n\n  /**\n   * Создает экземпляр ApiError для неавторизованного доступа.\n   *\n   * @returns {ApiError} Экземпляр ApiError с статусом 401 (Unauthorized).\n   */\n  static UnauthorizedError(): ApiError {\n    return new ApiError(HttpStatus.UNAUTHORIZED, 'Пользователь не авторизован')\n  }\n\n  /**\n   * Создает экземпляр ApiError для неверного запроса.\n   *\n   * @param {string} message - Сообщение об ошибке.\n   * @param {any[]} [errors] - Дополнительные ошибки или детали (по умолчанию пустой массив).\n   * @returns {ApiError} Экземпляр ApiError с статусом 400 (Bad Request).\n   */\n  static BadRequest(message: string, errors: any[] = []): ApiError {\n    return new ApiError(HttpStatus.BAD_REQUEST, message, errors)\n  }\n\n  /**\n   * Создает экземпляр ApiError для не найденного ресурса.\n   *\n   * @param {string} message - Сообщение об ошибке.\n   * @param {any[]} [errors] - Дополнительные ошибки или детали (по умолчанию пустой массив).\n   * @returns {ApiError} Экземпляр ApiError с статусом 404 (Not Found).\n   */\n  static NotFound(message: string, errors: any[] = []): ApiError {\n    return new ApiError(HttpStatus.NOT_FOUND, message, errors)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Модули\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCandidateInterviewModule\n\nCandidateInterviewModule\n\nAppModule -->\n\nCandidateInterviewModule->AppModule\n\n\n\nAppModule -->\n\nCandidateInterviewModule->AppModule\n\n\n\n\n\nFinalTestModule\n\nFinalTestModule\n\nAppModule -->\n\nFinalTestModule->AppModule\n\n\n\n\n\nInterviewModule\n\nInterviewModule\n\nAppModule -->\n\nInterviewModule->AppModule\n\n\n\n\n\nJwtModule\n\nJwtModule\n\nAppModule -->\n\nJwtModule->AppModule\n\n\n\n\n\nPostgresModule\n\nPostgresModule\n\nAppModule -->\n\nPostgresModule->AppModule\n\n\n\n\n\nQuestionModule\n\nQuestionModule\n\nAppModule -->\n\nQuestionModule->AppModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nResponseBuilderModule\n\nResponseBuilderModule\n\nAppModule -->\n\nResponseBuilderModule->AppModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nTaskModule\n\nTaskModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Приблизить\n        Сброс\n        Отдалить\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            Файл\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Импорт\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CandidateInterviewModule\n                        \n                        \n                            CandidateInterviewModule\n                        \n                        \n                            FinalTestModule\n                        \n                        \n                            InterviewModule\n                        \n                        \n                            JwtModule\n                        \n                        \n                            PostgresModule\n                        \n                        \n                            QuestionModule\n                        \n                        \n                            RedisModule\n                        \n                        \n                            ResponseBuilderModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            TaskModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ResponseBuilderModule } from './utils/resBuild/resBuild.module'\nimport { PostgresModule } from './db/postgres/postgres.module'\nimport { SessionModule } from './crud/session/session.module'\nimport { RedisModule } from './db/redis/redis.module'\nimport { AuthModule } from './crud/auth/auth.module'\nimport { JwtModule } from './utils/jwt/jwt.module'\nimport { ConfigModule } from '@nestjs/config'\nimport { Module } from '@nestjs/common'\nimport { TaskModule } from './crud/task/task.module'\nimport { QuestionModule } from './crud/question/question.module'\nimport { FinalTestModule } from './crud/finalTest/finalTest.module'\nimport { CandidateInterviewModule } from './crud/сandidateInterview/сandidateInterview.module'\nimport { InterviewModule } from './crud/interview/interview.module'\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      envFilePath: `.env`,\n      isGlobal: true,\n    }),\n    CandidateInterviewModule,\n    CandidateInterviewModule,\n    ResponseBuilderModule,\n    FinalTestModule,\n    InterviewModule,\n    PostgresModule,\n    QuestionModule,\n    SessionModule,\n    RedisModule,\n    AuthModule,\n    TaskModule,\n    JwtModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Модули\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nRedisModule\n\nRedisModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nRedisModule->AuthModule\n\n\n\n\n\nAuthRepository \n\nAuthRepository \n\nAuthRepository  -->\n\nAuthModule->AuthRepository \n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthRepository\n\nAuthRepository\n\nAuthModule -->\n\nAuthRepository->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRefreshService\n\nRefreshService\n\nAuthModule -->\n\nRefreshService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Приблизить\n        Сброс\n        Отдалить\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            Файл\n        \n        \n            src/crud/auth/auth.module.ts\n        \n\n\n\n        \n            Описание\n        \n        \n            Модуль аутентификации (AuthModule).\nЭтот модуль объединяет контроллеры и сервисы, необходимые для аутентификации пользователей.\n\n        \n\n\n        \n            \n                \n                    Провайдеры\n                    \n                        \n                            AuthRepository\n                        \n                        \n                            AuthService\n                        \n                        \n                            RefreshService\n                        \n                    \n                \n                \n                    Контроллеры\n                    \n                        \n                            AuthenticationController\n                        \n                    \n                \n                \n                    Импорт\n                    \n                        \n                            RedisModule\n                        \n                    \n                \n                \n                    Экспорт\n                    \n                        \n                            AuthRepository\n                        \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { AuthenticationController } from './auth.controller'\nimport { RefreshService } from './service/refresh.service'\nimport { RedisModule } from 'src/db/redis/redis.module'\nimport { AuthService } from './service/auth.service'\nimport { AuthRepository } from './auth.repository'\nimport { Module } from '@nestjs/common'\n\n/**\n * Модуль аутентификации (AuthModule).\n *\n * Этот модуль объединяет контроллеры и сервисы, необходимые для аутентификации пользователей.\n */\n@Module({\n  imports: [RedisModule], // Импорт модуля Redis для работы с токенами\n  controllers: [AuthenticationController], // Контроллер для обработки запросов аутентификации\n  providers: [AuthService, RefreshService, AuthRepository], // Сервисы и репозиторий для аутентификации\n  exports: [AuthRepository, AuthService], // Экспортируемые сервисы для использования в других модулях\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"injectables/AuthRepository.html":{"url":"injectables/AuthRepository.html","title":"injectable - AuthRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Внедрения\n  AuthRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/auth/auth.repository.ts\n        \n\n\n\n\n\n            \n    Индекс\n    \n        \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                findEmail\n                            \n                            \n                                findId\n                            \n                            \n                                login\n                            \n                            \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Конструктор\n        \n            \n                \n                    \nconstructor(postgres: PostgresService)\n                    \n                \n                        \n                            \n                                Определен в src/crud/auth/auth.repository.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Параметры :\n                                    \n                                        \n                                            \n                                                Имя\n                                                    Тип\n                                                Опциональный\n                                            \n                                        \n                                        \n                                                \n                                                        postgres\n                                                  \n                                                        \n                                                                        PostgresService\n                                                        \n                                                  \n                                                    \n                                                            Нет\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                        findEmail\n                        \n                    \n                \n            \n            \n                \nfindEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/auth/auth.repository.ts:57\n                        \n                    \n\n\n            \n                \n                        Находит пользователя по email.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nЭлектронная почта пользователя.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \nВозвращает пользователя, если найден.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findId\n                        \n                    \n                \n            \n            \n                \nfindId(userId: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/auth/auth.repository.ts:72\n                        \n                    \n\n\n            \n                \n                        Находит пользователя по ID.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nID пользователя.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \nВозвращает пользователя, если найден.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(dto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/auth/auth.repository.ts:29\n                        \n                    \n\n\n            \n                \n                        Выполняет вход пользователя в систему.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nДанные для входа пользователя.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \nВозвращает пользователя, если вход успешен.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(dto: RegisterDto)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/auth/auth.repository.ts:44\n                        \n                    \n\n\n            \n                \n                        Регистрирует нового пользователя.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nДанные для регистрации пользователя.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \nВозвращает зарегистрированного пользователя.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PostgresService } from '../../db/postgres/postgres.service'\nimport { RegisterDto } from './dto/register.dto'\nimport { Injectable } from '@nestjs/common'\nimport { LoginDto } from './dto/login.dto'\n\n/**\n * Репозиторий для работы с пользователями (AuthRepository).\n *\n * Этот класс управляет взаимодействием с базой данных для операций аутентификации.\n */\nconst SELECT_FIELDS = {\n  id: true,\n  email: true,\n  full_name: true,\n  password: true,\n  role: true,\n}\n\n@Injectable()\nexport class AuthRepository {\n  constructor(private postgres: PostgresService) {}\n\n  /**\n   * Выполняет вход пользователя в систему.\n   *\n   * @param {LoginDto} dto - Данные для входа пользователя.\n   * @returns {Promise} - Возвращает пользователя, если вход успешен.\n   */\n  login(dto: LoginDto) {\n    return this.postgres.user.findFirst({\n      select: SELECT_FIELDS,\n      where: {\n        email: dto.email,\n      },\n    })\n  }\n\n  /**\n   * Регистрирует нового пользователя.\n   *\n   * @param {RegisterDto} dto - Данные для регистрации пользователя.\n   * @returns {Promise} - Возвращает зарегистрированного пользователя.\n   */\n  register(dto: RegisterDto) {\n    return this.postgres.user.create({\n      select: SELECT_FIELDS,\n      data: dto,\n    })\n  }\n\n  /**\n   * Находит пользователя по email.\n   *\n   * @param {string} email - Электронная почта пользователя.\n   * @returns {Promise} - Возвращает пользователя, если найден.\n   */\n  findEmail(email: string) {\n    return this.postgres.user.findFirst({\n      select: SELECT_FIELDS,\n      where: {\n        email: email,\n      },\n    })\n  }\n\n  /**\n   * Находит пользователя по ID.\n   *\n   * @param {string} userId - ID пользователя.\n   * @returns {Promise} - Возвращает пользователя, если найден.\n   */\n  findId(userId: string) {\n    return this.postgres.user.findFirst({\n      where: {\n        id: userId,\n      },\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Внедрения\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/auth/service/auth.service.ts\n        \n\n\n            \n                Описание\n            \n            \n                Сервис аутентификации пользователей.\nЭтот сервис предоставляет методы для регистрации, входа, выхода и обновления токенов.\n\n            \n\n\n\n            \n    Индекс\n    \n        \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateTokens\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refresh\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Конструктор\n        \n            \n                \n                    \nconstructor(authRepository: AuthRepository, refreshService: RefreshService, jwt: JwtService)\n                    \n                \n                        \n                            \n                                Определен в src/crud/auth/service/auth.service.ts:35\n                            \n                        \n\n                \n                    \n                            \n                                    Параметры :\n                                    \n                                        \n                                            \n                                                Имя\n                                                    Тип\n                                                Опциональный\n                                            \n                                        \n                                        \n                                                \n                                                        authRepository\n                                                  \n                                                        \n                                                                        AuthRepository\n                                                        \n                                                  \n                                                    \n                                                            Нет\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshService\n                                                  \n                                                        \n                                                                        RefreshService\n                                                        \n                                                  \n                                                    \n                                                            Нет\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwt\n                                                  \n                                                        \n                                                                        JwtService\n                                                        \n                                                  \n                                                    \n                                                            Нет\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(userId: string, res: Response)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/auth/service/auth.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Генерирует токены доступа и обновления для пользователя.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nID пользователя, для которого генерируются токены.\n\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nОбъект ответа Express для установки cookie.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         Promise\n\n                        \n                            \n                                \nОбъект с токенами доступа и обновления.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(dto: LoginDto, res: Response)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/auth/service/auth.service.ts:72\n                        \n                    \n\n\n            \n                \n                        Выполняет вход пользователя в систему.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nДанные для входа пользователя.\n\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nОбъект ответа Express для установки cookie.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         Promise\n\n                        \n                            \n                                \nОбъект с токеном доступа и данными пользователя.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(refreshToken: string, res: Response)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/auth/service/auth.service.ts:172\n                        \n                    \n\n\n            \n                \n                        Выходит пользователя из системы, удаляя токен обновления.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nТокен обновления, который передается пользователем.\n\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nОбъект ответа Express для очистки cookie.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     Promise\n\n                        \n                            \n                                \nВозвращает true, если выход выполнен успешно.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh(refreshToken: string, res: Response)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/auth/service/auth.service.ts:136\n                        \n                    \n\n\n            \n                \n                        Обновляет токены доступа для пользователя.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nТокен обновления, который передается пользователем.\n\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nОбъект ответа Express для установки cookie.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         Promise\n\n                        \n                            \n                                \nОбъект с новым токеном доступа и данными пользователя.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(dto: RegisterDto, res: Response)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/auth/service/auth.service.ts:105\n                        \n                    \n\n\n            \n                \n                        Регистрирует нового пользователя.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nДанные для регистрации пользователя.\n\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nОбъект ответа Express для установки cookie.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         Promise\n\n                        \n                            \n                                \nОбъект с токеном доступа и данными пользователя.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ApiError } from '../../../utils/apiError/apiError'\nimport { JwtService } from '../../../utils/jwt/jwt.service'\nimport { AuthRepository } from '../auth.repository'\nimport { RefreshService } from './refresh.service'\nimport { RegisterDto } from '../dto/register.dto'\nimport { LoginDto } from '../dto/login.dto'\nimport { Injectable } from '@nestjs/common'\nimport { $Enums } from '@prisma/client'\nimport { Response } from 'express'\nimport * as argon from 'argon2'\n\nexport interface IGenerateTokens {\n  accessToken: string\n  refreshToken: string\n}\n\nexport interface ILogin {\n  accessToken: string\n  user: IUser\n}\n\nexport interface IUser {\n  id: string\n  full_name: string\n  email: string\n  role: $Enums.UserRole\n}\n\n/**\n * Сервис аутентификации пользователей.\n *\n * Этот сервис предоставляет методы для регистрации, входа, выхода и обновления токенов.\n */\n@Injectable()\nexport class AuthService {\n  constructor(\n    private authRepository: AuthRepository,\n    private refreshService: RefreshService,\n    private jwt: JwtService\n  ) {}\n\n  /**\n   * Генерирует токены доступа и обновления для пользователя.\n   *\n   * @param {string} userId - ID пользователя, для которого генерируются токены.\n   * @param {Response} res - Объект ответа Express для установки cookie.\n   * @returns {Promise} - Объект с токенами доступа и обновления.\n   */\n  async generateTokens(userId: string, res: Response): Promise {\n    const accessToken = this.jwt.signJwt(userId, '1d')\n    const refreshToken = this.jwt.signJwt(userId, '7d')\n    await this.refreshService.saveToken(userId, refreshToken)\n\n    res.cookie('refreshToken', refreshToken, {\n      httpOnly: true,\n      secure: false,\n      sameSite: 'lax',\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 дней\n    })\n\n    return { accessToken, refreshToken }\n  }\n\n  /**\n   * Выполняет вход пользователя в систему.\n   *\n   * @param {LoginDto} dto - Данные для входа пользователя.\n   * @param {Response} res - Объект ответа Express для установки cookie.\n   * @returns {Promise} - Объект с токеном доступа и данными пользователя.\n   * @throws {ApiError} - Если пользователь не найден или пароль неверен.\n   */\n  async login(dto: LoginDto, res: Response): Promise {\n    const user = await this.authRepository.login(dto)\n    if (!user) {\n      throw ApiError.BadRequest(\n        `Пользователь с почтовым индексом ${dto.email} не существует`\n      )\n    }\n\n    const passwordMatched = await argon.verify(user.password, dto.password)\n    if (!passwordMatched) {\n      throw ApiError.UnauthorizedError()\n    }\n\n    const tokens = await this.generateTokens(user.id, res)\n    return {\n      accessToken: tokens.accessToken,\n      user: {\n        id: user.id,\n        full_name: user.full_name,\n        email: user.email,\n        role: user.role,\n      },\n    }\n  }\n\n  /**\n   * Регистрирует нового пользователя.\n   *\n   * @param {RegisterDto} dto - Данные для регистрации пользователя.\n   * @param {Response} res - Объект ответа Express для установки cookie.\n   * @returns {Promise} - Объект с токеном доступа и данными пользователя.\n   * @throws {ApiError} - Если пользователь с таким email уже существует.\n   */\n  async register(dto: RegisterDto, res: Response): Promise {\n    const candidate = await this.authRepository.findEmail(dto.email)\n    if (candidate) {\n      throw ApiError.BadRequest(\n        `Пользователь с почтовым индексом ${candidate.email} уже существует`\n      )\n    }\n\n    dto.password = await argon.hash(dto.password)\n    const user = await this.authRepository.register(dto)\n    const tokens = await this.generateTokens(user.id, res)\n\n    return {\n      accessToken: tokens.accessToken,\n      user: {\n        id: user.id,\n        full_name: user.full_name,\n        email: user.email,\n        role: user.role,\n      },\n    }\n  }\n\n  /**\n   * Обновляет токены доступа для пользователя.\n   *\n   * @param {string} refreshToken - Токен обновления, который передается пользователем.\n   * @param {Response} res - Объект ответа Express для установки cookie.\n   * @returns {Promise} - Объект с новым токеном доступа и данными пользователя.\n   * @throws {ApiError} - Если токен обновления отсутствует или недействителен.\n   */\n  async refresh(refreshToken: string, res: Response): Promise {\n    if (!refreshToken) {\n      throw ApiError.UnauthorizedError()\n    }\n\n    const { data } = this.jwt.verifyJwt(refreshToken) as { data: string }\n    if (!data) {\n      throw ApiError.UnauthorizedError()\n    }\n\n    const tokenData = await this.refreshService.findToken(data)\n    if (!tokenData) {\n      throw ApiError.UnauthorizedError()\n    }\n\n    const user = await this.authRepository.findId(data)\n    const tokens = await this.generateTokens(user.id, res)\n    return {\n      accessToken: tokens.accessToken,\n      user: {\n        id: user.id,\n        full_name: user.full_name,\n        email: user.email,\n        role: user.role,\n      },\n    }\n  }\n\n  /**\n   * Выходит пользователя из системы, удаляя токен обновления.\n   *\n   * @param {string} refreshToken - Токен обновления, который передается пользователем.\n   * @param {Response} res - Объект ответа Express для очистки cookie.\n   * @returns {Promise} - Возвращает true, если выход выполнен успешно.\n   * @throws {ApiError} - Если токен обновления отсутствует или недействителен.\n   */\n  async logout(refreshToken: string, res: Response): Promise {\n    if (!refreshToken) {\n      throw ApiError.UnauthorizedError()\n    }\n\n    const { data } = this.jwt.verifyJwt(refreshToken) as { data: string }\n    if (!data) {\n      throw ApiError.UnauthorizedError()\n    }\n\n    res.clearCookie('refreshToken', { httpOnly: true, secure: false, sameSite: 'lax' })\n    await this.refreshService.removeToken(data)\n    return true\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Контроллеры\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/auth/auth.controller.ts\n        \n\n            \n                Префикс\n            \n            \n                /api/auth\n            \n\n\n            \n                Описание\n            \n            \n                Контроллер для аутентификации пользователей (AuthenticationController).\nЭтот контроллер обрабатывает запросы на вход, регистрацию, обновление и выход.\n\n            \n\n\n\n\n            \n    Индекс\n    \n        \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                logout\n                            \n                            \n                                    \n                                    \n                                    Async\n                                refresh\n                            \n                            \n                                    \n                                    \n                                    Async\n                                signIn\n                            \n                            \n                                    \n                                    \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Выйти'})@Get('logout')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/auth/auth.controller.ts:96\n                        \n                    \n\n\n            \n                \n                        Обрабатывает запрос на выход пользователя из системы.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nОбъект запроса Express для получения cookie.\n\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nОбъект ответа Express для очистки cookie.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \nВозвращает true, если выход выполнен успешно.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Обновление'})@Get('refresh')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/auth/auth.controller.ts:77\n                        \n                    \n\n\n            \n                \n                        Обрабатывает запрос на обновление токенов.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nОбъект запроса Express для получения cookie.\n\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nОбъект ответа Express для установки cookie.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \nОбъект с новым токеном доступа и данными пользователя.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(dto: LoginDto, res: Response)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Войти'})@Post('login')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/auth/auth.controller.ts:41\n                        \n                    \n\n\n            \n                \n                        Обрабатывает запрос на вход пользователя.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nДанные для входа пользователя.\n\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nОбъект ответа Express для установки cookie.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \nОбъект с токеном доступа и данными пользователя.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUp(dto: RegisterDto, res: Response)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Регистрация'})@Post('register')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/auth/auth.controller.ts:59\n                        \n                    \n\n\n            \n                \n                        Обрабатывает запрос на регистрацию нового пользователя.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nДанные для регистрации пользователя.\n\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nОбъект ответа Express для установки cookie.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \nОбъект с токеном доступа и данными пользователя.\n\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiOperation, ApiTags } from '@nestjs/swagger'\nimport { Response, Request } from 'express'\nimport {\n  Body,\n  Controller,\n  Get,\n  HttpException,\n  HttpStatus,\n  Post,\n  Req,\n  Res,\n} from '@nestjs/common'\nimport { ResponseBuildService } from '../../utils/resBuild/resBuild.service'\nimport { AuthService, ILogin } from './service/auth.service'\nimport { LoginDto } from './dto/login.dto'\nimport { RegisterDto } from './dto/register.dto'\n\n/**\n * Контроллер для аутентификации пользователей (AuthenticationController).\n *\n * Этот контроллер обрабатывает запросы на вход, регистрацию, обновление и выход.\n */\n@ApiTags('Авторизация')\n@Controller('/api/auth')\nexport class AuthenticationController {\n  constructor(\n    private authService: AuthService,\n    private responseBuilder: ResponseBuildService\n  ) {}\n\n  /**\n   * Обрабатывает запрос на вход пользователя.\n   *\n   * @param {LoginDto} dto - Данные для входа пользователя.\n   * @param {Response} res - Объект ответа Express для установки cookie.\n   * @returns {Promise} - Объект с токеном доступа и данными пользователя.\n   * @throws {HttpException} - Если произошла ошибка при входе.\n   */\n  @ApiOperation({ summary: 'Войти' })\n  @Post('login')\n  async signIn(@Body() dto: LoginDto, @Res({ passthrough: true }) res: Response) {\n    try {\n      return await this.authService.login(dto, res)\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n\n  /**\n   * Обрабатывает запрос на регистрацию нового пользователя.\n   *\n   * @param {RegisterDto} dto - Данные для регистрации пользователя.\n   * @param {Response} res - Объект ответа Express для установки cookie.\n   * @returns {Promise} - Объект с токеном доступа и данными пользователя.\n   * @throws {HttpException} - Если произошла ошибка при регистрации.\n   */\n  @ApiOperation({ summary: 'Регистрация' })\n  @Post('register')\n  async signUp(@Body() dto: RegisterDto, @Res({ passthrough: true }) res: Response) {\n    try {\n      return await this.authService.register(dto, res)\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n\n  /**\n   * Обрабатывает запрос на обновление токенов.\n   *\n   * @param {Request} req - Объект запроса Express для получения cookie.\n   * @param {Response} res - Объект ответа Express для установки cookie.\n   * @returns {Promise} - Объект с новым токеном доступа и данными пользователя.\n   * @throws {HttpException} - Если произошла ошибка при обновлении токенов.\n   */\n  @ApiOperation({ summary: 'Обновление' })\n  @Get('refresh')\n  async refresh(@Req() req: Request, @Res({ passthrough: true }) res: Response) {\n    try {\n      const refreshToken = req.cookies.refreshToken\n      return await this.authService.refresh(refreshToken, res)\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n\n  /**\n   * Обрабатывает запрос на выход пользователя из системы.\n   *\n   * @param {Request} req - Объект запроса Express для получения cookie.\n   * @param {Response} res - Объект ответа Express для очистки cookie.\n   * @returns {Promise} - Возвращает true, если выход выполнен успешно.\n   * @throws {HttpException} - Если произошла ошибка при выходе.\n   */\n  @ApiOperation({ summary: 'Выйти' })\n  @Get('logout')\n  async logout(@Req() req: Request, @Res({ passthrough: true }) res: Response) {\n    try {\n      const refreshToken = req.cookies.refreshToken\n      return await this.authService.logout(refreshToken, res)\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"controllers/CandidateInterviewController.html":{"url":"controllers/CandidateInterviewController.html","title":"controller - CandidateInterviewController","body":"\n                   \n\n\n\n\n\n\n  Контроллеры\n  CandidateInterviewController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/сandidateInterview/сandidateInterview.controller.ts\n        \n\n            \n                Префикс\n            \n            \n                candidateInterview\n            \n\n\n\n\n\n\n            \n    Индекс\n    \n        \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateCandidateInterviewDto)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Создать нового кандидата на собеседование'})@Post()\n                \n            \n\n                    \n                        \n                            Определен в src/crud/сandidateInterview/сandidateInterview.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateCandidateInterviewDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Удалить кандидата на собеседование'})@Delete(':id')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/сandidateInterview/сandidateInterview.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page?: number, limit?: number, search?: string)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Получить список всех кандидатов на собеседование'})@Get()\n                \n            \n\n                    \n                        \n                            Определен в src/crud/сandidateInterview/сandidateInterview.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                        \n                                        \n                                                search\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Получить информацию о кандидате на собеседование'})@Get(':id')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/сandidateInterview/сandidateInterview.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, dto: CreateCandidateInterviewDto)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Обновить данные кандидата на собеседование'})@Patch(':id')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/сandidateInterview/сandidateInterview.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateCandidateInterviewDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpException,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n} from '@nestjs/common'\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger'\nimport { CandidateInterviewService } from './сandidateInterview.service'\nimport { CreateCandidateInterviewDto } from './dto/create-сandidateInterview.dto'\nimport { JwtAuthGuard } from '../../utils/jwtAuthGuard/jwtAuthGuard'\nimport { RolesGuard } from '../../utils/roleGuard/roles.guard'\nimport { Roles } from '../../utils/roleGuard/role-auth.decorator'\n\n@UseGuards(JwtAuthGuard, RolesGuard)\n@ApiBearerAuth()\n@Roles(['HR', 'INTERVIEWER'])\n@ApiTags('Кандидаты на собеседование')\n@Controller('candidateInterview')\nexport class CandidateInterviewController {\n  constructor(private readonly candidateInterviewService: CandidateInterviewService) {}\n\n  @ApiOperation({ summary: 'Создать нового кандидата на собеседование' })\n  @Post()\n  async create(@Body() dto: CreateCandidateInterviewDto) {\n    try {\n      return await this.candidateInterviewService.create(dto)\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n\n  @ApiOperation({ summary: 'Обновить данные кандидата на собеседование' })\n  @Patch(':id')\n  async update(@Param('id') id: string, @Body() dto: CreateCandidateInterviewDto) {\n    try {\n      return await this.candidateInterviewService.update(id, dto)\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n\n  @ApiOperation({ summary: 'Удалить кандидата на собеседование' })\n  @Delete(':id')\n  async delete(@Param('id') id: string) {\n    try {\n      return await this.candidateInterviewService.delete(id)\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n\n  @ApiOperation({ summary: 'Получить список всех кандидатов на собеседование' })\n  @Get()\n  async findAll(\n    @Query('page') page?: number,\n    @Query('limit') limit?: number,\n    @Query('search') search?: string\n  ) {\n    try {\n      return await this.candidateInterviewService.findAll(page, limit, search)\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n\n  @ApiOperation({ summary: 'Получить информацию о кандидате на собеседование' })\n  @Get(':id')\n  async findById(@Param('id') id: string) {\n    try {\n      return await this.candidateInterviewService.findById(id)\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"modules/CandidateInterviewModule.html":{"url":"modules/CandidateInterviewModule.html","title":"module - CandidateInterviewModule","body":"\n                   \n\n\n\n\n    Модули\n    CandidateInterviewModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CandidateInterviewModule\n\n\n\ncluster_CandidateInterviewModule_providers\n\n\n\n\nCandidateInterviewRepository\n\nCandidateInterviewRepository\n\n\n\nCandidateInterviewModule\n\nCandidateInterviewModule\n\nCandidateInterviewModule -->\n\nCandidateInterviewRepository->CandidateInterviewModule\n\n\n\n\n\nCandidateInterviewService\n\nCandidateInterviewService\n\nCandidateInterviewModule -->\n\nCandidateInterviewService->CandidateInterviewModule\n\n\n\n\n\n\n    \n    \n    \n        Приблизить\n        Сброс\n        Отдалить\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            Файл\n        \n        \n            src/crud/сandidateInterview/сandidateInterview.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Провайдеры\n                    \n                        \n                            CandidateInterviewRepository\n                        \n                        \n                            CandidateInterviewService\n                        \n                    \n                \n                \n                    Контроллеры\n                    \n                        \n                            CandidateInterviewController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { CandidateInterviewController } from './сandidateInterview.controller'\nimport { CandidateInterviewService } from './сandidateInterview.service'\nimport { CandidateInterviewRepository } from './сandidateInterview.repository'\n\n@Module({\n  controllers: [CandidateInterviewController],\n  providers: [CandidateInterviewService, CandidateInterviewRepository],\n})\nexport class CandidateInterviewModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"injectables/CandidateInterviewRepository.html":{"url":"injectables/CandidateInterviewRepository.html","title":"injectable - CandidateInterviewRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Внедрения\n  CandidateInterviewRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/сandidateInterview/сandidateInterview.repository.ts\n        \n\n\n\n\n\n            \n    Индекс\n    \n        \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Конструктор\n        \n            \n                \n                    \nconstructor(postgres: PostgresService)\n                    \n                \n                        \n                            \n                                Определен в src/crud/сandidateInterview/сandidateInterview.repository.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Параметры :\n                                    \n                                        \n                                            \n                                                Имя\n                                                    Тип\n                                                Опциональный\n                                            \n                                        \n                                        \n                                                \n                                                        postgres\n                                                  \n                                                        \n                                                                        PostgresService\n                                                        \n                                                  \n                                                    \n                                                            Нет\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateCandidateInterviewDto)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/сandidateInterview/сandidateInterview.repository.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateCandidateInterviewDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/сandidateInterview/сandidateInterview.repository.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number, limit: number, searchTerm?: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/сandidateInterview/сandidateInterview.repository.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Значение по умолчанию\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                        \n                                                searchTerm\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Да\n                                            \n\n                                            \n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/сandidateInterview/сandidateInterview.repository.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, dto: CreateCandidateInterviewDto)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/сandidateInterview/сandidateInterview.repository.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateCandidateInterviewDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { PostgresService } from '../../db/postgres/postgres.service'\nimport { CreateCandidateInterviewDto } from './dto/create-сandidateInterview.dto'\nimport { Prisma } from '@prisma/client'\n\n@Injectable()\nexport class CandidateInterviewRepository {\n  constructor(private readonly postgres: PostgresService) {}\n\n  async create(dto: CreateCandidateInterviewDto) {\n    return this.postgres.candidateInterview.create({\n      data: {\n        ...dto,\n      },\n    })\n  }\n\n  async update(id: string, dto: CreateCandidateInterviewDto) {\n    return this.postgres.candidateInterview.update({\n      where: { id },\n      data: {\n        ...dto,\n      },\n    })\n  }\n\n  async delete(id: string) {\n    return this.postgres.candidateInterview.delete({\n      where: { id },\n    })\n  }\n\n  async findAll(page: number = 1, limit: number = 10, searchTerm?: string) {\n    const skip = (page - 1) * limit\n    const where: Prisma.CandidateInterviewWhereInput = searchTerm\n      ? {\n          OR: [\n            { fullName: { contains: searchTerm, mode: 'insensitive' } },\n            { email: { contains: searchTerm, mode: 'insensitive' } },\n            { position: { contains: searchTerm, mode: 'insensitive' } },\n          ],\n        }\n      : {}\n\n    const [items, total] = await this.postgres.$transaction([\n      this.postgres.candidateInterview.findMany({\n        where,\n        skip,\n        take: limit,\n      }),\n      this.postgres.candidateInterview.count({ where }),\n    ])\n\n    return {\n      items,\n      total,\n      page,\n      limit,\n    }\n  }\n\n  async findById(id: string) {\n    return this.postgres.candidateInterview.findUnique({\n      where: { id },\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"injectables/CandidateInterviewService.html":{"url":"injectables/CandidateInterviewService.html","title":"injectable - CandidateInterviewService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Внедрения\n  CandidateInterviewService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/сandidateInterview/сandidateInterview.service.ts\n        \n\n\n\n\n\n            \n    Индекс\n    \n        \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Конструктор\n        \n            \n                \n                    \nconstructor(candidateInterviewRepository: CandidateInterviewRepository)\n                    \n                \n                        \n                            \n                                Определен в src/crud/сandidateInterview/сandidateInterview.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Параметры :\n                                    \n                                        \n                                            \n                                                Имя\n                                                    Тип\n                                                Опциональный\n                                            \n                                        \n                                        \n                                                \n                                                        candidateInterviewRepository\n                                                  \n                                                        \n                                                                        CandidateInterviewRepository\n                                                        \n                                                  \n                                                    \n                                                            Нет\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateCandidateInterviewDto)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/сandidateInterview/сandidateInterview.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateCandidateInterviewDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/сandidateInterview/сandidateInterview.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page?: number, limit?: number, search?: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/сandidateInterview/сandidateInterview.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                        \n                                        \n                                                search\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/сandidateInterview/сandidateInterview.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, dto: CreateCandidateInterviewDto)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/сandidateInterview/сandidateInterview.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateCandidateInterviewDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { CandidateInterviewRepository } from './сandidateInterview.repository'\nimport { CreateCandidateInterviewDto } from './dto/create-сandidateInterview.dto'\n\n@Injectable()\nexport class CandidateInterviewService {\n  constructor(\n    private readonly candidateInterviewRepository: CandidateInterviewRepository\n  ) {}\n\n  async create(dto: CreateCandidateInterviewDto) {\n    return await this.candidateInterviewRepository.create(dto)\n  }\n\n  async update(id: string, dto: CreateCandidateInterviewDto) {\n    return await this.candidateInterviewRepository.update(id, dto)\n  }\n\n  async delete(id: string) {\n    return await this.candidateInterviewRepository.delete(id)\n  }\n\n  async findAll(page?: number, limit?: number, search?: string) {\n    return this.candidateInterviewRepository.findAll(page, limit, search)\n  }\n\n  async findById(id: string) {\n    return this.candidateInterviewRepository.findById(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"classes/CreateCandidateInterviewDto.html":{"url":"classes/CreateCandidateInterviewDto.html","title":"class - CreateCandidateInterviewDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Классы\n  CreateCandidateInterviewDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/сandidateInterview/dto/create-сandidateInterview.dto.ts\n        \n\n\n\n\n\n\n            \n    Индекс\n    \n        \n                \n                    \n                        Свойства\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                applicationDate\n                            \n                            \n                                    \n                                    \n                                    Опциональный\n                                comment\n                            \n                            \n                                    \n                                    \n                                    \n                                contactDetails\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                fullName\n                            \n                            \n                                    \n                                    \n                                    \n                                imageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                interviewStage\n                            \n                            \n                                    \n                                    \n                                    \n                                position\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Свойства\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        applicationDate\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         Date\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Дата отклика', type: Date})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/сandidateInterview/dto/create-сandidateInterview.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Опциональный\n                        comment\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Комментарий к карточке кандидата (необязательное поле)', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/сandidateInterview/dto/create-сandidateInterview.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        contactDetails\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Контактные данные кандидата', type: String})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/сandidateInterview/dto/create-сandidateInterview.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Почта кандидата', type: String})@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/сandidateInterview/dto/create-сandidateInterview.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'ФИО кандидата', type: String})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/сandidateInterview/dto/create-сandidateInterview.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Ссылка на картинку пользователя', type: String})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/сandidateInterview/dto/create-сandidateInterview.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        interviewStage\n                        \n                    \n                \n            \n                \n                    \n                        Тип :     InterviewStage\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Этап собеседования', type: String})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/сandidateInterview/dto/create-сandidateInterview.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Должность по вакансии', type: String})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/сandidateInterview/dto/create-сandidateInterview.dto.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'\nimport { InterviewStage } from '@prisma/client'\nimport { IsNotEmpty, IsString, IsEmail, IsDate } from 'class-validator'\n\nexport class CreateCandidateInterviewDto {\n  @ApiProperty({\n    description: 'ФИО кандидата',\n    type: String,\n  })\n  @IsNotEmpty()\n  @IsString()\n  fullName: string\n\n  @ApiProperty({\n    description: 'Почта кандидата',\n    type: String,\n  })\n  @IsNotEmpty()\n  @IsEmail()\n  email: string\n\n  @ApiProperty({\n    description: 'Контактные данные кандидата',\n    type: String,\n  })\n  @IsNotEmpty()\n  @IsString()\n  contactDetails: string\n\n  @ApiProperty({\n    description: 'Ссылка на картинку пользователя',\n    type: String,\n  })\n  @IsNotEmpty()\n  @IsString()\n  imageUrl: string\n\n  @ApiProperty({\n    description: 'Должность по вакансии',\n    type: String,\n  })\n  @IsNotEmpty()\n  @IsString()\n  position: string\n\n  @ApiProperty({\n    description: 'Дата отклика',\n    type: Date,\n  })\n  @IsNotEmpty()\n  applicationDate: Date\n\n  @ApiProperty({\n    description: 'Этап собеседования',\n    type: String,\n  })\n  @IsNotEmpty()\n  @IsString()\n  interviewStage: InterviewStage\n\n  @ApiProperty({\n    description: 'Комментарий к карточке кандидата (необязательное поле)',\n    type: String,\n  })\n  @IsString()\n  comment?: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"classes/CreateFinalTestDto.html":{"url":"classes/CreateFinalTestDto.html","title":"class - CreateFinalTestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Классы\n  CreateFinalTestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/finalTest/dto/create-final-test.dto.ts\n        \n\n\n            \n                Описание\n            \n            \n                DTO для создания финального теста (CreateFinalTestDto).\nЭтот класс используется для валидации данных, передаваемых при создании финального теста.\n\n            \n\n\n\n\n            \n    Индекс\n    \n        \n                \n                    \n                        Свойства\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    Опциональный\n                                excludeTaskIds\n                            \n                            \n                                    \n                                    \n                                questionGroupId\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Свойства\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Описание теста'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/finalTest/dto/create-final-test.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Опциональный\n                        excludeTaskIds\n                        \n                    \n                \n            \n                \n                    \n                        Тип :     string[]\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Список исключаемых вопросов IDs'})\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/finalTest/dto/create-final-test.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        questionGroupId\n                        \n                    \n                \n            \n                \n                    \n                        Тип :     string[]\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Список групп вопросов IDs'})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/finalTest/dto/create-final-test.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Заголовок теста'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/finalTest/dto/create-final-test.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'\nimport { IsNotEmpty, IsString } from 'class-validator'\n\n/**\n * DTO для создания финального теста (CreateFinalTestDto).\n *\n * Этот класс используется для валидации данных, передаваемых при создании финального теста.\n */\nexport class CreateFinalTestDto {\n  @ApiProperty({ description: 'Заголовок теста' })\n  @IsNotEmpty()\n  @IsString()\n  title: string // Заголовок теста\n\n  @ApiProperty({ description: 'Описание теста' })\n  @IsNotEmpty()\n  @IsString()\n  description: string // Описание теста\n\n  @ApiProperty({ description: 'Список групп вопросов IDs' })\n  @IsNotEmpty()\n  questionGroupId: string[] // Список идентификаторов групп вопросов\n\n  @ApiProperty({ description: 'Список исключаемых вопросов IDs' })\n  excludeTaskIds?: string[] // Список идентификаторов исключаемых вопросов (необязательный)\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"classes/CreateInterviewDto.html":{"url":"classes/CreateInterviewDto.html","title":"class - CreateInterviewDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Классы\n  CreateInterviewDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/interview/dto/create-interview.dto.ts\n        \n\n\n            \n                Описание\n            \n            \n                DTO для создания собеседования.\n\n            \n\n\n\n\n            \n    Индекс\n    \n        \n                \n                    \n                        Свойства\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                candidateFullName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Опциональный\n                                candidateImageUrl\n                            \n                            \n                                    \n                                    \n                                duration\n                            \n                            \n                                    \n                                    \n                                    \n                                    Опциональный\n                                finalComment\n                            \n                            \n                                    \n                                    \n                                interviewDateTime\n                            \n                            \n                                    \n                                    \n                                participantIds\n                            \n                            \n                                    \n                                    \n                                    \n                                    Опциональный\n                                reportLink\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                taskIds\n                            \n                            \n                                    \n                                    \n                                testIds\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Свойства\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        candidateFullName\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'ФИО кандидата'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/interview/dto/create-interview.dto.ts:39\n                        \n                    \n\n            \n                \n                    ФИО кандидата.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Опциональный\n                        candidateImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Ссылка на картинку кандидата'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/interview/dto/create-interview.dto.ts:31\n                        \n                    \n\n            \n                \n                    Ссылка на картинку кандидата.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         number\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Длительность собеседования в минутах'})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/interview/dto/create-interview.dto.ts:53\n                        \n                    \n\n            \n                \n                    Длительность собеседования в минутах.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Опциональный\n                        finalComment\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Итоговый комментарий к собеседованию'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/interview/dto/create-interview.dto.ts:61\n                        \n                    \n\n            \n                \n                    Итоговый комментарий к собеседованию.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        interviewDateTime\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         Date\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Дата и время проведения собеседования'})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/interview/dto/create-interview.dto.ts:46\n                        \n                    \n\n            \n                \n                    Дата и время проведения собеседования.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        participantIds\n                        \n                    \n                \n            \n                \n                    \n                        Тип :     string[]\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Список участников собеседования'})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/interview/dto/create-interview.dto.ts:76\n                        \n                    \n\n            \n                \n                    Список участников собеседования.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Опциональный\n                        reportLink\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Ссылка на итоговый отчет'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/interview/dto/create-interview.dto.ts:69\n                        \n                    \n\n            \n                \n                    Ссылка на итоговый отчет.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Тип :     InterviewStage\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Статус собеседования'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/interview/dto/create-interview.dto.ts:23\n                        \n                    \n\n            \n                \n                    Статус собеседования.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        taskIds\n                        \n                    \n                \n            \n                \n                    \n                        Тип :     string[]\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Список задач'})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/interview/dto/create-interview.dto.ts:90\n                        \n                    \n\n            \n                \n                    Список задач.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        testIds\n                        \n                    \n                \n            \n                \n                    \n                        Тип :     string[]\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Список тестов'})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/interview/dto/create-interview.dto.ts:83\n                        \n                    \n\n            \n                \n                    Список тестов.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Название собеседования'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/interview/dto/create-interview.dto.ts:15\n                        \n                    \n\n            \n                \n                    Название собеседования.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'\nimport { InterviewStage } from '@prisma/client'\nimport { IsNotEmpty, IsString, IsOptional, IsArray } from 'class-validator'\n\n/**\n * DTO для создания собеседования.\n */\nexport class CreateInterviewDto {\n  /**\n   * Название собеседования.\n   */\n  @ApiProperty({ description: 'Название собеседования' })\n  @IsNotEmpty()\n  @IsString()\n  title: string\n\n  /**\n   * Статус собеседования.\n   */\n  @ApiProperty({ description: 'Статус собеседования' })\n  @IsNotEmpty()\n  @IsString()\n  status: InterviewStage\n\n  /**\n   * Ссылка на картинку кандидата.\n   */\n  @ApiProperty({ description: 'Ссылка на картинку кандидата' })\n  @IsOptional()\n  @IsString()\n  candidateImageUrl?: string\n\n  /**\n   * ФИО кандидата.\n   */\n  @ApiProperty({ description: 'ФИО кандидата' })\n  @IsNotEmpty()\n  @IsString()\n  candidateFullName: string\n\n  /**\n   * Дата и время проведения собеседования.\n   */\n  @ApiProperty({ description: 'Дата и время проведения собеседования' })\n  @IsNotEmpty()\n  interviewDateTime: Date\n\n  /**\n   * Длительность собеседования в минутах.\n   */\n  @ApiProperty({ description: 'Длительность собеседования в минутах' })\n  @IsNotEmpty()\n  duration: number\n\n  /**\n   * Итоговый комментарий к собеседованию.\n   */\n  @ApiProperty({ description: 'Итоговый комментарий к собеседованию' })\n  @IsOptional()\n  @IsString()\n  finalComment?: string\n\n  /**\n   * Ссылка на итоговый отчет.\n   */\n  @ApiProperty({ description: 'Ссылка на итоговый отчет' })\n  @IsOptional()\n  @IsString()\n  reportLink?: string\n\n  /**\n   * Список участников собеседования.\n   */\n  @ApiProperty({ description: 'Список участников собеседования' })\n  @IsArray()\n  participantIds: string[]\n\n  /**\n   * Список тестов.\n   */\n  @ApiProperty({ description: 'Список тестов' })\n  @IsArray()\n  testIds: string[]\n\n  /**\n   * Список задач.\n   */\n  @ApiProperty({ description: 'Список задач' })\n  @IsArray()\n  taskIds: string[]\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"classes/CreateQuestionWithGroupDto.html":{"url":"classes/CreateQuestionWithGroupDto.html","title":"class - CreateQuestionWithGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Классы\n  CreateQuestionWithGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/question/dto/create-question.dto.ts\n        \n\n\n            \n                Описание\n            \n            \n                DTO для создания группы вопросов.\n\n            \n\n\n\n\n            \n    Индекс\n    \n        \n                \n                    \n                        Свойства\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                author\n                            \n                            \n                                    \n                                    \n                                    \n                                categoryName\n                            \n                            \n                                    \n                                    \n                                    \n                                questions\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                            \n                                    \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Свойства\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Автор группы вопросов'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/question/dto/create-question.dto.ts:59\n                        \n                    \n\n            \n                \n                    Автор группы вопросов.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        categoryName\n                        \n                    \n                \n            \n                \n                    \n                        Тип :     Category\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Категория группы вопросов'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/question/dto/create-question.dto.ts:75\n                        \n                    \n\n            \n                \n                    Категория группы вопросов.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        questions\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         QuestionDto[]\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({type: undefined, description: 'Список вопросов в группе'})@IsArray()@ArrayNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/question/dto/create-question.dto.ts:83\n                        \n                    \n\n            \n                \n                    Список вопросов в группе.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Название группы вопросов'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/question/dto/create-question.dto.ts:51\n                        \n                    \n\n            \n                \n                    Название группы вопросов.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'ID пользователя, создающего группу вопросов'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/question/dto/create-question.dto.ts:67\n                        \n                    \n\n            \n                \n                    ID пользователя, создающего группу вопросов.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'\nimport { IsNotEmpty, IsString, IsArray, ArrayNotEmpty } from 'class-validator'\nimport { Category } from '@prisma/client'\n\n/**\n * DTO для вопроса.\n */\nclass QuestionDto {\n  /**\n   * Уровень разработчика.\n   */\n  @ApiProperty({ description: 'Уровень разработчика' })\n  @IsNotEmpty()\n  @IsString()\n  developerLevel: string\n\n  /**\n   * Текст вопроса.\n   */\n  @ApiProperty({ description: 'Текст вопроса' })\n  @IsNotEmpty()\n  @IsString()\n  questionText: string\n\n  /**\n   * Правильный ответ.\n   */\n  @ApiProperty({ description: 'Правильный ответ' })\n  @IsNotEmpty()\n  @IsString()\n  correctAnswer: string\n\n  /**\n   * Комментарий к вопросу.\n   */\n  @ApiProperty({ description: 'Комментарий' })\n  @IsString()\n  comment?: string\n}\n\n/**\n * DTO для создания группы вопросов.\n */\nexport class CreateQuestionWithGroupDto {\n  /**\n   * Название группы вопросов.\n   */\n  @ApiProperty({ description: 'Название группы вопросов' })\n  @IsNotEmpty()\n  @IsString()\n  title: string\n\n  /**\n   * Автор группы вопросов.\n   */\n  @ApiProperty({ description: 'Автор группы вопросов' })\n  @IsNotEmpty()\n  @IsString()\n  author: string\n\n  /**\n   * ID пользователя, создающего группу вопросов.\n   */\n  @ApiProperty({ description: 'ID пользователя, создающего группу вопросов' })\n  @IsNotEmpty()\n  @IsString()\n  userId: string // Добавлено поле userId\n\n  /**\n   * Категория группы вопросов.\n   */\n  @ApiProperty({ description: 'Категория группы вопросов' })\n  @IsNotEmpty()\n  @IsString()\n  categoryName: Category // Добавлено поле categoryName\n\n  /**\n   * Список вопросов в группе.\n   */\n  @ApiProperty({ type: [QuestionDto], description: 'Список вопросов в группе' })\n  @IsArray()\n  @ArrayNotEmpty()\n  questions: QuestionDto[]\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"classes/CreateSessionDto.html":{"url":"classes/CreateSessionDto.html","title":"class - CreateSessionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Классы\n  CreateSessionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/session/dto/create-session.dto.ts\n        \n\n\n\n\n\n\n            \n    Индекс\n    \n        \n                \n                    \n                        Свойства\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                duration\n                            \n                            \n                                    \n                                    \n                                participants\n                            \n                            \n                                    \n                                    \n                                    \n                                recruiter_id\n                            \n                            \n                                    \n                                    \n                                    \n                                startTime\n                            \n                            \n                                    \n                                    \n                                tasks\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Свойства\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         number\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Продолжительность сессии в минутах', type: Number})@IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/session/dto/create-session.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        participants\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         ParticipantDto[]\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Массив участников (кандидаты и интервьюеры)', type: () => })@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/session/dto/create-session.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        recruiter_id\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'ID рекрутера, создающего сессию', type: String})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/session/dto/create-session.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        startTime\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Время начала сессии в формате ISO 8601', type: String})@IsNotEmpty()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/session/dto/create-session.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tasks\n                        \n                    \n                \n            \n                \n                    \n                        Тип :     string[]\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Массив ID задач, связанных с сессией', type: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/session/dto/create-session.dto.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Название сессии', type: String})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/session/dto/create-session.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsDateString,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n  IsArray,\n  IsEmail,\n  IsBoolean,\n  IsOptional,\n} from 'class-validator'\nimport { ApiProperty } from '@nestjs/swagger'\n\nexport class CreateSessionDto {\n  @ApiProperty({\n    description: 'ID рекрутера, создающего сессию',\n    type: String,\n  })\n  @IsNotEmpty()\n  @IsString()\n  recruiter_id: string\n\n  @ApiProperty({\n    description: 'Название сессии',\n    type: String,\n  })\n  @IsNotEmpty()\n  @IsString()\n  title: string\n\n  @ApiProperty({\n    description: 'Время начала сессии в формате ISO 8601',\n    type: String,\n  })\n  @IsNotEmpty()\n  @IsDateString()\n  startTime: string\n\n  @ApiProperty({\n    description: 'Продолжительность сессии в минутах',\n    type: Number,\n  })\n  @IsNotEmpty()\n  @IsNumber()\n  duration: number\n\n  @ApiProperty({\n    description: 'Массив участников (кандидаты и интервьюеры)',\n    type: () => [ParticipantDto],\n  })\n  @IsArray()\n  participants: ParticipantDto[]\n\n  @ApiProperty({\n    description: 'Массив ID задач, связанных с сессией',\n    type: [String],\n  })\n  @IsArray()\n  tasks: string[]\n}\n\nexport class ParticipantDto {\n  @ApiProperty({\n    description: 'Email участника',\n    type: String,\n  })\n  @IsNotEmpty()\n  @IsEmail()\n  email: string\n\n  @ApiProperty({\n    description: 'Полное имя участника',\n    type: String,\n  })\n  @IsNotEmpty()\n  @IsString()\n  full_name: string\n\n  @ApiProperty({\n    description: 'Активна ли сессия',\n    type: Boolean,\n  })\n  @IsOptional()\n  @IsBoolean()\n  isActive?: boolean\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"classes/CreateTaskDto.html":{"url":"classes/CreateTaskDto.html","title":"class - CreateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Классы\n  CreateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/task/dto/create-task.dto.ts\n        \n\n\n\n\n\n\n            \n    Индекс\n    \n        \n                \n                    \n                        Свойства\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                categoryName\n                            \n                            \n                                    \n                                    \n                                correctAnswer\n                            \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                difficulty\n                            \n                            \n                                    \n                                    \n                                inputData\n                            \n                            \n                                    \n                                    \n                                    \n                                sourceCode\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                            \n                                    \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Свойства\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        categoryName\n                        \n                    \n                \n            \n                \n                    \n                        Тип :     Category\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Категория задачи', type: String})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/task/dto/create-task.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        correctAnswer\n                        \n                    \n                \n            \n                \n                    \n                        Тип :     Record\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Правильный ответ задачи в формате JSON', type: Object})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/task/dto/create-task.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Описание задачи', type: String})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/task/dto/create-task.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        difficulty\n                        \n                    \n                \n            \n                \n                    \n                        Тип :     Difficulty\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Уровень сложности задачи', enum: Difficulty})@IsNotEmpty()@IsEnum(Difficulty)\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/task/dto/create-task.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        inputData\n                        \n                    \n                \n            \n                \n                    \n                        Тип :     Record\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Исходные данные для кода в формате JSON'})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/task/dto/create-task.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        sourceCode\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Исходный код'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/task/dto/create-task.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Название задачи', type: String})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/task/dto/create-task.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Id пользователя', type: String})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/task/dto/create-task.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'\nimport { IsNotEmpty, IsString, IsEnum } from 'class-validator'\nimport { Difficulty, Category } from '@prisma/client'\n\nexport class CreateTaskDto {\n  @ApiProperty({\n    description: 'Название задачи',\n    type: String,\n  })\n  @IsNotEmpty()\n  @IsString()\n  title: string\n\n  @ApiProperty({\n    description: 'Id пользователя',\n    type: String,\n  })\n  @IsNotEmpty()\n  @IsString()\n  userId: string\n\n  @ApiProperty({\n    description: 'Категория задачи',\n    type: String,\n  })\n  @IsNotEmpty()\n  @IsString()\n  categoryName: Category\n\n  @ApiProperty({ description: 'Исходные данные для кода в формате JSON' })\n  @IsNotEmpty()\n  inputData: Record\n\n  @ApiProperty({ description: 'Исходный код' })\n  @IsNotEmpty()\n  @IsString()\n  sourceCode: string\n\n  @ApiProperty({\n    description: 'Правильный ответ задачи в формате JSON',\n    type: Object,\n  })\n  @IsNotEmpty()\n  correctAnswer: Record\n\n  @ApiProperty({\n    description: 'Описание задачи',\n    type: String,\n  })\n  @IsNotEmpty()\n  @IsString()\n  description: string\n\n  @ApiProperty({\n    description: 'Уровень сложности задачи',\n    enum: Difficulty,\n  })\n  @IsNotEmpty()\n  @IsEnum(Difficulty)\n  difficulty: Difficulty\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Модули\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Приблизить\n        Сброс\n        Отдалить\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            Файл\n        \n        \n            src/crud/mail/email.module.ts\n        \n\n\n\n        \n            Описание\n        \n        \n            Модуль для работы с электронной почтой.\n\n        \n\n\n        \n            \n                \n                    Провайдеры\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Экспорт\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { EmailService } from './email.service'\n\n/**\n * Модуль для работы с электронной почтой.\n */\n@Module({\n  providers: [EmailService],\n  exports: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Внедрения\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/mail/email.service.ts\n        \n\n\n            \n                Описание\n            \n            \n                Сервис для отправки электронных писем.\n\n            \n\n\n\n            \n    Индекс\n    \n        \n                \n                    \n                        Свойства\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                transporter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendSessionInvitation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Конструктор\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Определен в src/crud/mail/email.service.ts:11\n                            \n                        \n\n                \n                    \n                            Конструктор EmailService.\nИнициализирует транспортёр для отправки писем с использованием Nodemailer.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendSessionInvitation\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendSessionInvitation(to: string, sessionTitle: string, link: string, loginInfo: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/mail/email.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Отправить приглашение на сессию.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                to\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Адрес электронной почты получателя.\n\n                                            \n                                        \n                                        \n                                                sessionTitle\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Заголовок сессии.\n\n                                            \n                                        \n                                        \n                                                link\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Ссылка на сессию.\n\n                                            \n                                        \n                                        \n                                                loginInfo\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Информация для входа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     Promise\n\n                        \n                            \n                                Promise\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Свойства\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        transporter\n                        \n                    \n                \n            \n                \n                    \n                        Тип :     nodemailer.Transporter\n\n                    \n                \n                    \n                        \n                                Определен в src/crud/mail/email.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { SentMessageInfo } from 'nodemailer/lib/smtp-transport'\nimport { Injectable } from '@nestjs/common'\nimport * as nodemailer from 'nodemailer'\nimport * as process from 'process'\n\n/**\n * Сервис для отправки электронных писем.\n */\n@Injectable()\nexport class EmailService {\n  private transporter: nodemailer.Transporter\n\n  /**\n   * Конструктор EmailService.\n   * Инициализирует транспортёр для отправки писем с использованием Nodemailer.\n   */\n  constructor() {\n    this.transporter = nodemailer.createTransport({\n      service: 'gmail',\n      auth: {\n        user: process.env.SMTP_USER,\n        pass: process.env.SMTP_PASSWORD,\n      },\n    })\n  }\n\n  /**\n   * Отправить приглашение на сессию.\n   * @param to Адрес электронной почты получателя.\n   * @param sessionTitle Заголовок сессии.\n   * @param link Ссылка на сессию.\n   * @param loginInfo Информация для входа.\n   * @returns Promise\n   */\n  async sendSessionInvitation(\n    to: string,\n    sessionTitle: string,\n    link: string,\n    loginInfo: string\n  ): Promise {\n    const mailOptions = {\n      from: process.env.SMTP_USER,\n      to,\n      subject: `Приглашение на сессию: ${sessionTitle}`,\n      html: `\n        Вы приглашены на сессию: ${sessionTitle}\n        Ссылка на сессию: ${link}\n        ${loginInfo}\n      `,\n    }\n\n    await this.transporter.sendMail(mailOptions)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"classes/FilterSessionsDto.html":{"url":"classes/FilterSessionsDto.html","title":"class - FilterSessionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Классы\n  FilterSessionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/session/dto/filter-sessions.dto.ts\n        \n\n\n\n\n\n\n            \n    Индекс\n    \n        \n                \n                    \n                        Свойства\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Опциональный\n                                endDate\n                            \n                            \n                                    \n                                    Опциональный\n                                page\n                            \n                            \n                                    \n                                    Опциональный\n                                pageSize\n                            \n                            \n                                    \n                                    Опциональный\n                                startDate\n                            \n                            \n                                    \n                                    \n                                    Опциональный\n                                status\n                            \n                            \n                                    \n                                    \n                                    Опциональный\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Свойства\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Опциональный\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         Date\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/session/dto/filter-sessions.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Опциональный\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         number\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/session/dto/filter-sessions.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Опциональный\n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         number\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/session/dto/filter-sessions.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Опциональный\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         Date\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/session/dto/filter-sessions.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Опциональный\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Тип :     InterviewStatus\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @IsOptional()@IsEnum(InterviewStatus)\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/session/dto/filter-sessions.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Опциональный\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/session/dto/filter-sessions.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsOptional, IsString } from 'class-validator'\nimport { InterviewStatus } from '@prisma/client'\n\nexport class FilterSessionsDto {\n  @IsOptional()\n  @IsString()\n  title?: string\n\n  @IsOptional()\n  startDate?: Date\n\n  @IsOptional()\n  endDate?: Date\n\n  @IsOptional()\n  @IsEnum(InterviewStatus)\n  status?: InterviewStatus\n\n  @IsOptional()\n  page?: number\n\n  @IsOptional()\n  pageSize?: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"controllers/FinalTestController.html":{"url":"controllers/FinalTestController.html","title":"controller - FinalTestController","body":"\n                   \n\n\n\n\n\n\n  Контроллеры\n  FinalTestController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/finalTest/finalTest.controller.ts\n        \n\n            \n                Префикс\n            \n            \n                finalTest\n            \n\n\n            \n                Описание\n            \n            \n                Контроллер для управления финальными тестами (FinalTestController).\nЭтот контроллер обрабатывает запросы на создание, обновление, удаление и получение тестов.\n\n            \n\n\n\n\n            \n    Индекс\n    \n        \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateFinalTestDto)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Создать новый тест'})@Post()\n                \n            \n\n                    \n                        \n                            Определен в src/crud/finalTest/finalTest.controller.ts:42\n                        \n                    \n\n\n            \n                \n                        Создает новый финальный тест.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateFinalTestDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nДанные для создания теста.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \nВозвращает созданный тест.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Удалить тест'})@Delete(':id')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/finalTest/finalTest.controller.ts:77\n                        \n                    \n\n\n            \n                \n                        Удаляет финальный тест.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nID теста для удаления.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \nВозвращает результат удаления.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page?: number, search?: string, limit?: number)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Получить список всех тестов'})@Get()\n                \n            \n\n                    \n                        \n                            Определен в src/crud/finalTest/finalTest.controller.ts:96\n                        \n                    \n\n\n            \n                \n                        Получает список всех финальных тестов.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                            \n                                                    \nНомер страницы для пагинации (по умолчанию 1).\n\n\n                                            \n                                        \n                                        \n                                                search\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                            \n                                                    \nСтрока для поиска по заголовкам тестов (необязательный).\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                            \n                                                    \nКоличество тестов на странице (по умолчанию 10).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \nВозвращает список тестов.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Получить информацию о тесте'})@Get(':id')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/finalTest/finalTest.controller.ts:117\n                        \n                    \n\n\n            \n                \n                        Получает информацию о финальном тесте по ID.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nID теста для получения информации.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \nВозвращает информацию о тесте.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, dto: CreateFinalTestDto)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Обновить данные теста'})@Patch(':id')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/finalTest/finalTest.controller.ts:60\n                        \n                    \n\n\n            \n                \n                        Обновляет данные финального теста.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nID теста для обновления.\n\n\n                                            \n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateFinalTestDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nДанные для обновления теста.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \nВозвращает обновленный тест.\n\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpException,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n} from '@nestjs/common'\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger'\nimport { FinalTestService } from './finalTest.service'\nimport { CreateFinalTestDto } from './dto/create-final-test.dto'\nimport { JwtAuthGuard } from '../../utils/jwtAuthGuard/jwtAuthGuard'\nimport { RolesGuard } from '../../utils/roleGuard/roles.guard'\nimport { Roles } from '../../utils/roleGuard/role-auth.decorator'\n\n/**\n * Контроллер для управления финальными тестами (FinalTestController).\n *\n * Этот контроллер обрабатывает запросы на создание, обновление, удаление и получение тестов.\n */\n@UseGuards(JwtAuthGuard, RolesGuard)\n@ApiBearerAuth()\n@Roles(['HR', 'INTERVIEWER'])\n@ApiTags('Тест')\n@Controller('finalTest')\nexport class FinalTestController {\n  constructor(private readonly finalTestService: FinalTestService) {}\n\n  /**\n   * Создает новый финальный тест.\n   *\n   * @param {CreateFinalTestDto} dto - Данные для создания теста.\n   * @returns {Promise} - Возвращает созданный тест.\n   * @throws {HttpException} - Если произошла ошибка при создании теста.\n   */\n  @ApiOperation({ summary: 'Создать новый тест' })\n  @Post()\n  async create(@Body() dto: CreateFinalTestDto) {\n    try {\n      return await this.finalTestService.create(dto)\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n\n  /**\n   * Обновляет данные финального теста.\n   *\n   * @param {string} id - ID теста для обновления.\n   * @param {CreateFinalTestDto} dto - Данные для обновления теста.\n   * @returns {Promise} - Возвращает обновленный тест.\n   * @throws {HttpException} - Если произошла ошибка при обновлении теста.\n   */\n  @ApiOperation({ summary: 'Обновить данные теста' })\n  @Patch(':id')\n  async update(@Param('id') id: string, @Body() dto: CreateFinalTestDto) {\n    try {\n      return await this.finalTestService.update(id, dto)\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n\n  /**\n   * Удаляет финальный тест.\n   *\n   * @param {string} id - ID теста для удаления.\n   * @returns {Promise} - Возвращает результат удаления.\n   * @throws {HttpException} - Если произошла ошибка при удалении теста.\n   */\n  @ApiOperation({ summary: 'Удалить тест' })\n  @Delete(':id')\n  async delete(@Param('id') id: string) {\n    try {\n      return await this.finalTestService.delete(id)\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n\n  /**\n   * Получает список всех финальных тестов.\n   *\n   * @param {number} page - Номер страницы для пагинации (по умолчанию 1).\n   * @param {string} search - Строка для поиска по заголовкам тестов (необязательный).\n   * @param {number} limit - Количество тестов на странице (по умолчанию 10).\n   * @returns {Promise} - Возвращает список тестов.\n   * @throws {HttpException} - Если произошла ошибка при получении тестов.\n   */\n  @ApiOperation({ summary: 'Получить список всех тестов' })\n  @Get()\n  async findAll(\n    @Query('page') page?: number,\n    @Query('search') search?: string,\n    @Query('counts') limit?: number\n  ) {\n    try {\n      return await this.finalTestService.findAll(page, limit, search)\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n\n  /**\n   * Получает информацию о финальном тесте по ID.\n   *\n   * @param {string} id - ID теста для получения информации.\n   * @returns {Promise} - Возвращает информацию о тесте.\n   * @throws {HttpException} - Если произошла ошибка при получении теста.\n   */\n  @ApiOperation({ summary: 'Получить информацию о тесте' })\n  @Get(':id')\n  async findById(@Param('id') id: string) {\n    try {\n      return await this.finalTestService.findById(id)\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"modules/FinalTestModule.html":{"url":"modules/FinalTestModule.html","title":"module - FinalTestModule","body":"\n                   \n\n\n\n\n    Модули\n    FinalTestModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FinalTestModule\n\n\n\ncluster_FinalTestModule_providers\n\n\n\n\nFinalTestService\n\nFinalTestService\n\n\n\nFinalTestModule\n\nFinalTestModule\n\nFinalTestModule -->\n\nFinalTestService->FinalTestModule\n\n\n\n\n\n\n    \n    \n    \n        Приблизить\n        Сброс\n        Отдалить\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            Файл\n        \n        \n            src/crud/finalTest/finalTest.module.ts\n        \n\n\n\n        \n            Описание\n        \n        \n            Модуль для управления финальными тестами (FinalTestModule).\nЭтот модуль объединяет контроллеры и сервисы, необходимые для работы с финальными тестами.\n\n        \n\n\n        \n            \n                \n                    Провайдеры\n                    \n                        \n                            FinalTestService\n                        \n                    \n                \n                \n                    Контроллеры\n                    \n                        \n                            FinalTestController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { FinalTestController } from './finalTest.controller'\nimport { FinalTestService } from './finalTest.service'\nimport { FinalTestRepository } from './finalTest.repository'\n\n/**\n * Модуль для управления финальными тестами (FinalTestModule).\n *\n * Этот модуль объединяет контроллеры и сервисы, необходимые для работы с финальными тестами.\n */\n@Module({\n  controllers: [FinalTestController], // Контроллер для обработки запросов финальных тестов\n  providers: [FinalTestService, FinalTestRepository], // Сервисы и репозиторий для работы с финальными тестами\n})\nexport class FinalTestModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"classes/FinalTestRepository.html":{"url":"classes/FinalTestRepository.html","title":"class - FinalTestRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Классы\n  FinalTestRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/finalTest/finalTest.repository.ts\n        \n\n\n            \n                Описание\n            \n            \n                Репозиторий для работы с финальными тестами (FinalTestRepository).\nЭтот класс управляет взаимодействием с базой данных для операций с финальными тестами.\n\n            \n\n\n\n\n            \n    Индекс\n    \n        \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Конструктор\n        \n            \n                \n                    \nconstructor(postgres: PostgresService)\n                    \n                \n                        \n                            \n                                Определен в src/crud/finalTest/finalTest.repository.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Параметры :\n                                    \n                                        \n                                            \n                                                Имя\n                                                    Тип\n                                                Опциональный\n                                            \n                                        \n                                        \n                                                \n                                                        postgres\n                                                  \n                                                        \n                                                                        PostgresService\n                                                        \n                                                  \n                                                    \n                                                            Нет\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateFinalTestDto)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/finalTest/finalTest.repository.ts:18\n                        \n                    \n\n\n            \n                \n                        Создает новый финальный тест.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateFinalTestDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nДанные для создания теста.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \nВозвращает созданный финальный тест.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/finalTest/finalTest.repository.ts:136\n                        \n                    \n\n\n            \n                \n                        Удаляет финальный тест по ID.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nID теста для удаления.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \nВозвращает результат удаления.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number, limit: number, search?: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/finalTest/finalTest.repository.ts:76\n                        \n                    \n\n\n            \n                \n                        Получает список всех финальных тестов с пагинацией и поиском.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Значение по умолчанию\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                            \n                                                    \nНомер страницы для пагинации (по умолчанию 1).\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                            \n                                                    \nКоличество тестов на странице (по умолчанию 10).\n\n\n                                            \n                                        \n                                        \n                                                search\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Да\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nСтрока для поиска по заголовкам тестов (необязательный).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \nВозвращает список финальных тестов.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/finalTest/finalTest.repository.ts:121\n                        \n                    \n\n\n            \n                \n                        Получает финальный тест по ID.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nID теста для получения информации.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \nВозвращает информацию о финальном тесте.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, dto: CreateFinalTestDto)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/finalTest/finalTest.repository.ts:55\n                        \n                    \n\n\n            \n                \n                        Обновляет данные финального теста по ID.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nID теста для обновления.\n\n\n                                            \n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateFinalTestDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nДанные для обновления теста.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \nВозвращает обновленный финальный тест.\n\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PostgresService } from '../../db/postgres/postgres.service'\nimport { CreateFinalTestDto } from './dto/create-final-test.dto'\n\n/**\n * Репозиторий для работы с финальными тестами (FinalTestRepository).\n *\n * Этот класс управляет взаимодействием с базой данных для операций с финальными тестами.\n */\nexport class FinalTestRepository {\n  constructor(private readonly postgres: PostgresService) {}\n\n  /**\n   * Создает новый финальный тест.\n   *\n   * @param {CreateFinalTestDto} dto - Данные для создания теста.\n   * @returns {Promise} - Возвращает созданный финальный тест.\n   */\n  async create(dto: CreateFinalTestDto) {\n    const questionGroups = []\n\n    for (const questionGroupId of dto.questionGroupId) {\n      const questionGroup = await this.postgres.questionGroup.findUnique({\n        where: { id: questionGroupId },\n        include: { questions: true },\n      })\n\n      const filteredQuestions = questionGroup.questions.filter(\n        (question) => !dto.excludeTaskIds?.includes(question.id)\n      )\n\n      questionGroups.push({\n        id: questionGroupId,\n        questions: filteredQuestions,\n      })\n    }\n\n    return this.postgres.finalTest.create({\n      data: {\n        title: dto.title,\n        description: dto.description,\n        QuestionGroup: {\n          connect: questionGroups.map((group) => ({ id: group.id })),\n        },\n      },\n    })\n  }\n\n  /**\n   * Обновляет данные финального теста по ID.\n   *\n   * @param {string} id - ID теста для обновления.\n   * @param {CreateFinalTestDto} dto - Данные для обновления теста.\n   * @returns {Promise} - Возвращает обновленный финальный тест.\n   */\n  async update(id: string, dto: CreateFinalTestDto) {\n    return this.postgres.finalTest.update({\n      where: { id },\n      data: {\n        title: dto.title,\n        description: dto.description,\n        QuestionGroup: {\n          connect: dto.questionGroupId.map((groupId) => ({ id: groupId })),\n        },\n      },\n    })\n  }\n\n  /**\n   * Получает список всех финальных тестов с пагинацией и поиском.\n   *\n   * @param {number} page - Номер страницы для пагинации (по умолчанию 1).\n   * @param {number} limit - Количество тестов на странице (по умолчанию 10).\n   * @param {string} search - Строка для поиска по заголовкам тестов (необязательный).\n   * @returns {Promise} - Возвращает список финальных тестов.\n   */\n  async findAll(page: number = 1, limit: number = 10, search?: string) {\n    const skip = (page - 1) * limit\n\n    const [finalTests, totalCount] = await Promise.all([\n      this.postgres.finalTest.findMany({\n        skip,\n        take: limit,\n        where: search\n          ? {\n              title: {\n                contains: search,\n                mode: 'insensitive',\n              },\n            }\n          : {},\n        include: {\n          QuestionGroup: false,\n        },\n      }),\n      this.postgres.finalTest.count({\n        where: search\n          ? {\n              title: {\n                contains: search,\n                mode: 'insensitive',\n              },\n            }\n          : {},\n      }),\n    ])\n\n    return {\n      data: finalTests,\n      totalCount,\n      totalPages: Math.ceil(totalCount / limit),\n      currentPage: page,\n    }\n  }\n\n  /**\n   * Получает финальный тест по ID.\n   *\n   * @param {string} id - ID теста для получения информации.\n   * @returns {Promise} - Возвращает информацию о финальном тесте.\n   */\n  async findById(id: string) {\n    return this.postgres.finalTest.findUnique({\n      where: { id },\n      include: {\n        QuestionGroup: true,\n      },\n    })\n  }\n\n  /**\n   * Удаляет финальный тест по ID.\n   *\n   * @param {string} id - ID теста для удаления.\n   * @returns {Promise} - Возвращает результат удаления.\n   */\n  async delete(id: string) {\n    return this.postgres.finalTest.delete({\n      where: { id },\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"injectables/FinalTestService.html":{"url":"injectables/FinalTestService.html","title":"injectable - FinalTestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Внедрения\n  FinalTestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/finalTest/finalTest.service.ts\n        \n\n\n            \n                Описание\n            \n            \n                Сервис для управления финальными тестами (FinalTestService).\nЭтот класс предоставляет методы для создания, обновления, удаления и получения финальных тестов.\n\n            \n\n\n\n            \n    Индекс\n    \n        \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Конструктор\n        \n            \n                \n                    \nconstructor(finalTestRepository: FinalTestRepository)\n                    \n                \n                        \n                            \n                                Определен в src/crud/finalTest/finalTest.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Параметры :\n                                    \n                                        \n                                            \n                                                Имя\n                                                    Тип\n                                                Опциональный\n                                            \n                                        \n                                        \n                                                \n                                                        finalTestRepository\n                                                  \n                                                        \n                                                                        FinalTestRepository\n                                                        \n                                                  \n                                                    \n                                                            Нет\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateFinalTestDto)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/finalTest/finalTest.service.ts:20\n                        \n                    \n\n\n            \n                \n                        Создает новый финальный тест.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateFinalTestDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nДанные для создания теста.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \nВозвращает созданный финальный тест.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/finalTest/finalTest.service.ts:41\n                        \n                    \n\n\n            \n                \n                        Удаляет финальный тест по ID.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nID теста для удаления.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \nВозвращает результат удаления.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page?: number, limit?: number, search?: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/finalTest/finalTest.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Получает список всех финальных тестов с пагинацией и поиском.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                            \n                                                    \nНомер страницы для пагинации (по умолчанию 1).\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                            \n                                                    \nКоличество тестов на странице (по умолчанию 10).\n\n\n                                            \n                                        \n                                        \n                                                search\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                            \n                                                    \nСтрока для поиска по заголовкам тестов (необязательный).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \nВозвращает список финальных тестов.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/finalTest/finalTest.service.ts:63\n                        \n                    \n\n\n            \n                \n                        Получает финальный тест по ID.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nID теста для получения информации.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \nВозвращает информацию о финальном тесте.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, dto: CreateFinalTestDto)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/finalTest/finalTest.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Обновляет финальный тест по ID.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nID теста для обновления.\n\n\n                                            \n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateFinalTestDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nДанные для обновления теста.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \nВозвращает обновленный финальный тест.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { FinalTestRepository } from './finalTest.repository'\nimport { CreateFinalTestDto } from './dto/create-final-test.dto'\n\n/**\n * Сервис для управления финальными тестами (FinalTestService).\n *\n * Этот класс предоставляет методы для создания, обновления, удаления и получения финальных тестов.\n */\n@Injectable()\nexport class FinalTestService {\n  constructor(private readonly finalTestRepository: FinalTestRepository) {}\n\n  /**\n   * Создает новый финальный тест.\n   *\n   * @param {CreateFinalTestDto} dto - Данные для создания теста.\n   * @returns {Promise} - Возвращает созданный финальный тест.\n   */\n  async create(dto: CreateFinalTestDto) {\n    return this.finalTestRepository.create(dto)\n  }\n\n  /**\n   * Обновляет финальный тест по ID.\n   *\n   * @param {string} id - ID теста для обновления.\n   * @param {CreateFinalTestDto} dto - Данные для обновления теста.\n   * @returns {Promise} - Возвращает обновленный финальный тест.\n   */\n  async update(id: string, dto: CreateFinalTestDto) {\n    return this.finalTestRepository.update(id, dto)\n  }\n\n  /**\n   * Удаляет финальный тест по ID.\n   *\n   * @param {string} id - ID теста для удаления.\n   * @returns {Promise} - Возвращает результат удаления.\n   */\n  async delete(id: string) {\n    return this.finalTestRepository.delete(id)\n  }\n\n  /**\n   * Получает список всех финальных тестов с пагинацией и поиском.\n   *\n   * @param {number} page - Номер страницы для пагинации (по умолчанию 1).\n   * @param {number} limit - Количество тестов на странице (по умолчанию 10).\n   * @param {string} search - Строка для поиска по заголовкам тестов (необязательный).\n   * @returns {Promise} - Возвращает список финальных тестов.\n   */\n  async findAll(page?: number, limit?: number, search?: string) {\n    return this.finalTestRepository.findAll(page, limit, search)\n  }\n\n  /**\n   * Получает финальный тест по ID.\n   *\n   * @param {string} id - ID теста для получения информации.\n   * @returns {Promise} - Возвращает информацию о финальном тесте.\n   */\n  async findById(id: string) {\n    return this.finalTestRepository.findById(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"interfaces/IData.html":{"url":"interfaces/IData.html","title":"interface - IData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Интерфейсы\n  \n  IData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/task/task.gateway.ts\n        \n\n\n\n\n        \n            Индекс\n            \n                \n                    \n                        \n                            Свойства\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            code\n                                        \n                                \n                                \n                                            Опциональный\n                                        \n                                            cursorPosition\n                                        \n                                \n                                \n                                        \n                                            language\n                                        \n                                \n                                \n                                        \n                                            sessionId\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Свойства\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Тип :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cursorPosition\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cursorPosition:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Тип :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Опциональный\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        language\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        language:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Тип :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sessionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sessionId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Тип :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Тип :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  MessageBody,\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n} from '@nestjs/websockets'\nimport { Server } from 'socket.io'\nimport { TaskService } from './task.service'\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger'\n\ninterface IData {\n  sessionId: string\n  userId: string\n  language: string\n  code: string\n  cursorPosition?: number\n}\n\n@ApiTags('Task Gateway')\n@WebSocketGateway()\nexport class TaskGateway {\n  @WebSocketServer() server: Server\n\n  constructor(private readonly taskService: TaskService) {}\n\n  @ApiOperation({ summary: 'Изменение кода в сессии' })\n  @ApiResponse({ status: 200, description: 'Код успешно изменен.' })\n  @SubscribeMessage('sessionChangeCode')\n  async handleChangedCode(@MessageBody() data: IData) {\n    this.server.to(data.sessionId).emit('change-code', data)\n  }\n\n  @ApiOperation({ summary: 'Запуск теста кода' })\n  @ApiResponse({ status: 200, description: 'Тест кода успешно выполнен.' })\n  @SubscribeMessage('codeRunTest')\n  async handleCodeRunTest(@MessageBody() data: IData) {\n    const result = await this.taskService.runTestCode(data.language, data.code)\n    this.server.to(data.sessionId).emit('test-code', result)\n  }\n\n  @ApiOperation({ summary: 'Обновление позиции курсора' })\n  @ApiResponse({ status: 200, description: 'Позиция курсора успешно обновлена.' })\n  @SubscribeMessage('updateCursor')\n  handleUpdateCursor(\n    @MessageBody() data: { sessionId: string; userId: string; cursorPosition: number }\n  ) {\n    this.server.to(data.sessionId).emit('cursorUpdate', {\n      userId: data.userId,\n      cursorPosition: data.cursorPosition,\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"interfaces/IGenerateTokens.html":{"url":"interfaces/IGenerateTokens.html","title":"interface - IGenerateTokens","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Интерфейсы\n  \n  IGenerateTokens\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/auth/service/auth.service.ts\n        \n\n\n\n\n        \n            Индекс\n            \n                \n                    \n                        \n                            Свойства\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accessToken\n                                        \n                                \n                                \n                                        \n                                            refreshToken\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Свойства\n                    \n                        \n                                \n                                    \n                                        \n                                        accessToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Тип :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Тип :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ApiError } from '../../../utils/apiError/apiError'\nimport { JwtService } from '../../../utils/jwt/jwt.service'\nimport { AuthRepository } from '../auth.repository'\nimport { RefreshService } from './refresh.service'\nimport { RegisterDto } from '../dto/register.dto'\nimport { LoginDto } from '../dto/login.dto'\nimport { Injectable } from '@nestjs/common'\nimport { $Enums } from '@prisma/client'\nimport { Response } from 'express'\nimport * as argon from 'argon2'\n\nexport interface IGenerateTokens {\n  accessToken: string\n  refreshToken: string\n}\n\nexport interface ILogin {\n  accessToken: string\n  user: IUser\n}\n\nexport interface IUser {\n  id: string\n  full_name: string\n  email: string\n  role: $Enums.UserRole\n}\n\n/**\n * Сервис аутентификации пользователей.\n *\n * Этот сервис предоставляет методы для регистрации, входа, выхода и обновления токенов.\n */\n@Injectable()\nexport class AuthService {\n  constructor(\n    private authRepository: AuthRepository,\n    private refreshService: RefreshService,\n    private jwt: JwtService\n  ) {}\n\n  /**\n   * Генерирует токены доступа и обновления для пользователя.\n   *\n   * @param {string} userId - ID пользователя, для которого генерируются токены.\n   * @param {Response} res - Объект ответа Express для установки cookie.\n   * @returns {Promise} - Объект с токенами доступа и обновления.\n   */\n  async generateTokens(userId: string, res: Response): Promise {\n    const accessToken = this.jwt.signJwt(userId, '1d')\n    const refreshToken = this.jwt.signJwt(userId, '7d')\n    await this.refreshService.saveToken(userId, refreshToken)\n\n    res.cookie('refreshToken', refreshToken, {\n      httpOnly: true,\n      secure: false,\n      sameSite: 'lax',\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 дней\n    })\n\n    return { accessToken, refreshToken }\n  }\n\n  /**\n   * Выполняет вход пользователя в систему.\n   *\n   * @param {LoginDto} dto - Данные для входа пользователя.\n   * @param {Response} res - Объект ответа Express для установки cookie.\n   * @returns {Promise} - Объект с токеном доступа и данными пользователя.\n   * @throws {ApiError} - Если пользователь не найден или пароль неверен.\n   */\n  async login(dto: LoginDto, res: Response): Promise {\n    const user = await this.authRepository.login(dto)\n    if (!user) {\n      throw ApiError.BadRequest(\n        `Пользователь с почтовым индексом ${dto.email} не существует`\n      )\n    }\n\n    const passwordMatched = await argon.verify(user.password, dto.password)\n    if (!passwordMatched) {\n      throw ApiError.UnauthorizedError()\n    }\n\n    const tokens = await this.generateTokens(user.id, res)\n    return {\n      accessToken: tokens.accessToken,\n      user: {\n        id: user.id,\n        full_name: user.full_name,\n        email: user.email,\n        role: user.role,\n      },\n    }\n  }\n\n  /**\n   * Регистрирует нового пользователя.\n   *\n   * @param {RegisterDto} dto - Данные для регистрации пользователя.\n   * @param {Response} res - Объект ответа Express для установки cookie.\n   * @returns {Promise} - Объект с токеном доступа и данными пользователя.\n   * @throws {ApiError} - Если пользователь с таким email уже существует.\n   */\n  async register(dto: RegisterDto, res: Response): Promise {\n    const candidate = await this.authRepository.findEmail(dto.email)\n    if (candidate) {\n      throw ApiError.BadRequest(\n        `Пользователь с почтовым индексом ${candidate.email} уже существует`\n      )\n    }\n\n    dto.password = await argon.hash(dto.password)\n    const user = await this.authRepository.register(dto)\n    const tokens = await this.generateTokens(user.id, res)\n\n    return {\n      accessToken: tokens.accessToken,\n      user: {\n        id: user.id,\n        full_name: user.full_name,\n        email: user.email,\n        role: user.role,\n      },\n    }\n  }\n\n  /**\n   * Обновляет токены доступа для пользователя.\n   *\n   * @param {string} refreshToken - Токен обновления, который передается пользователем.\n   * @param {Response} res - Объект ответа Express для установки cookie.\n   * @returns {Promise} - Объект с новым токеном доступа и данными пользователя.\n   * @throws {ApiError} - Если токен обновления отсутствует или недействителен.\n   */\n  async refresh(refreshToken: string, res: Response): Promise {\n    if (!refreshToken) {\n      throw ApiError.UnauthorizedError()\n    }\n\n    const { data } = this.jwt.verifyJwt(refreshToken) as { data: string }\n    if (!data) {\n      throw ApiError.UnauthorizedError()\n    }\n\n    const tokenData = await this.refreshService.findToken(data)\n    if (!tokenData) {\n      throw ApiError.UnauthorizedError()\n    }\n\n    const user = await this.authRepository.findId(data)\n    const tokens = await this.generateTokens(user.id, res)\n    return {\n      accessToken: tokens.accessToken,\n      user: {\n        id: user.id,\n        full_name: user.full_name,\n        email: user.email,\n        role: user.role,\n      },\n    }\n  }\n\n  /**\n   * Выходит пользователя из системы, удаляя токен обновления.\n   *\n   * @param {string} refreshToken - Токен обновления, который передается пользователем.\n   * @param {Response} res - Объект ответа Express для очистки cookie.\n   * @returns {Promise} - Возвращает true, если выход выполнен успешно.\n   * @throws {ApiError} - Если токен обновления отсутствует или недействителен.\n   */\n  async logout(refreshToken: string, res: Response): Promise {\n    if (!refreshToken) {\n      throw ApiError.UnauthorizedError()\n    }\n\n    const { data } = this.jwt.verifyJwt(refreshToken) as { data: string }\n    if (!data) {\n      throw ApiError.UnauthorizedError()\n    }\n\n    res.clearCookie('refreshToken', { httpOnly: true, secure: false, sameSite: 'lax' })\n    await this.refreshService.removeToken(data)\n    return true\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"interfaces/ILogin.html":{"url":"interfaces/ILogin.html","title":"interface - ILogin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Интерфейсы\n  \n  ILogin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/auth/service/auth.service.ts\n        \n\n\n\n\n        \n            Индекс\n            \n                \n                    \n                        \n                            Свойства\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accessToken\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Свойства\n                    \n                        \n                                \n                                    \n                                        \n                                        accessToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Тип :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         IUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Тип :         IUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ApiError } from '../../../utils/apiError/apiError'\nimport { JwtService } from '../../../utils/jwt/jwt.service'\nimport { AuthRepository } from '../auth.repository'\nimport { RefreshService } from './refresh.service'\nimport { RegisterDto } from '../dto/register.dto'\nimport { LoginDto } from '../dto/login.dto'\nimport { Injectable } from '@nestjs/common'\nimport { $Enums } from '@prisma/client'\nimport { Response } from 'express'\nimport * as argon from 'argon2'\n\nexport interface IGenerateTokens {\n  accessToken: string\n  refreshToken: string\n}\n\nexport interface ILogin {\n  accessToken: string\n  user: IUser\n}\n\nexport interface IUser {\n  id: string\n  full_name: string\n  email: string\n  role: $Enums.UserRole\n}\n\n/**\n * Сервис аутентификации пользователей.\n *\n * Этот сервис предоставляет методы для регистрации, входа, выхода и обновления токенов.\n */\n@Injectable()\nexport class AuthService {\n  constructor(\n    private authRepository: AuthRepository,\n    private refreshService: RefreshService,\n    private jwt: JwtService\n  ) {}\n\n  /**\n   * Генерирует токены доступа и обновления для пользователя.\n   *\n   * @param {string} userId - ID пользователя, для которого генерируются токены.\n   * @param {Response} res - Объект ответа Express для установки cookie.\n   * @returns {Promise} - Объект с токенами доступа и обновления.\n   */\n  async generateTokens(userId: string, res: Response): Promise {\n    const accessToken = this.jwt.signJwt(userId, '1d')\n    const refreshToken = this.jwt.signJwt(userId, '7d')\n    await this.refreshService.saveToken(userId, refreshToken)\n\n    res.cookie('refreshToken', refreshToken, {\n      httpOnly: true,\n      secure: false,\n      sameSite: 'lax',\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 дней\n    })\n\n    return { accessToken, refreshToken }\n  }\n\n  /**\n   * Выполняет вход пользователя в систему.\n   *\n   * @param {LoginDto} dto - Данные для входа пользователя.\n   * @param {Response} res - Объект ответа Express для установки cookie.\n   * @returns {Promise} - Объект с токеном доступа и данными пользователя.\n   * @throws {ApiError} - Если пользователь не найден или пароль неверен.\n   */\n  async login(dto: LoginDto, res: Response): Promise {\n    const user = await this.authRepository.login(dto)\n    if (!user) {\n      throw ApiError.BadRequest(\n        `Пользователь с почтовым индексом ${dto.email} не существует`\n      )\n    }\n\n    const passwordMatched = await argon.verify(user.password, dto.password)\n    if (!passwordMatched) {\n      throw ApiError.UnauthorizedError()\n    }\n\n    const tokens = await this.generateTokens(user.id, res)\n    return {\n      accessToken: tokens.accessToken,\n      user: {\n        id: user.id,\n        full_name: user.full_name,\n        email: user.email,\n        role: user.role,\n      },\n    }\n  }\n\n  /**\n   * Регистрирует нового пользователя.\n   *\n   * @param {RegisterDto} dto - Данные для регистрации пользователя.\n   * @param {Response} res - Объект ответа Express для установки cookie.\n   * @returns {Promise} - Объект с токеном доступа и данными пользователя.\n   * @throws {ApiError} - Если пользователь с таким email уже существует.\n   */\n  async register(dto: RegisterDto, res: Response): Promise {\n    const candidate = await this.authRepository.findEmail(dto.email)\n    if (candidate) {\n      throw ApiError.BadRequest(\n        `Пользователь с почтовым индексом ${candidate.email} уже существует`\n      )\n    }\n\n    dto.password = await argon.hash(dto.password)\n    const user = await this.authRepository.register(dto)\n    const tokens = await this.generateTokens(user.id, res)\n\n    return {\n      accessToken: tokens.accessToken,\n      user: {\n        id: user.id,\n        full_name: user.full_name,\n        email: user.email,\n        role: user.role,\n      },\n    }\n  }\n\n  /**\n   * Обновляет токены доступа для пользователя.\n   *\n   * @param {string} refreshToken - Токен обновления, который передается пользователем.\n   * @param {Response} res - Объект ответа Express для установки cookie.\n   * @returns {Promise} - Объект с новым токеном доступа и данными пользователя.\n   * @throws {ApiError} - Если токен обновления отсутствует или недействителен.\n   */\n  async refresh(refreshToken: string, res: Response): Promise {\n    if (!refreshToken) {\n      throw ApiError.UnauthorizedError()\n    }\n\n    const { data } = this.jwt.verifyJwt(refreshToken) as { data: string }\n    if (!data) {\n      throw ApiError.UnauthorizedError()\n    }\n\n    const tokenData = await this.refreshService.findToken(data)\n    if (!tokenData) {\n      throw ApiError.UnauthorizedError()\n    }\n\n    const user = await this.authRepository.findId(data)\n    const tokens = await this.generateTokens(user.id, res)\n    return {\n      accessToken: tokens.accessToken,\n      user: {\n        id: user.id,\n        full_name: user.full_name,\n        email: user.email,\n        role: user.role,\n      },\n    }\n  }\n\n  /**\n   * Выходит пользователя из системы, удаляя токен обновления.\n   *\n   * @param {string} refreshToken - Токен обновления, который передается пользователем.\n   * @param {Response} res - Объект ответа Express для очистки cookie.\n   * @returns {Promise} - Возвращает true, если выход выполнен успешно.\n   * @throws {ApiError} - Если токен обновления отсутствует или недействителен.\n   */\n  async logout(refreshToken: string, res: Response): Promise {\n    if (!refreshToken) {\n      throw ApiError.UnauthorizedError()\n    }\n\n    const { data } = this.jwt.verifyJwt(refreshToken) as { data: string }\n    if (!data) {\n      throw ApiError.UnauthorizedError()\n    }\n\n    res.clearCookie('refreshToken', { httpOnly: true, secure: false, sameSite: 'lax' })\n    await this.refreshService.removeToken(data)\n    return true\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"interfaces/IResponseBuild.html":{"url":"interfaces/IResponseBuild.html","title":"interface - IResponseBuild","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Интерфейсы\n  \n  IResponseBuild\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/utils/resBuild/resBuild.service.ts\n        \n\n\n            \n                Описание\n            \n            \n                Интерфейс cборки ответа API.\nЭтот интерфейс описывает структуру ответа, который возвращается из API.\nОн включает в себя статус код, сообщение и данные, которые могут быть возвращены.\n\n            \n\n\n        \n            Индекс\n            \n                \n                    \n                        \n                            Свойства\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Опциональный\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Опциональный\n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Свойства\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Тип :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Опциональный\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Это поле содержит полезную информацию, которая может быть возвращена\nв результате выполнения запроса. Тип данных определяется параметром T.\nНапример, это может быть объект, массив или любой другой тип данных.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Тип :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Опциональный\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Это поле может содержать дополнительную информацию о результате запроса.\nНапример, оно может использоваться для передачи сообщений об ошибках или\nподтверждения успешного выполнения операции.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Тип :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Этот код указывает на результат выполнения запроса.\nНапример:\n\n200: Успешный запрос.\n400: Ошибка клиента (например, неверный запрос).\n404: Ресурс не найден.\n500: Ошибка сервера.\n\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\n\n/**\n * Интерфейс cборки ответа API.\n *\n * Этот интерфейс описывает структуру ответа, который возвращается из API.\n * Он включает в себя статус код, сообщение и данные, которые могут быть возвращены.\n *\n * @template T - Тип данных, которые могут быть возвращены в ответе.\n * @public\n */\nexport interface IResponseBuild {\n  /**\n   * @cfg {number} statusCode - Статус код ответа.\n   *\n   * Этот код указывает на результат выполнения запроса.\n   * Например:\n   * - 200: Успешный запрос.\n   * - 400: Ошибка клиента (например, неверный запрос).\n   * - 404: Ресурс не найден.\n   * - 500: Ошибка сервера.\n   */\n  statusCode: number\n\n  /**\n   * @cfg {string} [message] - Сообщение, связанное с ответом.\n   *\n   * Это поле может содержать дополнительную информацию о результате запроса.\n   * Например, оно может использоваться для передачи сообщений об ошибках или\n   * подтверждения успешного выполнения операции.\n   */\n  message?: string\n\n  /**\n   * @cfg {T} [data] - Данные, возвращаемые в ответе.\n   *\n   * Это поле содержит полезную информацию, которая может быть возвращена\n   * в результате выполнения запроса. Тип данных определяется параметром T.\n   * Например, это может быть объект, массив или любой другой тип данных.\n   */\n  data?: T\n}\n\n@Injectable()\nexport class ResponseBuildService {\n  /**\n   * Создает ответ API на основе переданных параметров.\n   *\n   * @param {IResponseBuild} params - Параметры для сборки ответа.\n   * @returns {IResponseBuild} - Собранный ответ API.\n   * @template T - Тип данных, которые могут быть возвращены в ответе.\n   */\n  build(params: IResponseBuild): IResponseBuild {\n    return {\n      statusCode: params.statusCode ?? 200, // Используем переданный статус код или 200 по умолчанию\n      message: params.message, // Сообщение, если оно есть\n      data: params.data, // Данные, если они есть\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"interfaces/IUser.html":{"url":"interfaces/IUser.html","title":"interface - IUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Интерфейсы\n  \n  IUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/auth/service/auth.service.ts\n        \n\n\n\n\n        \n            Индекс\n            \n                \n                    \n                        \n                            Свойства\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            full_name\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Свойства\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Тип :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        full_name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        full_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Тип :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Тип :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         $Enums.UserRole\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Тип :         $Enums.UserRole\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ApiError } from '../../../utils/apiError/apiError'\nimport { JwtService } from '../../../utils/jwt/jwt.service'\nimport { AuthRepository } from '../auth.repository'\nimport { RefreshService } from './refresh.service'\nimport { RegisterDto } from '../dto/register.dto'\nimport { LoginDto } from '../dto/login.dto'\nimport { Injectable } from '@nestjs/common'\nimport { $Enums } from '@prisma/client'\nimport { Response } from 'express'\nimport * as argon from 'argon2'\n\nexport interface IGenerateTokens {\n  accessToken: string\n  refreshToken: string\n}\n\nexport interface ILogin {\n  accessToken: string\n  user: IUser\n}\n\nexport interface IUser {\n  id: string\n  full_name: string\n  email: string\n  role: $Enums.UserRole\n}\n\n/**\n * Сервис аутентификации пользователей.\n *\n * Этот сервис предоставляет методы для регистрации, входа, выхода и обновления токенов.\n */\n@Injectable()\nexport class AuthService {\n  constructor(\n    private authRepository: AuthRepository,\n    private refreshService: RefreshService,\n    private jwt: JwtService\n  ) {}\n\n  /**\n   * Генерирует токены доступа и обновления для пользователя.\n   *\n   * @param {string} userId - ID пользователя, для которого генерируются токены.\n   * @param {Response} res - Объект ответа Express для установки cookie.\n   * @returns {Promise} - Объект с токенами доступа и обновления.\n   */\n  async generateTokens(userId: string, res: Response): Promise {\n    const accessToken = this.jwt.signJwt(userId, '1d')\n    const refreshToken = this.jwt.signJwt(userId, '7d')\n    await this.refreshService.saveToken(userId, refreshToken)\n\n    res.cookie('refreshToken', refreshToken, {\n      httpOnly: true,\n      secure: false,\n      sameSite: 'lax',\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 дней\n    })\n\n    return { accessToken, refreshToken }\n  }\n\n  /**\n   * Выполняет вход пользователя в систему.\n   *\n   * @param {LoginDto} dto - Данные для входа пользователя.\n   * @param {Response} res - Объект ответа Express для установки cookie.\n   * @returns {Promise} - Объект с токеном доступа и данными пользователя.\n   * @throws {ApiError} - Если пользователь не найден или пароль неверен.\n   */\n  async login(dto: LoginDto, res: Response): Promise {\n    const user = await this.authRepository.login(dto)\n    if (!user) {\n      throw ApiError.BadRequest(\n        `Пользователь с почтовым индексом ${dto.email} не существует`\n      )\n    }\n\n    const passwordMatched = await argon.verify(user.password, dto.password)\n    if (!passwordMatched) {\n      throw ApiError.UnauthorizedError()\n    }\n\n    const tokens = await this.generateTokens(user.id, res)\n    return {\n      accessToken: tokens.accessToken,\n      user: {\n        id: user.id,\n        full_name: user.full_name,\n        email: user.email,\n        role: user.role,\n      },\n    }\n  }\n\n  /**\n   * Регистрирует нового пользователя.\n   *\n   * @param {RegisterDto} dto - Данные для регистрации пользователя.\n   * @param {Response} res - Объект ответа Express для установки cookie.\n   * @returns {Promise} - Объект с токеном доступа и данными пользователя.\n   * @throws {ApiError} - Если пользователь с таким email уже существует.\n   */\n  async register(dto: RegisterDto, res: Response): Promise {\n    const candidate = await this.authRepository.findEmail(dto.email)\n    if (candidate) {\n      throw ApiError.BadRequest(\n        `Пользователь с почтовым индексом ${candidate.email} уже существует`\n      )\n    }\n\n    dto.password = await argon.hash(dto.password)\n    const user = await this.authRepository.register(dto)\n    const tokens = await this.generateTokens(user.id, res)\n\n    return {\n      accessToken: tokens.accessToken,\n      user: {\n        id: user.id,\n        full_name: user.full_name,\n        email: user.email,\n        role: user.role,\n      },\n    }\n  }\n\n  /**\n   * Обновляет токены доступа для пользователя.\n   *\n   * @param {string} refreshToken - Токен обновления, который передается пользователем.\n   * @param {Response} res - Объект ответа Express для установки cookie.\n   * @returns {Promise} - Объект с новым токеном доступа и данными пользователя.\n   * @throws {ApiError} - Если токен обновления отсутствует или недействителен.\n   */\n  async refresh(refreshToken: string, res: Response): Promise {\n    if (!refreshToken) {\n      throw ApiError.UnauthorizedError()\n    }\n\n    const { data } = this.jwt.verifyJwt(refreshToken) as { data: string }\n    if (!data) {\n      throw ApiError.UnauthorizedError()\n    }\n\n    const tokenData = await this.refreshService.findToken(data)\n    if (!tokenData) {\n      throw ApiError.UnauthorizedError()\n    }\n\n    const user = await this.authRepository.findId(data)\n    const tokens = await this.generateTokens(user.id, res)\n    return {\n      accessToken: tokens.accessToken,\n      user: {\n        id: user.id,\n        full_name: user.full_name,\n        email: user.email,\n        role: user.role,\n      },\n    }\n  }\n\n  /**\n   * Выходит пользователя из системы, удаляя токен обновления.\n   *\n   * @param {string} refreshToken - Токен обновления, который передается пользователем.\n   * @param {Response} res - Объект ответа Express для очистки cookie.\n   * @returns {Promise} - Возвращает true, если выход выполнен успешно.\n   * @throws {ApiError} - Если токен обновления отсутствует или недействителен.\n   */\n  async logout(refreshToken: string, res: Response): Promise {\n    if (!refreshToken) {\n      throw ApiError.UnauthorizedError()\n    }\n\n    const { data } = this.jwt.verifyJwt(refreshToken) as { data: string }\n    if (!data) {\n      throw ApiError.UnauthorizedError()\n    }\n\n    res.clearCookie('refreshToken', { httpOnly: true, secure: false, sameSite: 'lax' })\n    await this.refreshService.removeToken(data)\n    return true\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"controllers/InterviewController.html":{"url":"controllers/InterviewController.html","title":"controller - InterviewController","body":"\n                   \n\n\n\n\n\n\n  Контроллеры\n  InterviewController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/interview/interview.controller.ts\n        \n\n            \n                Префикс\n            \n            \n                interview\n            \n\n\n            \n                Описание\n            \n            \n                Контроллер для управления собеседованиями.\n\n            \n\n\n\n\n            \n    Индекс\n    \n        \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateInterviewDto)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Создать новое собеседование'})@Post()\n                \n            \n\n                    \n                        \n                            Определен в src/crud/interview/interview.controller.ts:37\n                        \n                    \n\n\n            \n                \n                        Создать новое собеседование.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateInterviewDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Данные для создания собеседования.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Удалить собеседование'})@Delete(':id')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/interview/interview.controller.ts:66\n                        \n                    \n\n\n            \n                \n                        Удалить собеседование.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Идентификатор собеседования.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page?: number, search?: string, limit?: number)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Получить список всех собеседований'})@Get()\n                \n            \n\n                    \n                        \n                            Определен в src/crud/interview/interview.controller.ts:82\n                        \n                    \n\n\n            \n                \n                        Получить список всех собеседований.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                            \n                                                    Номер страницы для пагинации.\n\n                                            \n                                        \n                                        \n                                                search\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                            \n                                                    Строка для поиска по названию собеседования.\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                            \n                                                    Количество собеседований на странице.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Получить информацию о собеседовании'})@Get(':id')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/interview/interview.controller.ts:100\n                        \n                    \n\n\n            \n                \n                        Получить информацию о собеседовании по идентификатору.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Идентификатор собеседования.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, dto: CreateInterviewDto)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Обновить данные собеседования'})@Patch(':id')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/interview/interview.controller.ts:52\n                        \n                    \n\n\n            \n                \n                        Обновить данные собеседования.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Идентификатор собеседования.\n\n                                            \n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateInterviewDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Данные для обновления собеседования.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpException,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n} from '@nestjs/common'\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger'\nimport { InterviewService } from './interview.service'\nimport { CreateInterviewDto } from './dto/create-interview.dto'\nimport { JwtAuthGuard } from '../../utils/jwtAuthGuard/jwtAuthGuard'\nimport { RolesGuard } from '../../utils/roleGuard/roles.guard'\nimport { Roles } from '../../utils/roleGuard/role-auth.decorator'\n\n/**\n * Контроллер для управления собеседованиями.\n */\n@UseGuards(JwtAuthGuard, RolesGuard)\n@ApiBearerAuth()\n@Roles(['HR', 'INTERVIEWER'])\n@ApiTags('Собеседования')\n@Controller('interview')\nexport class InterviewController {\n  constructor(private readonly interviewService: InterviewService) {}\n\n  /**\n   * Создать новое собеседование.\n   * @param dto Данные для создания собеседования.\n   */\n  @ApiOperation({ summary: 'Создать новое собеседование' })\n  @Post()\n  async create(@Body() dto: CreateInterviewDto) {\n    try {\n      return await this.interviewService.create(dto)\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n\n  /**\n   * Обновить данные собеседования.\n   * @param id Идентификатор собеседования.\n   * @param dto Данные для обновления собеседования.\n   */\n  @ApiOperation({ summary: 'Обновить данные собеседования' })\n  @Patch(':id')\n  async update(@Param('id') id: string, @Body() dto: CreateInterviewDto) {\n    try {\n      return await this.interviewService.update(id, dto)\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n\n  /**\n   * Удалить собеседование.\n   * @param id Идентификатор собеседования.\n   */\n  @ApiOperation({ summary: 'Удалить собеседование' })\n  @Delete(':id')\n  async delete(@Param('id') id: string) {\n    try {\n      return await this.interviewService.delete(id)\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n\n  /**\n   * Получить список всех собеседований.\n   * @param page Номер страницы для пагинации.\n   * @param search Строка для поиска по названию собеседования.\n   * @param limit Количество собеседований на странице.\n   */\n  @ApiOperation({ summary: 'Получить список всех собеседований' })\n  @Get()\n  async findAll(\n    @Query('page') page?: number,\n    @Query('search') search?: string,\n    @Query('counts') limit?: number\n  ) {\n    try {\n      return await this.interviewService.findAll(page, limit, search)\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n\n  /**\n   * Получить информацию о собеседовании по идентификатору.\n   * @param id Идентификатор собеседования.\n   */\n  @ApiOperation({ summary: 'Получить информацию о собеседовании' })\n  @Get(':id')\n  async findById(@Param('id') id: string) {\n    try {\n      return await this.interviewService.findById(id)\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"modules/InterviewModule.html":{"url":"modules/InterviewModule.html","title":"module - InterviewModule","body":"\n                   \n\n\n\n\n    Модули\n    InterviewModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_InterviewModule\n\n\n\ncluster_InterviewModule_providers\n\n\n\n\nInterviewRepository\n\nInterviewRepository\n\n\n\nInterviewModule\n\nInterviewModule\n\nInterviewModule -->\n\nInterviewRepository->InterviewModule\n\n\n\n\n\nInterviewService\n\nInterviewService\n\nInterviewModule -->\n\nInterviewService->InterviewModule\n\n\n\n\n\n\n    \n    \n    \n        Приблизить\n        Сброс\n        Отдалить\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            Файл\n        \n        \n            src/crud/interview/interview.module.ts\n        \n\n\n\n        \n            Описание\n        \n        \n            Модуль для управления собеседованиями.\n\n        \n\n\n        \n            \n                \n                    Провайдеры\n                    \n                        \n                            InterviewRepository\n                        \n                        \n                            InterviewService\n                        \n                    \n                \n                \n                    Контроллеры\n                    \n                        \n                            InterviewController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { InterviewController } from './interview.controller'\nimport { InterviewService } from './interview.service'\nimport { InterviewRepository } from './interview.repository'\n\n/**\n * Модуль для управления собеседованиями.\n */\n@Module({\n  controllers: [InterviewController],\n  providers: [InterviewService, InterviewRepository],\n})\nexport class InterviewModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"injectables/InterviewRepository.html":{"url":"injectables/InterviewRepository.html","title":"injectable - InterviewRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Внедрения\n  InterviewRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/interview/interview.repository.ts\n        \n\n\n            \n                Описание\n            \n            \n                Репозиторий для работы с данными собеседований.\n\n            \n\n\n\n            \n    Индекс\n    \n        \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Конструктор\n        \n            \n                \n                    \nconstructor(postgres: PostgresService)\n                    \n                \n                        \n                            \n                                Определен в src/crud/interview/interview.repository.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Параметры :\n                                    \n                                        \n                                            \n                                                Имя\n                                                    Тип\n                                                Опциональный\n                                            \n                                        \n                                        \n                                                \n                                                        postgres\n                                                  \n                                                        \n                                                                        PostgresService\n                                                        \n                                                  \n                                                    \n                                                            Нет\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateInterviewDto)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/interview/interview.repository.ts:16\n                        \n                    \n\n\n            \n                \n                        Создать новое собеседование.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateInterviewDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Данные для создания собеседования.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/interview/interview.repository.ts:131\n                        \n                    \n\n\n            \n                \n                        Удалить собеседование по идентификатору.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Идентификатор собеседования.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number, limit: number, search?: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/interview/interview.repository.ts:76\n                        \n                    \n\n\n            \n                \n                        Получить список всех собеседований с пагинацией и поиском.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Значение по умолчанию\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                            \n                                                    Номер страницы.\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                            \n                                                    Количество собеседований на странице.\n\n                                            \n                                        \n                                        \n                                                search\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Да\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    Строка для поиска.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/interview/interview.repository.ts:116\n                        \n                    \n\n\n            \n                \n                        Получить информацию о собеседовании по идентификатору.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Идентификатор собеседования.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, dto: CreateInterviewDto)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/interview/interview.repository.ts:45\n                        \n                    \n\n\n            \n                \n                        Обновить данные собеседования.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Идентификатор собеседования.\n\n                                            \n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateInterviewDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Данные для обновления собеседования.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { PostgresService } from '../../db/postgres/postgres.service'\nimport { CreateInterviewDto } from './dto/create-interview.dto'\n\n/**\n * Репозиторий для работы с данными собеседований.\n */\n@Injectable()\nexport class InterviewRepository {\n  constructor(private readonly postgres: PostgresService) {}\n\n  /**\n   * Создать новое собеседование.\n   * @param dto Данные для создания собеседования.\n   */\n  async create(dto: CreateInterviewDto) {\n    return this.postgres.interview.create({\n      data: {\n        title: dto.title,\n        status: dto.status,\n        candidateImageUrl: dto.candidateImageUrl,\n        candidateFullName: dto.candidateFullName,\n        interviewDateTime: dto.interviewDateTime,\n        duration: dto.duration,\n        finalComment: dto.finalComment,\n        reportLink: dto.reportLink,\n        participants: {\n          connect: dto.participantIds.map((id) => ({ id })),\n        },\n        tests: {\n          connect: dto.testIds.map((id) => ({ id })),\n        },\n        tasks: {\n          connect: dto.taskIds.map((id) => ({ id })),\n        },\n      },\n    })\n  }\n\n  /**\n   * Обновить данные собеседования.\n   * @param id Идентификатор собеседования.\n   * @param dto Данные для обновления собеседования.\n   */\n  async update(id: string, dto: CreateInterviewDto) {\n    return this.postgres.interview.update({\n      where: { id },\n      data: {\n        title: dto.title,\n        status: dto.status,\n        candidateImageUrl: dto.candidateImageUrl,\n        candidateFullName: dto.candidateFullName,\n        interviewDateTime: dto.interviewDateTime,\n        duration: dto.duration,\n        finalComment: dto.finalComment,\n        reportLink: dto.reportLink,\n        participants: {\n          connect: dto.participantIds.map((id) => ({ id })),\n        },\n        tests: {\n          connect: dto.testIds.map((id) => ({ id })),\n        },\n        tasks: {\n          connect: dto.taskIds.map((id) => ({ id })),\n        },\n      },\n    })\n  }\n\n  /**\n   * Получить список всех собеседований с пагинацией и поиском.\n   * @param page Номер страницы.\n   * @param limit Количество собеседований на странице.\n   * @param search Строка для поиска.\n   */\n  async findAll(page: number = 1, limit: number = 10, search?: string) {\n    const skip = (page - 1) * limit\n\n    const [interviews, totalCount] = await Promise.all([\n      this.postgres.interview.findMany({\n        skip,\n        take: limit,\n        where: search\n          ? {\n              title: {\n                contains: search,\n                mode: 'insensitive',\n              },\n            }\n          : {},\n      }),\n      this.postgres.interview.count({\n        where: search\n          ? {\n              title: {\n                contains: search,\n                mode: 'insensitive',\n              },\n            }\n          : {},\n      }),\n    ])\n\n    return {\n      data: interviews,\n      totalCount,\n      totalPages: Math.ceil(totalCount / limit),\n      currentPage: page,\n    }\n  }\n\n  /**\n   * Получить информацию о собеседовании по идентификатору.\n   * @param id Идентификатор собеседования.\n   */\n  async findById(id: string) {\n    return this.postgres.interview.findUnique({\n      where: { id },\n      include: {\n        participants: true,\n        tests: true,\n        tasks: true,\n      },\n    })\n  }\n\n  /**\n   * Удалить собеседование по идентификатору.\n   * @param id Идентификатор собеседования.\n   */\n  async delete(id: string) {\n    return this.postgres.interview.delete({\n      where: { id },\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"injectables/InterviewService.html":{"url":"injectables/InterviewService.html","title":"injectable - InterviewService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Внедрения\n  InterviewService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/interview/interview.service.ts\n        \n\n\n            \n                Описание\n            \n            \n                Сервис для управления логикой собеседований.\n\n            \n\n\n\n            \n    Индекс\n    \n        \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Конструктор\n        \n            \n                \n                    \nconstructor(interviewRepository: InterviewRepository)\n                    \n                \n                        \n                            \n                                Определен в src/crud/interview/interview.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Параметры :\n                                    \n                                        \n                                            \n                                                Имя\n                                                    Тип\n                                                Опциональный\n                                            \n                                        \n                                        \n                                                \n                                                        interviewRepository\n                                                  \n                                                        \n                                                                        InterviewRepository\n                                                        \n                                                  \n                                                    \n                                                            Нет\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateInterviewDto)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/interview/interview.service.ts:16\n                        \n                    \n\n\n            \n                \n                        Создать новое собеседование.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateInterviewDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Данные для создания собеседования.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/interview/interview.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Удалить собеседование.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Идентификатор собеседования.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page?: number, limit?: number, search?: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/interview/interview.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Получить список всех собеседований.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                            \n                                                    Номер страницы для пагинации.\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                            \n                                                    Количество собеседований на странице.\n\n                                            \n                                        \n                                        \n                                                search\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                            \n                                                    Строка для поиска по названию собеседования.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/interview/interview.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Получить информацию о собеседовании по идентификатору.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Идентификатор собеседования.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, dto: CreateInterviewDto)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/interview/interview.service.ts:25\n                        \n                    \n\n\n            \n                \n                        Обновить данные собеседования.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Идентификатор собеседования.\n\n                                            \n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateInterviewDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Данные для обновления собеседования.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { InterviewRepository } from './interview.repository'\nimport { CreateInterviewDto } from './dto/create-interview.dto'\n\n/**\n * Сервис для управления логикой собеседований.\n */\n@Injectable()\nexport class InterviewService {\n  constructor(private readonly interviewRepository: InterviewRepository) {}\n\n  /**\n   * Создать новое собеседование.\n   * @param dto Данные для создания собеседования.\n   */\n  async create(dto: CreateInterviewDto) {\n    return this.interviewRepository.create(dto)\n  }\n\n  /**\n   * Обновить данные собеседования.\n   * @param id Идентификатор собеседования.\n   * @param dto Данные для обновления собеседования.\n   */\n  async update(id: string, dto: CreateInterviewDto) {\n    return this.interviewRepository.update(id, dto)\n  }\n\n  /**\n   * Удалить собеседование.\n   * @param id Идентификатор собеседования.\n   */\n  async delete(id: string) {\n    return this.interviewRepository.delete(id)\n  }\n\n  /**\n   * Получить список всех собеседований.\n   * @param page Номер страницы для пагинации.\n   * @param limit Количество собеседований на странице.\n   * @param search Строка для поиска по названию собеседования.\n   */\n  async findAll(page?: number, limit?: number, search?: string) {\n    return this.interviewRepository.findAll(page, limit, search)\n  }\n\n  /**\n   * Получить информацию о собеседовании по идентификатору.\n   * @param id Идентификатор собеседования.\n   */\n  async findById(id: string) {\n    return this.interviewRepository.findById(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"guards/JwtAuthGuard.html":{"url":"guards/JwtAuthGuard.html","title":"guard - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Защитники\n    JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            Файл\n            \n            \n                src/utils/jwtAuthGuard/jwtAuthGuard.ts\n            \n\n\n                \n                Описание\n                \n                \n                    Защитник для аутентификации с использованием JSON Web Token (JWT).\nЭтот класс реализует интерфейс CanActivate и проверяет наличие и\nдействительность JWT в заголовке авторизации.\n\n                \n\n\n\n\n                \n    Индекс\n    \n        \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Определен в src/utils/jwtAuthGuard/jwtAuthGuard.ts:25\n                        \n                    \n\n\n            \n                \n                        Проверяет, может ли текущий запрос быть обработан.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nКонтекст выполнения, содержащий информацию о текущем запросе.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     boolean | Promise | Observable\n\n                        \n                            \n                                \nВозвращает true, если запрос может быть обработан, иначе выбрасывает исключение.\n\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common'\nimport { Observable } from 'rxjs'\nimport * as jwt from 'jsonwebtoken'\n\n/**\n * Защитник для аутентификации с использованием JSON Web Token (JWT).\n *\n * Этот класс реализует интерфейс CanActivate и проверяет наличие и\n * действительность JWT в заголовке авторизации.\n */\n@Injectable()\nexport class JwtAuthGuard implements CanActivate {\n  /**\n   * Проверяет, может ли текущий запрос быть обработан.\n   *\n   * @param {ExecutionContext} context - Контекст выполнения, содержащий информацию о текущем запросе.\n   * @returns {boolean | Promise | Observable} - Возвращает true, если запрос может быть обработан, иначе выбрасывает исключение.\n   * @throws {UnauthorizedException} - Если заголовок авторизации отсутствует или токен недействителен.\n   */\n  canActivate(\n    context: ExecutionContext\n  ): boolean | Promise | Observable {\n    const request = context.switchToHttp().getRequest()\n    const authHeader = request.headers.authorization\n\n    // Проверка наличия заголовка авторизации\n    if (!authHeader) {\n      throw new UnauthorizedException('Заголовок авторизации отсутствует')\n    }\n\n    // Разделение заголовка на тип и токен\n    const [bearer, token] = authHeader.split(' ')\n\n    // Проверка корректности заголовка авторизации\n    if (bearer !== 'Bearer' || !token) {\n      throw new UnauthorizedException('Недопустимый заголовок авторизации')\n    }\n\n    try {\n      // Проверка и декодирование токена\n      request.user = jwt.verify(token, process.env.JWT_SECRET)\n      return true\n    } catch (error) {\n      throw new UnauthorizedException('Неверный токен')\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"modules/JwtModule.html":{"url":"modules/JwtModule.html","title":"module - JwtModule","body":"\n                   \n\n\n\n\n    Модули\n    JwtModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_JwtModule\n\n\n\ncluster_JwtModule_exports\n\n\n\ncluster_JwtModule_providers\n\n\n\n\nJwtService \n\nJwtService \n\n\n\nJwtModule\n\nJwtModule\n\nJwtService  -->\n\nJwtModule->JwtService \n\n\n\n\n\nJwtService\n\nJwtService\n\nJwtModule -->\n\nJwtService->JwtModule\n\n\n\n\n\n\n    \n    \n    \n        Приблизить\n        Сброс\n        Отдалить\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            Файл\n        \n        \n            src/utils/jwt/jwt.module.ts\n        \n\n\n\n        \n            Описание\n        \n        \n            Модуль для работы с JSON Web Token (JWT) (JwtModule).\nЭтот модуль предоставляет сервис для создания и верификации JWT,\nа также делает его доступным для других модулей приложения.\n\n        \n\n\n        \n            \n                \n                    Провайдеры\n                    \n                        \n                            JwtService\n                        \n                    \n                \n                \n                    Экспорт\n                    \n                        \n                            JwtService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Global } from '@nestjs/common'\nimport { JwtService } from './jwt.service'\n\n/**\n * Модуль для работы с JSON Web Token (JWT) (JwtModule).\n *\n * Этот модуль предоставляет сервис для создания и верификации JWT,\n * а также делает его доступным для других модулей приложения.\n */\n@Global()\n@Module({\n  providers: [JwtService], // Сервис, предоставляемый модулем\n  exports: [JwtService], // Экспортируемый сервис для использования в других модулях\n})\nexport class JwtModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"injectables/JwtService.html":{"url":"injectables/JwtService.html","title":"injectable - JwtService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Внедрения\n  JwtService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/utils/jwt/jwt.service.ts\n        \n\n\n            \n                Описание\n            \n            \n                Сервис для работы с JSON Web Token (JWT).\nЭтот сервис предоставляет методы для создания и проверки JWT.\n\n            \n\n\n\n            \n    Индекс\n    \n        \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                signJwt\n                            \n                            \n                                verifyJwt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Конструктор\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Определен в src/utils/jwt/jwt.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Параметры :\n                                    \n                                        \n                                            \n                                                Имя\n                                                    Тип\n                                                Опциональный\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            Нет\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                        signJwt\n                        \n                    \n                \n            \n            \n                \nsignJwt(payload, expiresIn: StringValue)\n                \n            \n\n\n                    \n                        \n                            Определен в src/utils/jwt/jwt.service.ts:23\n                        \n                    \n\n\n            \n                \n                        Создает JWT на основе переданного полезного груза и времени истечения.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nПолезный груз, который будет закодирован в токене.\n\n\n                                            \n                                        \n                                        \n                                                expiresIn\n                                            \n                                                        StringValue\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nВремя жизни токена (например, '1h', '2d').\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         string\n\n                        \n                            \n                                \nСгенерированный JWT.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyJwt\n                        \n                    \n                \n            \n            \n                \nverifyJwt(token: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/utils/jwt/jwt.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Проверяет и декодирует JWT.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nJWT, который необходимо проверить.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config'\nimport { Injectable } from '@nestjs/common'\nimport type { StringValue } from 'ms'\nimport * as jwt from 'jsonwebtoken'\n\n/**\n * Сервис для работы с JSON Web Token (JWT).\n *\n * Этот сервис предоставляет методы для создания и проверки JWT.\n */\n@Injectable()\nexport class JwtService {\n  constructor(private config: ConfigService) {}\n\n  /**\n   * Создает JWT на основе переданного полезного груза и времени истечения.\n   *\n   * @param {unknown} payload - Полезный груз, который будет закодирован в токене.\n   * @param {string} expiresIn - Время жизни токена (например, '1h', '2d').\n   * @returns {string} - Сгенерированный JWT.\n   * @throws {Error} - Если секрет не задан.\n   */\n  signJwt(payload: unknown, expiresIn: StringValue): string {\n    const secret = this.config.get('JWT_SECRET')\n    return jwt.sign({ data: payload }, secret, { expiresIn })\n  }\n\n  /**\n   * Проверяет и декодирует JWT.\n   *\n   * @param {string} token - JWT, который необходимо проверить.\n   * @returns {unknown} - Декодированный полезный груз, если токен действителен.\n   * @throws {JsonWebTokenError} - Если токен недействителен.\n   */\n  verifyJwt(token: string): unknown {\n    const secret = this.config.get('JWT_SECRET')\n    return jwt.verify(token, secret)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Классы\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/auth/dto/login.dto.ts\n        \n\n\n            \n                Описание\n            \n            \n                DTO для входа пользователя (LoginDto).\nЭтот класс используется для валидации данных, передаваемых при входе пользователя.\n\n            \n\n\n\n\n            \n    Индекс\n    \n        \n                \n                    \n                        Свойства\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Свойства\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Почта', example: 'user@gmail.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/auth/dto/login.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Пароль', example: 'root1234'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/auth/dto/login.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsEmail, IsNotEmpty } from 'class-validator'\nimport { ApiProperty } from '@nestjs/swagger'\n\n/**\n * DTO для входа пользователя (LoginDto).\n *\n * Этот класс используется для валидации данных, передаваемых при входе пользователя.\n */\nexport class LoginDto {\n  @ApiProperty({ description: 'Почта', example: 'user@gmail.com' })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string // Электронная почта пользователя\n\n  @ApiProperty({ description: 'Пароль', example: 'root1234' })\n  @IsString()\n  @IsNotEmpty()\n  password: string // Пароль пользователя\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"classes/ParticipantDto.html":{"url":"classes/ParticipantDto.html","title":"class - ParticipantDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Классы\n  ParticipantDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/session/dto/create-session.dto.ts\n        \n\n\n\n\n\n\n            \n    Индекс\n    \n        \n                \n                    \n                        Свойства\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                full_name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Опциональный\n                                isActive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Свойства\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Email участника', type: String})@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/session/dto/create-session.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Полное имя участника', type: String})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/session/dto/create-session.dto.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Опциональный\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         boolean\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Активна ли сессия', type: Boolean})@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/session/dto/create-session.dto.ts:84\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsDateString,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n  IsArray,\n  IsEmail,\n  IsBoolean,\n  IsOptional,\n} from 'class-validator'\nimport { ApiProperty } from '@nestjs/swagger'\n\nexport class CreateSessionDto {\n  @ApiProperty({\n    description: 'ID рекрутера, создающего сессию',\n    type: String,\n  })\n  @IsNotEmpty()\n  @IsString()\n  recruiter_id: string\n\n  @ApiProperty({\n    description: 'Название сессии',\n    type: String,\n  })\n  @IsNotEmpty()\n  @IsString()\n  title: string\n\n  @ApiProperty({\n    description: 'Время начала сессии в формате ISO 8601',\n    type: String,\n  })\n  @IsNotEmpty()\n  @IsDateString()\n  startTime: string\n\n  @ApiProperty({\n    description: 'Продолжительность сессии в минутах',\n    type: Number,\n  })\n  @IsNotEmpty()\n  @IsNumber()\n  duration: number\n\n  @ApiProperty({\n    description: 'Массив участников (кандидаты и интервьюеры)',\n    type: () => [ParticipantDto],\n  })\n  @IsArray()\n  participants: ParticipantDto[]\n\n  @ApiProperty({\n    description: 'Массив ID задач, связанных с сессией',\n    type: [String],\n  })\n  @IsArray()\n  tasks: string[]\n}\n\nexport class ParticipantDto {\n  @ApiProperty({\n    description: 'Email участника',\n    type: String,\n  })\n  @IsNotEmpty()\n  @IsEmail()\n  email: string\n\n  @ApiProperty({\n    description: 'Полное имя участника',\n    type: String,\n  })\n  @IsNotEmpty()\n  @IsString()\n  full_name: string\n\n  @ApiProperty({\n    description: 'Активна ли сессия',\n    type: Boolean,\n  })\n  @IsOptional()\n  @IsBoolean()\n  isActive?: boolean\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"modules/PostgresModule.html":{"url":"modules/PostgresModule.html","title":"module - PostgresModule","body":"\n                   \n\n\n\n\n    Модули\n    PostgresModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostgresModule\n\n\n\ncluster_PostgresModule_providers\n\n\n\ncluster_PostgresModule_exports\n\n\n\n\nPostgresService \n\nPostgresService \n\n\n\nPostgresModule\n\nPostgresModule\n\nPostgresService  -->\n\nPostgresModule->PostgresService \n\n\n\n\n\nPostgresService\n\nPostgresService\n\nPostgresModule -->\n\nPostgresService->PostgresModule\n\n\n\n\n\n\n    \n    \n    \n        Приблизить\n        Сброс\n        Отдалить\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            Файл\n        \n        \n            src/db/postgres/postgres.module.ts\n        \n\n\n\n        \n            Описание\n        \n        \n            Модуль для работы с PostgreSQL (PostgresModule).\nЭтот модуль предоставляет сервис для взаимодействия с базой данных PostgreSQL\nи делает его доступным для других модулей приложения.\n\n        \n\n\n        \n            \n                \n                    Провайдеры\n                    \n                        \n                            PostgresService\n                        \n                    \n                \n                \n                    Экспорт\n                    \n                        \n                            PostgresService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common'\nimport { PostgresService } from './postgres.service'\n\n/**\n * Модуль для работы с PostgreSQL (PostgresModule).\n *\n * Этот модуль предоставляет сервис для взаимодействия с базой данных PostgreSQL\n * и делает его доступным для других модулей приложения.\n */\n@Global()\n@Module({\n  providers: [PostgresService], // Сервис, предоставляемый модулем\n  exports: [PostgresService], // Экспортируемый сервис для использования в других модулях\n})\nexport class PostgresModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"injectables/PostgresService.html":{"url":"injectables/PostgresService.html","title":"injectable - PostgresService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Внедрения\n  PostgresService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/db/postgres/postgres.service.ts\n        \n\n\n            \n                Описание\n            \n            \n                Сервис для работы с PostgreSQL через Prisma (PostgresService).\nЭтот сервис управляет подключением к базе данных PostgreSQL\nи реализует интерфейсы для инициализации и завершения работы модуля.\n\n            \n\n            \n                Расширяет\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Индекс\n    \n        \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                        \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n                    \n                        \n                            Определен в src/db/postgres/postgres.service.ts:42\n                        \n                    \n\n\n            \n                \n                        Включает обработку завершения работы приложения.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        INestApplication\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nЭкземпляр приложения NestJS.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Определен в src/db/postgres/postgres.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Метод, вызываемый при завершении работы модуля.\nЗакрывает соединение с базой данных.\n\n\n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Определен в src/db/postgres/postgres.service.ts:25\n                        \n                    \n\n\n            \n                \n                        Метод, вызываемый при инициализации модуля.\nУстанавливает соединение с базой данных.\n\n\n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  INestApplication,\n  Injectable,\n  OnModuleDestroy,\n  OnModuleInit,\n} from '@nestjs/common'\nimport { PrismaClient } from '@prisma/client'\nimport * as process from 'process'\n\n/**\n * Сервис для работы с PostgreSQL через Prisma (PostgresService).\n *\n * Этот сервис управляет подключением к базе данных PostgreSQL\n * и реализует интерфейсы для инициализации и завершения работы модуля.\n */\n@Injectable()\nexport class PostgresService\n  extends PrismaClient\n  implements OnModuleInit, OnModuleDestroy\n{\n  /**\n   * Метод, вызываемый при инициализации модуля.\n   * Устанавливает соединение с базой данных.\n   */\n  async onModuleInit() {\n    await this.$connect()\n  }\n\n  /**\n   * Метод, вызываемый при завершении работы модуля.\n   * Закрывает соединение с базой данных.\n   */\n  async onModuleDestroy() {\n    await this.$disconnect()\n  }\n\n  /**\n   * Включает обработку завершения работы приложения.\n   *\n   * @param {INestApplication} app - Экземпляр приложения NestJS.\n   */\n  async enableShutdownHooks(app: INestApplication) {\n    process.on('beforeExit', async () => {\n      await app.close()\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"controllers/QuestionController.html":{"url":"controllers/QuestionController.html","title":"controller - QuestionController","body":"\n                   \n\n\n\n\n\n\n  Контроллеры\n  QuestionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/question/question.controller.ts\n        \n\n            \n                Префикс\n            \n            \n                questions\n            \n\n\n            \n                Описание\n            \n            \n                Контроллер для управления вопросами.\n\n            \n\n\n\n\n            \n    Индекс\n    \n        \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createQuestionDto: CreateQuestionWithGroupDto)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Создать новый вопрос'})@Post()\n                \n            \n\n                    \n                        \n                            Определен в src/crud/question/question.controller.ts:37\n                        \n                    \n\n\n            \n                \n                        Создать новый вопрос.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                createQuestionDto\n                                            \n                                                            CreateQuestionWithGroupDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Данные для создания группы вопросов.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Удалить вопрос'})@Delete(':id')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/question/question.controller.ts:69\n                        \n                    \n\n\n            \n                \n                        Удалить вопрос.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Идентификатор вопроса.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(category?: string, userId?: string)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Получить список всех вопросов'})@Get()\n                \n            \n\n                    \n                        \n                            Определен в src/crud/question/question.controller.ts:84\n                        \n                    \n\n\n            \n                \n                        Получить список всех вопросов.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                            \n                                                    Фильтр по категории.\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                            \n                                                    Фильтр по ID пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateQuestionDto: CreateQuestionWithGroupDto)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Обновить данные вопроса'})@Patch(':id')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/question/question.controller.ts:52\n                        \n                    \n\n\n            \n                \n                        Обновить данные вопроса.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Идентификатор вопроса.\n\n                                            \n                                        \n                                        \n                                                updateQuestionDto\n                                            \n                                                            CreateQuestionWithGroupDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Данные для обновления группы вопросов.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpException,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n} from '@nestjs/common'\nimport { QuestionService } from './question.service'\nimport { CreateQuestionWithGroupDto } from './dto/create-question.dto'\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger'\nimport { JwtAuthGuard } from '../../utils/jwtAuthGuard/jwtAuthGuard'\nimport { RolesGuard } from '../../utils/roleGuard/roles.guard'\nimport { Roles } from '../../utils/roleGuard/role-auth.decorator'\n\n/**\n * Контроллер для управления вопросами.\n */\n@UseGuards(JwtAuthGuard, RolesGuard)\n@ApiBearerAuth()\n@Roles(['HR', 'INTERVIEWER'])\n@ApiTags('Вопросы')\n@Controller('questions')\nexport class QuestionController {\n  constructor(private readonly questionService: QuestionService) {}\n\n  /**\n   * Создать новый вопрос.\n   * @param createQuestionDto Данные для создания группы вопросов.\n   */\n  @ApiOperation({ summary: 'Создать новый вопрос' })\n  @Post()\n  async create(@Body() createQuestionDto: CreateQuestionWithGroupDto) {\n    try {\n      return await this.questionService.create(createQuestionDto)\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n\n  /**\n   * Обновить данные вопроса.\n   * @param id Идентификатор вопроса.\n   * @param updateQuestionDto Данные для обновления группы вопросов.\n   */\n  @ApiOperation({ summary: 'Обновить данные вопроса' })\n  @Patch(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() updateQuestionDto: CreateQuestionWithGroupDto\n  ) {\n    try {\n      return await this.questionService.update(id, updateQuestionDto)\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n\n  /**\n   * Удалить вопрос.\n   * @param id Идентификатор вопроса.\n   */\n  @ApiOperation({ summary: 'Удалить вопрос' })\n  @Delete(':id')\n  async delete(@Param('id') id: string) {\n    try {\n      return await this.questionService.delete(id)\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n\n  /**\n   * Получить список всех вопросов.\n   * @param category Фильтр по категории.\n   * @param userId Фильтр по ID пользователя.\n   */\n  @ApiOperation({ summary: 'Получить список всех вопросов' })\n  @Get()\n  async findAll(@Query('category') category?: string, @Query('userId') userId?: string) {\n    try {\n      return this.questionService.getAll(category, userId)\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"classes/QuestionDto.html":{"url":"classes/QuestionDto.html","title":"class - QuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Классы\n  QuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/question/dto/create-question.dto.ts\n        \n\n\n            \n                Описание\n            \n            \n                DTO для вопроса.\n\n            \n\n\n\n\n            \n    Индекс\n    \n        \n                \n                    \n                        Свойства\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Опциональный\n                                comment\n                            \n                            \n                                    \n                                    \n                                    \n                                correctAnswer\n                            \n                            \n                                    \n                                    \n                                    \n                                developerLevel\n                            \n                            \n                                    \n                                    \n                                    \n                                questionText\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Свойства\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Опциональный\n                        comment\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Комментарий'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/question/dto/create-question.dto.ts:38\n                        \n                    \n\n            \n                \n                    Комментарий к вопросу.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        correctAnswer\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Правильный ответ'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/question/dto/create-question.dto.ts:31\n                        \n                    \n\n            \n                \n                    Правильный ответ.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        developerLevel\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Уровень разработчика'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/question/dto/create-question.dto.ts:15\n                        \n                    \n\n            \n                \n                    Уровень разработчика.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        questionText\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Текст вопроса'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/question/dto/create-question.dto.ts:23\n                        \n                    \n\n            \n                \n                    Текст вопроса.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'\nimport { IsNotEmpty, IsString, IsArray, ArrayNotEmpty } from 'class-validator'\nimport { Category } from '@prisma/client'\n\n/**\n * DTO для вопроса.\n */\nclass QuestionDto {\n  /**\n   * Уровень разработчика.\n   */\n  @ApiProperty({ description: 'Уровень разработчика' })\n  @IsNotEmpty()\n  @IsString()\n  developerLevel: string\n\n  /**\n   * Текст вопроса.\n   */\n  @ApiProperty({ description: 'Текст вопроса' })\n  @IsNotEmpty()\n  @IsString()\n  questionText: string\n\n  /**\n   * Правильный ответ.\n   */\n  @ApiProperty({ description: 'Правильный ответ' })\n  @IsNotEmpty()\n  @IsString()\n  correctAnswer: string\n\n  /**\n   * Комментарий к вопросу.\n   */\n  @ApiProperty({ description: 'Комментарий' })\n  @IsString()\n  comment?: string\n}\n\n/**\n * DTO для создания группы вопросов.\n */\nexport class CreateQuestionWithGroupDto {\n  /**\n   * Название группы вопросов.\n   */\n  @ApiProperty({ description: 'Название группы вопросов' })\n  @IsNotEmpty()\n  @IsString()\n  title: string\n\n  /**\n   * Автор группы вопросов.\n   */\n  @ApiProperty({ description: 'Автор группы вопросов' })\n  @IsNotEmpty()\n  @IsString()\n  author: string\n\n  /**\n   * ID пользователя, создающего группу вопросов.\n   */\n  @ApiProperty({ description: 'ID пользователя, создающего группу вопросов' })\n  @IsNotEmpty()\n  @IsString()\n  userId: string // Добавлено поле userId\n\n  /**\n   * Категория группы вопросов.\n   */\n  @ApiProperty({ description: 'Категория группы вопросов' })\n  @IsNotEmpty()\n  @IsString()\n  categoryName: Category // Добавлено поле categoryName\n\n  /**\n   * Список вопросов в группе.\n   */\n  @ApiProperty({ type: [QuestionDto], description: 'Список вопросов в группе' })\n  @IsArray()\n  @ArrayNotEmpty()\n  questions: QuestionDto[]\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"modules/QuestionModule.html":{"url":"modules/QuestionModule.html","title":"module - QuestionModule","body":"\n                   \n\n\n\n\n    Модули\n    QuestionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QuestionModule\n\n\n\ncluster_QuestionModule_providers\n\n\n\n\nQuestionRepository\n\nQuestionRepository\n\n\n\nQuestionModule\n\nQuestionModule\n\nQuestionModule -->\n\nQuestionRepository->QuestionModule\n\n\n\n\n\nQuestionService\n\nQuestionService\n\nQuestionModule -->\n\nQuestionService->QuestionModule\n\n\n\n\n\n\n    \n    \n    \n        Приблизить\n        Сброс\n        Отдалить\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            Файл\n        \n        \n            src/crud/question/question.module.ts\n        \n\n\n\n        \n            Описание\n        \n        \n            Модуль для управления вопросами.\n\n        \n\n\n        \n            \n                \n                    Провайдеры\n                    \n                        \n                            QuestionRepository\n                        \n                        \n                            QuestionService\n                        \n                    \n                \n                \n                    Контроллеры\n                    \n                        \n                            QuestionController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { QuestionController } from './question.controller'\nimport { QuestionService } from './question.service'\nimport { QuestionRepository } from './question.repository'\n\n/**\n * Модуль для управления вопросами.\n */\n@Module({\n  controllers: [QuestionController],\n  providers: [QuestionService, QuestionRepository],\n})\nexport class QuestionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"injectables/QuestionRepository.html":{"url":"injectables/QuestionRepository.html","title":"injectable - QuestionRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Внедрения\n  QuestionRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/question/question.repository.ts\n        \n\n\n            \n                Описание\n            \n            \n                Репозиторий для работы с группами вопросов.\n\n            \n\n\n\n            \n    Индекс\n    \n        \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Конструктор\n        \n            \n                \n                    \nconstructor(postgres: PostgresService)\n                    \n                \n                        \n                            \n                                Определен в src/crud/question/question.repository.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Параметры :\n                                    \n                                        \n                                            \n                                                Имя\n                                                    Тип\n                                                Опциональный\n                                            \n                                        \n                                        \n                                                \n                                                        postgres\n                                                  \n                                                        \n                                                                        PostgresService\n                                                        \n                                                  \n                                                    \n                                                            Нет\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateQuestionWithGroupDto)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/question/question.repository.ts:16\n                        \n                    \n\n\n            \n                \n                        Создать новую группу вопросов.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateQuestionWithGroupDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Данные для создания группы вопросов.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/question/question.repository.ts:72\n                        \n                    \n\n\n            \n                \n                        Удалить группу вопросов по ID.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Идентификатор группы вопросов.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(category?: string, userId?: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/question/question.repository.ts:81\n                        \n                    \n\n\n            \n                \n                        Найти все группы вопросов с возможностью фильтрации.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                            \n                                                    \nФильтр по категории.\n\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                            \n                                                    Фильтр по ID пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/question/question.repository.ts:64\n                        \n                    \n\n\n            \n                \n                        Найти группу вопросов по ID.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Идентификатор группы вопросов.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, dto: CreateQuestionWithGroupDto)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/question/question.repository.ts:40\n                        \n                    \n\n\n            \n                \n                        Обновить группу вопросов по ID.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Идентификатор группы вопросов.\n\n                                            \n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateQuestionWithGroupDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Данные для обновления группы вопросов.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { PostgresService } from '../../db/postgres/postgres.service'\nimport { CreateQuestionWithGroupDto } from './dto/create-question.dto'\n\n/**\n * Репозиторий для работы с группами вопросов.\n */\n@Injectable()\nexport class QuestionRepository {\n  constructor(private readonly postgres: PostgresService) {}\n\n  /**\n   * Создать новую группу вопросов.\n   * @param dto Данные для создания группы вопросов.\n   */\n  async create(dto: CreateQuestionWithGroupDto) {\n    return this.postgres.questionGroup.create({\n      data: {\n        title: dto.title,\n        author: dto.author,\n        userId: dto.userId,\n        categoryName: dto.categoryName,\n        questions: {\n          create: dto.questions.map((question) => ({\n            developerLevel: question.developerLevel,\n            questionText: question.questionText,\n            correctAnswer: question.correctAnswer,\n            comment: question.comment,\n          })),\n        },\n      },\n    })\n  }\n\n  /**\n   * Обновить группу вопросов по ID.\n   * @param id Идентификатор группы вопросов.\n   * @param dto Данные для обновления группы вопросов.\n   */\n  async update(id: string, dto: CreateQuestionWithGroupDto) {\n    return this.postgres.questionGroup.update({\n      where: { id },\n      data: {\n        title: dto.title,\n        author: dto.author,\n        userId: dto.userId,\n        categoryName: dto.categoryName,\n        questions: {\n          create: dto.questions.map((question) => ({\n            developerLevel: question.developerLevel,\n            questionText: question.questionText,\n            correctAnswer: question.correctAnswer,\n            comment: question.comment,\n          })),\n        },\n      },\n    })\n  }\n\n  /**\n   * Найти группу вопросов по ID.\n   * @param id Идентификатор группы вопросов.\n   */\n  async findById(id: string) {\n    return this.postgres.questionGroup.findUnique({ where: { id } })\n  }\n\n  /**\n   * Удалить группу вопросов по ID.\n   * @param id Идентификатор группы вопросов.\n   */\n  async delete(id: string) {\n    return this.postgres.questionGroup.delete({ where: { id } })\n  }\n\n  /**\n   * Найти все группы вопросов с возможностью фильтрации.\n   * @param category * Фильтр по категории.\n   * @param userId Фильтр по ID пользователя.\n   */\n  async findAll(category?: string, userId?: string) {\n    const where: any = {}\n\n    if (category) {\n      where.categoryName = category\n    }\n\n    if (userId) {\n      where.userId = userId\n    }\n\n    return this.postgres.questionGroup.findMany({\n      where,\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"injectables/QuestionService.html":{"url":"injectables/QuestionService.html","title":"injectable - QuestionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Внедрения\n  QuestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/question/question.service.ts\n        \n\n\n            \n                Описание\n            \n            \n                Сервис для управления вопросами.\n\n            \n\n\n\n            \n    Индекс\n    \n        \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Конструктор\n        \n            \n                \n                    \nconstructor(questionRepository: QuestionRepository)\n                    \n                \n                        \n                            \n                                Определен в src/crud/question/question.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Параметры :\n                                    \n                                        \n                                            \n                                                Имя\n                                                    Тип\n                                                Опциональный\n                                            \n                                        \n                                        \n                                                \n                                                        questionRepository\n                                                  \n                                                        \n                                                                        QuestionRepository\n                                                        \n                                                  \n                                                    \n                                                            Нет\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateQuestionWithGroupDto)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/question/question.service.ts:16\n                        \n                    \n\n\n            \n                \n                        Создать новую группу вопросов.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateQuestionWithGroupDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Данные для создания группы вопросов.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/question/question.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Удалить группу вопросов по ID.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Идентификатор группы вопросов.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll(category?: string, userId?: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/question/question.service.ts:50\n                        \n                    \n\n\n            \n                \n                        Получить все группы вопросов с возможностью фильтрации.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                            \n                                                    Фильтр по категории.\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                            \n                                                    Фильтр по ID пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, questionDto: CreateQuestionWithGroupDto)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/question/question.service.ts:25\n                        \n                    \n\n\n            \n                \n                        Обновить группу вопросов по ID.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Идентификатор группы вопросов.\n\n                                            \n                                        \n                                        \n                                                questionDto\n                                            \n                                                            CreateQuestionWithGroupDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    Данные для обновления группы вопросов.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common'\nimport { QuestionRepository } from './question.repository'\nimport { CreateQuestionWithGroupDto } from './dto/create-question.dto'\n\n/**\n * Сервис для управления вопросами.\n */\n@Injectable()\nexport class QuestionService {\n  constructor(private readonly questionRepository: QuestionRepository) {}\n\n  /**\n   * Создать новую группу вопросов.\n   * @param dto Данные для создания группы вопросов.\n   */\n  async create(dto: CreateQuestionWithGroupDto) {\n    return this.questionRepository.create(dto)\n  }\n\n  /**\n   * Обновить группу вопросов по ID.\n   * @param id Идентификатор группы вопросов.\n   * @param questionDto Данные для обновления группы вопросов.\n   */\n  async update(id: string, questionDto: CreateQuestionWithGroupDto) {\n    const questionGroup = await this.questionRepository.findById(id)\n    if (!questionGroup) {\n      throw new NotFoundException(`Question Group with ID ${id} not found`)\n    }\n    return this.questionRepository.update(id, questionDto)\n  }\n\n  /**\n   * Удалить группу вопросов по ID.\n   * @param id Идентификатор группы вопросов.\n   */\n  async delete(id: string) {\n    const questionGroup = await this.questionRepository.findById(id)\n    if (!questionGroup) {\n      throw new NotFoundException(`Question Group with ID ${id} not found`)\n    }\n    return this.questionRepository.delete(id)\n  }\n\n  /**\n   * Получить все группы вопросов с возможностью фильтрации.\n   * @param category Фильтр по категории.\n   * @param userId Фильтр по ID пользователя.\n   */\n  async getAll(category?: string, userId?: string) {\n    return this.questionRepository.findAll(category, userId)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"modules/RedisModule.html":{"url":"modules/RedisModule.html","title":"module - RedisModule","body":"\n                   \n\n\n\n\n    Модули\n    RedisModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_exports\n\n\n\ncluster_RedisModule_providers\n\n\n\n\nRedisService \n\nRedisService \n\n\n\nRedisModule\n\nRedisModule\n\nRedisService  -->\n\nRedisModule->RedisService \n\n\n\n\n\nRedisService\n\nRedisService\n\nRedisModule -->\n\nRedisService->RedisModule\n\n\n\n\n\n\n    \n    \n    \n        Приблизить\n        Сброс\n        Отдалить\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            Файл\n        \n        \n            src/db/redis/redis.module.ts\n        \n\n\n\n        \n            Описание\n        \n        \n            Модуль для работы с Redis (RedisModule).\nЭтот модуль предоставляет сервис для взаимодействия с базой данных Redis\nи делает его доступным для других модулей приложения.\n\n        \n\n\n        \n            \n                \n                    Провайдеры\n                    \n                        \n                            RedisService\n                        \n                    \n                \n                \n                    Экспорт\n                    \n                        \n                            RedisService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common'\nimport { RedisService } from './redis.service'\n\n/**\n * Модуль для работы с Redis (RedisModule).\n *\n * Этот модуль предоставляет сервис для взаимодействия с базой данных Redis\n * и делает его доступным для других модулей приложения.\n */\n@Global()\n@Module({\n  providers: [RedisService], // Сервис, предоставляемый модулем\n  exports: [RedisService], // Экспортируемый сервис для использования в других модулях\n})\nexport class RedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"injectables/RedisService.html":{"url":"injectables/RedisService.html","title":"injectable - RedisService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Внедрения\n  RedisService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/db/redis/redis.service.ts\n        \n\n\n            \n                Описание\n            \n            \n                Сервис для работы с Redis (RedisService).\nЭтот сервис предоставляет клиент Redis для взаимодействия с базой данных Redis.\n\n            \n\n\n\n            \n    Индекс\n    \n        \n                \n                    \n                        Свойства\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                redis\n                            \n                        \n                    \n                \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                getRedisClient\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Конструктор\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Определен в src/db/redis/redis.service.ts:12\n                            \n                        \n\n                \n                    \n                            Конструктор для инициализации клиента Redis.\nИспользует переменные окружения для получения хоста и порта Redis.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                        getRedisClient\n                        \n                    \n                \n            \n            \n                \ngetRedisClient()\n                \n            \n\n\n                    \n                        \n                            Определен в src/db/redis/redis.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Получает клиент Redis.\n\n\n                        \n                            Тип возвращаемого значения :     Redis\n\n                        \n                            \n                                Экземпляр клиента Redis для выполнения операций с базой данных.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Свойства\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        redis\n                        \n                    \n                \n            \n                \n                    \n                        Тип :     Redis\n\n                    \n                \n                    \n                        \n                                Определен в src/db/redis/redis.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport Redis from 'ioredis'\nimport * as process from 'process'\n\n/**\n * Сервис для работы с Redis (RedisService).\n *\n * Этот сервис предоставляет клиент Redis для взаимодействия с базой данных Redis.\n */\n@Injectable()\nexport class RedisService {\n  private readonly redis: Redis // Клиент Redis\n\n  /**\n   * Конструктор для инициализации клиента Redis.\n   *\n   * Использует переменные окружения для получения хоста и порта Redis.\n   */\n  constructor() {\n    this.redis = new Redis({\n      host: process.env.REDIS_HOST, // Хост Redis\n      port: Number(process.env.REDIS_PORT), // Порт Redis\n    })\n  }\n\n  /**\n   * Получает клиент Redis.\n   *\n   * @returns {Redis} Экземпляр клиента Redis для выполнения операций с базой данных.\n   */\n  getRedisClient(): Redis {\n    return this.redis\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"injectables/RefreshService.html":{"url":"injectables/RefreshService.html","title":"injectable - RefreshService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Внедрения\n  RefreshService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/auth/service/refresh.service.ts\n        \n\n\n            \n                Описание\n            \n            \n                Сервис для работы с токенами обновления (RefreshService).\nЭтот сервис управляет сохранением, поиском и удалением токенов обновления в Redis.\n\n            \n\n\n\n            \n    Индекс\n    \n        \n                \n                    \n                        Свойства\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                redisClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findToken\n                            \n                            \n                                    Async\n                                removeToken\n                            \n                            \n                                    Async\n                                saveToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Конструктор\n        \n            \n                \n                    \nconstructor(redisService: RedisService)\n                    \n                \n                        \n                            \n                                Определен в src/crud/auth/service/refresh.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Параметры :\n                                    \n                                        \n                                            \n                                                Имя\n                                                    Тип\n                                                Опциональный\n                                            \n                                        \n                                        \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            Нет\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    findToken(userId: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/auth/service/refresh.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Находит токен обновления для пользователя в Redis.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nID пользователя, для которого ищется токен.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \nВозвращает токен обновления или null, если не найден.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeToken(userId: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/auth/service/refresh.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Удаляет токен обновления для пользователя из Redis.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nID пользователя, для которого удаляется токен.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveToken(userId: string, refreshToken: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/auth/service/refresh.service.ts:24\n                        \n                    \n\n\n            \n                \n                        Сохраняет токен обновления для пользователя в Redis.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nID пользователя, для которого сохраняется токен.\n\n\n                                            \n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nТокен обновления, который нужно сохранить.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Свойства\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        redisClient\n                        \n                    \n                \n            \n                \n                    \n                        Тип :     Redis\n\n                    \n                \n                    \n                        \n                                Определен в src/crud/auth/service/refresh.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { RedisService } from '../../../db/redis/redis.service'\nimport { Injectable } from '@nestjs/common'\nimport Redis from 'ioredis'\n\n/**\n * Сервис для работы с токенами обновления (RefreshService).\n *\n * Этот сервис управляет сохранением, поиском и удалением токенов обновления в Redis.\n */\n@Injectable()\nexport class RefreshService {\n  private readonly redisClient: Redis\n\n  constructor(private readonly redisService: RedisService) {\n    this.redisClient = this.redisService.getRedisClient()\n  }\n\n  /**\n   * Сохраняет токен обновления для пользователя в Redis.\n   *\n   * @param {string} userId - ID пользователя, для которого сохраняется токен.\n   * @param {string} refreshToken - Токен обновления, который нужно сохранить.\n   */\n  async saveToken(userId: string, refreshToken: string) {\n    await this.redisClient.set(`refresh_token:${userId}`, refreshToken)\n  }\n\n  /**\n   * Находит токен обновления для пользователя в Redis.\n   *\n   * @param {string} userId - ID пользователя, для которого ищется токен.\n   * @returns {Promise} - Возвращает токен обновления или null, если не найден.\n   */\n  async findToken(userId: string) {\n    return this.redisClient.get(`refresh_token:${userId}`)\n  }\n\n  /**\n   * Удаляет токен обновления для пользователя из Redis.\n   *\n   * @param {string} userId - ID пользователя, для которого удаляется токен.\n   */\n  async removeToken(userId: string) {\n    await this.redisClient.del(`refresh_token:${userId}`)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Классы\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/auth/dto/register.dto.ts\n        \n\n\n            \n                Описание\n            \n            \n                DTO для регистрации пользователя (RegisterDto).\nЭтот класс расширяет LoginDto и добавляет дополнительные поля для регистрации.\n\n            \n\n            \n                Расширяет\n            \n            \n                            LoginDto\n            \n\n\n\n            \n    Индекс\n    \n        \n                \n                    \n                        Свойства\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                full_name\n                            \n                            \n                                    \n                                    \n                                    \n                                role\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Свойства\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'ФИО', example: 'Барецкий Станислав Валерьевич'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/auth/dto/register.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         $Enums.UserRole\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Роль пользователя', example: 'RECRUITER'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/auth/dto/register.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Почта', example: 'user@gmail.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Наследуемый из         LoginDto\n\n                            \n                        \n                    \n                        \n                                Определен в         LoginDto:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'Пароль', example: 'root1234'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Наследуемый из         LoginDto\n\n                            \n                        \n                    \n                        \n                                Определен в         LoginDto:18\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator'\nimport { ApiProperty } from '@nestjs/swagger'\nimport { $Enums } from '@prisma/client'\nimport { LoginDto } from './login.dto'\n\n/**\n * DTO для регистрации пользователя (RegisterDto).\n *\n * Этот класс расширяет LoginDto и добавляет дополнительные поля для регистрации.\n */\nexport class RegisterDto extends LoginDto {\n  @ApiProperty({ description: 'ФИО', example: 'Барецкий Станислав Валерьевич' })\n  @IsString()\n  @IsNotEmpty()\n  full_name: string // Полное имя пользователя\n\n  @ApiProperty({ description: 'Роль пользователя', example: 'RECRUITER' })\n  @IsString()\n  @IsNotEmpty()\n  role: $Enums.UserRole // Роль пользователя\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"injectables/ResponseBuildService.html":{"url":"injectables/ResponseBuildService.html","title":"injectable - ResponseBuildService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Внедрения\n  ResponseBuildService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/utils/resBuild/resBuild.service.ts\n        \n\n\n\n\n\n            \n    Индекс\n    \n        \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                build\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                        build\n                        \n                    \n                \n            \n            \n                \nbuild(params: IResponseBuild)\n                \n            \n\n\n                    \n                        \n                            Определен в src/utils/resBuild/resBuild.service.ts:53\n                        \n                    \n\n                    \n                        \n                            Типы параметров :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Создает ответ API на основе переданных параметров.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            IResponseBuild\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nПараметры для сборки ответа.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         IResponseBuild\n\n                        \n                            \n                                \nСобранный ответ API.\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\n\n/**\n * Интерфейс cборки ответа API.\n *\n * Этот интерфейс описывает структуру ответа, который возвращается из API.\n * Он включает в себя статус код, сообщение и данные, которые могут быть возвращены.\n *\n * @template T - Тип данных, которые могут быть возвращены в ответе.\n * @public\n */\nexport interface IResponseBuild {\n  /**\n   * @cfg {number} statusCode - Статус код ответа.\n   *\n   * Этот код указывает на результат выполнения запроса.\n   * Например:\n   * - 200: Успешный запрос.\n   * - 400: Ошибка клиента (например, неверный запрос).\n   * - 404: Ресурс не найден.\n   * - 500: Ошибка сервера.\n   */\n  statusCode: number\n\n  /**\n   * @cfg {string} [message] - Сообщение, связанное с ответом.\n   *\n   * Это поле может содержать дополнительную информацию о результате запроса.\n   * Например, оно может использоваться для передачи сообщений об ошибках или\n   * подтверждения успешного выполнения операции.\n   */\n  message?: string\n\n  /**\n   * @cfg {T} [data] - Данные, возвращаемые в ответе.\n   *\n   * Это поле содержит полезную информацию, которая может быть возвращена\n   * в результате выполнения запроса. Тип данных определяется параметром T.\n   * Например, это может быть объект, массив или любой другой тип данных.\n   */\n  data?: T\n}\n\n@Injectable()\nexport class ResponseBuildService {\n  /**\n   * Создает ответ API на основе переданных параметров.\n   *\n   * @param {IResponseBuild} params - Параметры для сборки ответа.\n   * @returns {IResponseBuild} - Собранный ответ API.\n   * @template T - Тип данных, которые могут быть возвращены в ответе.\n   */\n  build(params: IResponseBuild): IResponseBuild {\n    return {\n      statusCode: params.statusCode ?? 200, // Используем переданный статус код или 200 по умолчанию\n      message: params.message, // Сообщение, если оно есть\n      data: params.data, // Данные, если они есть\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"modules/ResponseBuilderModule.html":{"url":"modules/ResponseBuilderModule.html","title":"module - ResponseBuilderModule","body":"\n                   \n\n\n\n\n    Модули\n    ResponseBuilderModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ResponseBuilderModule\n\n\n\ncluster_ResponseBuilderModule_providers\n\n\n\ncluster_ResponseBuilderModule_exports\n\n\n\n\nResponseBuildService \n\nResponseBuildService \n\n\n\nResponseBuilderModule\n\nResponseBuilderModule\n\nResponseBuildService  -->\n\nResponseBuilderModule->ResponseBuildService \n\n\n\n\n\nResponseBuildService\n\nResponseBuildService\n\nResponseBuilderModule -->\n\nResponseBuildService->ResponseBuilderModule\n\n\n\n\n\n\n    \n    \n    \n        Приблизить\n        Сброс\n        Отдалить\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            Файл\n        \n        \n            src/utils/resBuild/resBuild.module.ts\n        \n\n\n\n        \n            Описание\n        \n        \n            Модуль для построения ответов (ResponseBuilderModule).\nЭтот модуль предоставляет сервис для построения ответов и делает его доступным\nдля других модулей приложения.\n\n        \n\n\n        \n            \n                \n                    Провайдеры\n                    \n                        \n                            ResponseBuildService\n                        \n                    \n                \n                \n                    Экспорт\n                    \n                        \n                            ResponseBuildService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common'\nimport { ResponseBuildService } from './resBuild.service'\n\n/**\n * Модуль для построения ответов (ResponseBuilderModule).\n *\n * Этот модуль предоставляет сервис для построения ответов и делает его доступным\n * для других модулей приложения.\n */\n@Global()\n@Module({\n  providers: [ResponseBuildService], // Сервис, предоставляемый модулем\n  exports: [ResponseBuildService], // Экспортируемый сервис для использования в других модулях\n})\nexport class ResponseBuilderModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Защитники\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            Файл\n            \n            \n                src/utils/roleGuard/roles.guard.ts\n            \n\n\n                \n                Описание\n                \n                \n                    Защитник ролей (RolesGuard) для проверки доступа на основе ролей пользователя.\n\n                \n\n\n\n\n                \n    Индекс\n    \n        \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Конструктор\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Определен в src/utils/roleGuard/roles.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Параметры :\n                                    \n                                        \n                                            \n                                                Имя\n                                                    Тип\n                                                Опциональный\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            Нет\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Определен в src/utils/roleGuard/roles.guard.ts:25\n                        \n                    \n\n\n            \n                \n                        Проверяет, имеет ли пользователь доступ к маршруту на основе его роли.\n\n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                                Описание\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                            \n                                                    \nКонтекст выполнения, содержащий информацию о текущем запросе.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         boolean\n\n                        \n                            \n                                Возвращает true, если доступ разрешен, иначе выбрасывает исключение UnauthorizedException.\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common'\nimport { Reflector } from '@nestjs/core'\nimport { ROLE_KEY } from './role-auth.decorator'\n\n/**\n * Защитник ролей (RolesGuard) для проверки доступа на основе ролей пользователя.\n */\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  /**\n   * Проверяет, имеет ли пользователь доступ к маршруту на основе его роли.\n   *\n   * @param {ExecutionContext} context - Контекст выполнения, содержащий информацию о текущем запросе.\n   * @returns {boolean} Возвращает true, если доступ разрешен, иначе выбрасывает исключение UnauthorizedException.\n   *\n   * @throws {UnauthorizedException} Если пользователь не авторизован или не имеет роли.\n   */\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRole = this.reflector.get(ROLE_KEY, context.getHandler())\n    if (!requiredRole) {\n      return true // Если роли не указаны, доступ разрешен\n    }\n\n    const request = context.switchToHttp().getRequest()\n    const user: { role: string } = request.user\n\n    if (!user || !user.role) {\n      throw new UnauthorizedException({\n        message: 'Пользователь не авторизован',\n      })\n    }\n\n    return requiredRole.some((role) => user.role === role)\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"controllers/SessionController.html":{"url":"controllers/SessionController.html","title":"controller - SessionController","body":"\n                   \n\n\n\n\n\n\n  Контроллеры\n  SessionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/session/session.controller.ts\n        \n\n            \n                Префикс\n            \n            \n                /api/sessions\n            \n\n\n\n\n\n\n            \n    Индекс\n    \n        \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                addTasksToSession\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                createSession\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                deleteSession\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getSession\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getSessions\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateSession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        addTasksToSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    addTasksToSession(id: string, addTasksDto: AddTasksDto)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Добавить задачи к сессии'})@UseGuards(RolesGuard)@Roles(['INTERVIEWER'])@Patch(':id/tasks')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/session/session.controller.ts:128\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                        \n                                                addTasksDto\n                                            \n                                                            AddTasksDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        createSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    createSession(createSessionDto: CreateSessionDto)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Создать новую сессию'})@UseGuards(RolesGuard)@Roles(['HR'])@Post()\n                \n            \n\n                    \n                        \n                            Определен в src/crud/session/session.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                createSessionDto\n                                            \n                                                            CreateSessionDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        deleteSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteSession(id: string)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Удалить сессию'})@UseGuards(RolesGuard)@Roles(['HR'])@Delete(':id')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/session/session.controller.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSession(id: string)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Получить информацию о сессии'})@UseGuards(RolesGuard)@Roles(['HR', 'INTERVIEWER'])@Get(':id')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/session/session.controller.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getSessions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSessions(filter: FilterSessionsDto, user: any)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Получить список сессий'})@UseGuards(RolesGuard)@Roles(['HR', 'INTERVIEWER'])@Get()\n                \n            \n\n                    \n                        \n                            Определен в src/crud/session/session.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                            FilterSessionsDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        updateSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateSession(id: string, updateSessionDto: CreateSessionDto)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Редактировать сессию'})@UseGuards(RolesGuard)@Roles(['HR'])@Patch(':id')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/session/session.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                        \n                                                updateSessionDto\n                                            \n                                                            CreateSessionDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiOperation, ApiTags } from '@nestjs/swagger'\nimport {\n  Body,\n  Controller,\n  Delete,\n  HttpException,\n  HttpStatus,\n  Param,\n  Post,\n  Patch,\n  UseGuards,\n  Query,\n  Get,\n  createParamDecorator,\n  ExecutionContext,\n} from '@nestjs/common'\nimport { SessionService } from './session.service'\nimport { CreateSessionDto } from './dto/create-session.dto'\nimport { FilterSessionsDto } from './dto/filter-sessions.dto'\nimport { JwtAuthGuard } from '../../utils/jwtAuthGuard/jwtAuthGuard'\nimport { AddTasksDto } from './dto/add-tasks.dto'\nimport { RolesGuard } from '../../utils/roleGuard/roles.guard'\nimport { Roles } from '../../utils/roleGuard/role-auth.decorator'\n\n// TODO Вынести в другой файл\nconst User = createParamDecorator((data: string, ctx: ExecutionContext) => {\n  const request = ctx.switchToHttp().getRequest()\n  return data ? request.user[data] : request.user\n})\n\n@ApiTags('Сессии')\n@UseGuards(JwtAuthGuard)\n@Controller('/api/sessions')\nexport class SessionController {\n  constructor(private readonly sessionService: SessionService) {}\n\n  @ApiOperation({ summary: 'Получить список сессий' })\n  @UseGuards(RolesGuard)\n  @Roles(['HR', 'INTERVIEWER'])\n  @Get()\n  async getSessions(@Query() filter: FilterSessionsDto, @User() user: any) {\n    try {\n      const result = await this.sessionService.getSessions(filter, user.role, user.id)\n      return {\n        statusCode: HttpStatus.OK,\n        message: 'Sessions retrieved successfully',\n        data: result,\n      }\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n\n  @ApiOperation({ summary: 'Создать новую сессию' })\n  @UseGuards(RolesGuard)\n  @Roles(['HR'])\n  @Post()\n  async createSession(@Body() createSessionDto: CreateSessionDto) {\n    try {\n      const session = await this.sessionService.createSession(createSessionDto)\n      return {\n        statusCode: HttpStatus.CREATED,\n        message: 'Сессия успешно создана',\n        data: session,\n      }\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n\n  @ApiOperation({ summary: 'Редактировать сессию' })\n  @UseGuards(RolesGuard)\n  @Roles(['HR'])\n  @Patch(':id')\n  async updateSession(\n    @Param('id') id: string,\n    @Body() updateSessionDto: CreateSessionDto\n  ) {\n    try {\n      const session = await this.sessionService.updateSession(id, updateSessionDto)\n      return {\n        statusCode: HttpStatus.OK,\n        message: 'Сессия успешно обновлена',\n        data: session,\n      }\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n\n  @ApiOperation({ summary: 'Удалить сессию' })\n  @UseGuards(RolesGuard)\n  @Roles(['HR'])\n  @Delete(':id')\n  async deleteSession(@Param('id') id: string) {\n    try {\n      await this.sessionService.deleteSession(id)\n      return {\n        statusCode: HttpStatus.NO_CONTENT,\n        message: 'Сессия успешно удалена',\n      }\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n\n  @ApiOperation({ summary: 'Получить информацию о сессии' })\n  @UseGuards(RolesGuard)\n  @Roles(['HR', 'INTERVIEWER'])\n  @Get(':id')\n  async getSession(@Param('id') id: string) {\n    try {\n      const session = await this.sessionService.getSessionById(id)\n      return {\n        statusCode: HttpStatus.OK,\n        message: 'Session retrieved successfully',\n        data: session,\n      }\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n\n  @ApiOperation({ summary: 'Добавить задачи к сессии' })\n  @UseGuards(RolesGuard)\n  @Roles(['INTERVIEWER'])\n  @Patch(':id/tasks')\n  async addTasksToSession(@Param('id') id: string, @Body() addTasksDto: AddTasksDto) {\n    try {\n      const updatedSession = await this.sessionService.addTasksToSession(\n        id,\n        addTasksDto.taskIds\n      )\n      return {\n        statusCode: HttpStatus.OK,\n        message: 'Tasks added to session successfully',\n        data: updatedSession,\n      }\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"classes/SessionGateway.html":{"url":"classes/SessionGateway.html","title":"class - SessionGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Классы\n  SessionGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/session/session.gateway.ts\n        \n\n\n\n\n            \n                Реализует\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Индекс\n    \n        \n                \n                    \n                        Свойства\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                connectedUsers\n                            \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                handleEndSession\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                handleJoinSession\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                handleStartSession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Конструктор\n        \n            \n                \n                    \nconstructor(sessionService: SessionService)\n                    \n                \n                        \n                            \n                                Определен в src/crud/session/session.gateway.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Параметры :\n                                    \n                                        \n                                            \n                                                Имя\n                                                    Тип\n                                                Опциональный\n                                            \n                                        \n                                        \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            Нет\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Свойства\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        connectedUsers\n                        \n                    \n                \n            \n                \n                    \n                        Тип :     Map\n\n                    \n                \n                \n                    \n                        Значение по умолчанию : new Map()\n                    \n                \n                    \n                        \n                                Определен в src/crud/session/session.gateway.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Тип :     Server\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/session/session.gateway.ts:17\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                        handleConnection\n                        \n                    \n                \n            \n            \n                \nhandleConnection(socket: Socket)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/session/session.gateway.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                socket\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(socket: Socket)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/session/session.gateway.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                socket\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        handleEndSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleEndSession(sessionId: string)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Завершить сессию'})@ApiResponse({status: 200, description: 'Сессия успешно завершена.'})@SubscribeMessage('endSession')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/session/session.gateway.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        handleJoinSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinSession(data: literal type, socket: Socket)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Пользователь присоединяется к сессии'})@ApiResponse({status: 200, description: 'Пользователь успешно присоединился к сессии.'})@SubscribeMessage('joinSession')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/session/session.gateway.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                        \n                                                socket\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        handleStartSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleStartSession(sessionId: string)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Начать сессию'})@ApiResponse({status: 200, description: 'Сессия успешно начата.'})@SubscribeMessage('startSession')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/session/session.gateway.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ConnectedSocket,\n  MessageBody,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n} from '@nestjs/websockets'\nimport { Server, Socket } from 'socket.io'\nimport { SessionService } from './session.service'\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger'\n\n@ApiTags('Session Gateway')\n@WebSocketGateway()\nexport class SessionGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  @WebSocketServer() server: Server\n  private connectedUsers: Map = new Map()\n\n  constructor(private readonly sessionService: SessionService) {}\n\n  handleConnection(socket: Socket) {\n    console.log(`Клиент подключен: ${socket.id}`)\n  }\n\n  handleDisconnect(socket: Socket) {\n    console.log(`Клиент отключен: ${socket.id}`)\n    this.connectedUsers.forEach((userIds, sessionId) => {\n      this.connectedUsers.set(\n        sessionId,\n        userIds.filter((id) => id !== socket.id)\n      )\n      this.server.to(sessionId).emit('userDisconnected', socket.id)\n    })\n  }\n\n  @ApiOperation({ summary: 'Пользователь присоединяется к сессии' })\n  @ApiResponse({\n    status: 200,\n    description: 'Пользователь успешно присоединился к сессии.',\n  })\n  @SubscribeMessage('joinSession')\n  async handleJoinSession(\n    @MessageBody() data: { sessionId: string; userId: string },\n    @ConnectedSocket() socket: Socket\n  ) {\n    const { sessionId, userId } = data\n\n    // Добавить пользователя в сессию\n    if (!this.connectedUsers.has(sessionId)) {\n      this.connectedUsers.set(sessionId, [])\n    }\n    this.connectedUsers.get(sessionId).push(userId)\n\n    // Присоединить сокет к комнате сессии\n    socket.join(sessionId)\n\n    // Уведомить других участников сессии\n    this.server.to(sessionId).emit('userConnected', userId)\n    this.server.to(sessionId).emit('currentUsers', this.connectedUsers.get(sessionId))\n  }\n\n  @ApiOperation({ summary: 'Начать сессию' })\n  @ApiResponse({ status: 200, description: 'Сессия успешно начата.' })\n  @SubscribeMessage('startSession')\n  async handleStartSession(@MessageBody() sessionId: string) {\n    await this.sessionService.startSession(sessionId)\n    this.server.to(sessionId).emit('sessionStarted')\n    this.server\n      .to(sessionId)\n      .emit('notifyParticipants', 'Сессия началась, вы можете начать редактировать код.')\n  }\n\n  @ApiOperation({ summary: 'Завершить сессию' })\n  @ApiResponse({ status: 200, description: 'Сессия успешно завершена.' })\n  @SubscribeMessage('endSession')\n  async handleEndSession(@MessageBody() sessionId: string) {\n    await this.sessionService.endSession(sessionId)\n    this.server.to(sessionId).emit('sessionEnded')\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"modules/SessionModule.html":{"url":"modules/SessionModule.html","title":"module - SessionModule","body":"\n                   \n\n\n\n\n    Модули\n    SessionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_imports\n\n\n\ncluster_SessionModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nAuthModule->SessionModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nSessionModule -->\n\nEmailModule->SessionModule\n\n\n\n\n\nSessionRepository\n\nSessionRepository\n\nSessionModule -->\n\nSessionRepository->SessionModule\n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\n\n    \n    \n    \n        Приблизить\n        Сброс\n        Отдалить\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            Файл\n        \n        \n            src/crud/session/session.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Провайдеры\n                    \n                        \n                            SessionRepository\n                        \n                        \n                            SessionService\n                        \n                    \n                \n                \n                    Контроллеры\n                    \n                        \n                            SessionController\n                        \n                    \n                \n                \n                    Импорт\n                    \n                        \n                            AuthModule\n                        \n                        \n                            EmailModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { SessionController } from './session.controller'\nimport { SessionService } from './session.service'\nimport { SessionRepository } from './session.repository'\nimport { EmailModule } from '../mail/email.module'\nimport { AuthModule } from '../auth/auth.module'\nimport { SessionGateway } from './session.gateway'\n\n@Module({\n  controllers: [SessionController],\n  providers: [SessionService, SessionRepository, SessionGateway],\n  imports: [EmailModule, AuthModule],\n})\nexport class SessionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"injectables/SessionRepository.html":{"url":"injectables/SessionRepository.html","title":"injectable - SessionRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Внедрения\n  SessionRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/session/session.repository.ts\n        \n\n\n\n\n\n            \n    Индекс\n    \n        \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                addTasks\n                            \n                            \n                                count\n                            \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findById\n                            \n                            \n                                findByInterviewerId\n                            \n                            \n                                update\n                            \n                            \n                                updateActive\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Конструктор\n        \n            \n                \n                    \nconstructor(postgres: PostgresService)\n                    \n                \n                        \n                            \n                                Определен в src/crud/session/session.repository.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Параметры :\n                                    \n                                        \n                                            \n                                                Имя\n                                                    Тип\n                                                Опциональный\n                                            \n                                        \n                                        \n                                                \n                                                        postgres\n                                                  \n                                                        \n                                                                        PostgresService\n                                                        \n                                                  \n                                                    \n                                                            Нет\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                        addTasks\n                        \n                    \n                \n            \n            \n                \naddTasks(sessionId: string, taskIds: string[])\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/session/session.repository.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                        \n                                                taskIds\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n            \n                \ncount(filter: FilterSessionsDto)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/session/session.repository.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                            FilterSessionsDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(dto: CreateSessionDto)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/session/session.repository.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateSessionDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/session/session.repository.ts:124\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(filter: FilterSessionsDto, skip: number, take: number)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/session/session.repository.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                            FilterSessionsDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                        \n                                                skip\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                        \n                                                take\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById(id: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/session/session.repository.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByInterviewerId\n                        \n                    \n                \n            \n            \n                \nfindByInterviewerId(interviewerId: string, filter: FilterSessionsDto, skip: number, take: number)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/session/session.repository.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                interviewerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                        \n                                                filter\n                                            \n                                                            FilterSessionsDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                        \n                                                skip\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                        \n                                                take\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, dto: CreateSessionDto)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/session/session.repository.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateSessionDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateActive\n                        \n                    \n                \n            \n            \n                \nupdateActive(id: string, active: boolean)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/session/session.repository.ts:115\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                        \n                                                active\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { PostgresService } from '../../db/postgres/postgres.service'\nimport { CreateSessionDto } from './dto/create-session.dto'\nimport { FilterSessionsDto } from './dto/filter-sessions.dto'\n\n@Injectable()\nexport class SessionRepository {\n  constructor(private readonly postgres: PostgresService) {}\n\n  findAll(filter: FilterSessionsDto, skip: number, take: number) {\n    const { title, startDate, endDate, status } = filter\n\n    return this.postgres.session.findMany({\n      where: {\n        ...(title && { title: { contains: title, mode: 'insensitive' } }),\n        ...(startDate && { startTime: { gte: startDate } }),\n        ...(endDate && { startTime: { lte: endDate } }),\n        ...(status && { status }),\n      },\n      skip,\n      take,\n    })\n  }\n\n  count(filter: FilterSessionsDto) {\n    const { title, startDate, endDate, status } = filter\n\n    return this.postgres.session.count({\n      where: {\n        ...(title && { title: { contains: title, mode: 'insensitive' } }),\n        ...(startDate && { startTime: { gte: startDate } }),\n        ...(endDate && { startTime: { lte: endDate } }),\n        ...(status && { status }),\n      },\n    })\n  }\n\n  findByInterviewerId(\n    interviewerId: string,\n    filter: FilterSessionsDto,\n    skip: number,\n    take: number\n  ) {\n    const { title, startDate, endDate, status } = filter\n\n    return this.postgres.session.findMany({\n      where: {\n        createdById: interviewerId,\n        ...(title && { title: { contains: title, mode: 'insensitive' } }),\n        ...(startDate && { startTime: { gte: startDate } }),\n        ...(endDate && { startTime: { lte: endDate } }),\n        ...(status && { status }),\n      },\n      skip,\n      take,\n    })\n  }\n\n  create(dto: CreateSessionDto) {\n    return this.postgres.session.create({\n      data: {\n        title: dto.title,\n        startTime: new Date(dto.startTime),\n        duration: dto.duration,\n        createdById: dto.recruiter_id,\n        participants: {\n          connect: dto.participants.map((participant) => ({ email: participant.email })),\n        },\n        tasks: {\n          connect: dto.tasks.map((id) => ({ id })),\n        },\n      },\n    })\n  }\n\n  addTasks(sessionId: string, taskIds: string[]) {\n    return this.postgres.session.update({\n      where: { id: sessionId },\n      data: {\n        tasks: {\n          connect: taskIds.map((id) => ({ id })),\n        },\n      },\n    })\n  }\n\n  findById(id: string) {\n    return this.postgres.session.findUnique({\n      where: { id },\n      include: {\n        participants: true,\n        tasks: true,\n      },\n    })\n  }\n\n  update(id: string, dto: CreateSessionDto) {\n    return this.postgres.session.update({\n      where: { id },\n      data: {\n        title: dto.title,\n        startTime: new Date(dto.startTime),\n        duration: dto.duration,\n        createdById: dto.recruiter_id,\n        participants: {\n          connect: dto.participants.map((participant) => ({ email: participant.email })),\n        },\n        tasks: {\n          connect: dto.tasks.map((id) => ({ id })),\n        },\n      },\n    })\n  }\n\n  updateActive(id: string, active: boolean) {\n    return this.postgres.session.update({\n      where: { id },\n      data: {\n        isActive: active,\n      },\n    })\n  }\n\n  delete(id: string) {\n    return this.postgres.session.delete({\n      where: { id },\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"injectables/SessionService.html":{"url":"injectables/SessionService.html","title":"injectable - SessionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Внедрения\n  SessionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/session/session.service.ts\n        \n\n\n\n\n\n            \n    Индекс\n    \n        \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _generatePassword\n                            \n                            \n                                    Private\n                                    Async\n                                _getUserCredentials\n                            \n                            \n                                    Private\n                                    Async\n                                _sendInvitations\n                            \n                            \n                                    Async\n                                addTasksToSession\n                            \n                            \n                                    Async\n                                createSession\n                            \n                            \n                                    Async\n                                deleteSession\n                            \n                            \n                                    Async\n                                endSession\n                            \n                            \n                                    Async\n                                getSessionById\n                            \n                            \n                                    Async\n                                getSessions\n                            \n                            \n                                    Async\n                                startSession\n                            \n                            \n                                    Async\n                                updateSession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Конструктор\n        \n            \n                \n                    \nconstructor(sessionRepository: SessionRepository, authRepository: AuthRepository, emailService: EmailService)\n                    \n                \n                        \n                            \n                                Определен в src/crud/session/session.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Параметры :\n                                    \n                                        \n                                            \n                                                Имя\n                                                    Тип\n                                                Опциональный\n                                            \n                                        \n                                        \n                                                \n                                                        sessionRepository\n                                                  \n                                                        \n                                                                        SessionRepository\n                                                        \n                                                  \n                                                    \n                                                            Нет\n                                                    \n                                                    \n                                                \n                                                \n                                                        authRepository\n                                                  \n                                                        \n                                                                        AuthRepository\n                                                        \n                                                  \n                                                    \n                                                            Нет\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            Нет\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _generatePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    _generatePassword(length: number)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/session/session.service.ts:133\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                length\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _getUserCredentials\n                        \n                    \n                \n            \n            \n                \n                        \n                    _getUserCredentials(participants: ParticipantDto[])\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/session/session.service.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                participants\n                                            \n                                                            ParticipantDto[]\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _sendInvitations\n                        \n                    \n                \n            \n            \n                \n                        \n                    _sendInvitations(participants: ParticipantDto[], session: any, userCredentials: literal type)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/session/session.service.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                participants\n                                            \n                                                            ParticipantDto[]\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                        \n                                                userCredentials\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addTasksToSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    addTasksToSession(sessionId: string, taskIds: string[])\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/session/session.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                        \n                                                taskIds\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    createSession(dto: CreateSessionDto)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/session/session.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateSessionDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteSession(id: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/session/session.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        endSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    endSession(sessionId: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/session/session.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSessionById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSessionById(id: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/session/session.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSessions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSessions(filter: FilterSessionsDto, userRole: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/session/session.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                            FilterSessionsDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                        \n                                                userRole\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        startSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    startSession(sessionId: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/session/session.service.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateSession(id: string, dto: CreateSessionDto)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/session/session.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateSessionDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common'\nimport { SessionRepository } from './session.repository'\nimport { CreateSessionDto, ParticipantDto } from './dto/create-session.dto'\nimport { EmailService } from '../mail/email.service'\nimport { FilterSessionsDto } from './dto/filter-sessions.dto'\nimport { AuthRepository } from '../auth/auth.repository'\n\n@Injectable()\nexport class SessionService {\n  constructor(\n    private sessionRepository: SessionRepository,\n    private authRepository: AuthRepository,\n    private emailService: EmailService\n  ) {}\n\n  async getSessions(filter: FilterSessionsDto, userRole: string, userId: string) {\n    const { page = 1, pageSize = 10 } = filter\n    const skip = (page - 1) * pageSize\n\n    let sessions: any\n    if (userRole === 'HR') {\n      sessions = this.sessionRepository.findAll(filter, skip, pageSize)\n    } else if (userRole === 'INTERVIEWER') {\n      sessions = this.sessionRepository.findByInterviewerId(\n        userId,\n        filter,\n        skip,\n        pageSize\n      )\n    }\n\n    const total = this.sessionRepository.count(filter)\n\n    return {\n      total,\n      page,\n      pageSize,\n      sessions,\n    }\n  }\n\n  async addTasksToSession(sessionId: string, taskIds: string[]) {\n    const session = await this.sessionRepository.findById(sessionId)\n    if (!session) {\n      throw new NotFoundException(`Session with ID ${sessionId} not found`)\n    }\n\n    return this.sessionRepository.addTasks(sessionId, taskIds)\n  }\n\n  async createSession(dto: CreateSessionDto) {\n    const session = await this.sessionRepository.create(dto)\n    const userCredentials = await this._getUserCredentials(dto.participants)\n    await this._sendInvitations(dto.participants, session, userCredentials)\n  }\n\n  async updateSession(id: string, dto: CreateSessionDto) {\n    return this.sessionRepository.update(id, dto)\n  }\n\n  async deleteSession(id: string) {\n    return this.sessionRepository.delete(id)\n  }\n\n  async getSessionById(id: string) {\n    return this.sessionRepository.findById(id)\n  }\n\n  async startSession(sessionId: string) {\n    const session = await this.sessionRepository.findById(sessionId)\n    if (!session) {\n      throw new NotFoundException(`Session with ID ${sessionId} not found`)\n    }\n    await this.sessionRepository.updateActive(sessionId, true)\n  }\n\n  async endSession(sessionId: string) {\n    const session = await this.sessionRepository.findById(sessionId)\n    if (!session) {\n      throw new NotFoundException(`Session with ID ${sessionId} not found`)\n    }\n    await this.sessionRepository.updateActive(sessionId, true)\n  }\n\n  private async _sendInvitations(\n    participants: ParticipantDto[],\n    session: any,\n    userCredentials: { [key: string]: { login: string; password: string } }\n  ) {\n    const link = `https://your-platform.com/sessions/${session.id}`\n\n    for (const participant of participants) {\n      const credentials = userCredentials[participant.email]\n      const loginInfo = credentials\n        ? `Логин: ${credentials.login}, Пароль: ${credentials.password}`\n        : ''\n\n      await this.emailService.sendSessionInvitation(\n        participant.email,\n        session.title,\n        link,\n        loginInfo\n      )\n    }\n  }\n\n  private async _getUserCredentials(\n    participants: ParticipantDto[]\n  ): Promise {\n    const credentials = {}\n    for (const participant of participants) {\n      const email = participant.email\n      const user = await this.authRepository.findEmail(email)\n      if (user) {\n        credentials[email] = { login: email, password: user.password }\n      } else {\n        const newPassword = this._generatePassword(6)\n        const candidate = await this.authRepository.register({\n          email,\n          password: newPassword,\n          full_name: user.full_name,\n          role: 'CANDIDATE',\n        })\n        credentials[candidate.email] = {\n          login: candidate.email,\n          password: candidate.password,\n        }\n      }\n    }\n    return credentials\n  }\n\n  private _generatePassword(length: number): string {\n    const charset =\n      'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+[]{}|;:,.<>?'\n    let password = ''\n\n    for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"classes/StartSessionDto.html":{"url":"classes/StartSessionDto.html","title":"class - StartSessionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Классы\n  StartSessionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/session/dto/start-session.dto.ts\n        \n\n\n\n\n\n\n            \n    Индекс\n    \n        \n                \n                    \n                        Свойства\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                sessionId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Свойства\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @ApiProperty({description: 'ID сессии'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/session/dto/start-session.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator'\nimport { ApiProperty } from '@nestjs/swagger'\n\nexport class StartSessionDto {\n  @ApiProperty({ description: 'ID сессии' })\n  @IsString()\n  sessionId: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"controllers/TaskController.html":{"url":"controllers/TaskController.html","title":"controller - TaskController","body":"\n                   \n\n\n\n\n\n\n  Контроллеры\n  TaskController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/task/task.controller.ts\n        \n\n            \n                Префикс\n            \n            \n                tasks\n            \n\n\n\n\n\n\n            \n    Индекс\n    \n        \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTaskDto: CreateTaskDto)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Создать новую задачу'})@Post()\n                \n            \n\n                    \n                        \n                            Определен в src/crud/task/task.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                createTaskDto\n                                            \n                                                            CreateTaskDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Удалить задачу'})@Delete(':id')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/task/task.controller.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(category?: string, userId?: string)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Получить список всех задач'})@Get()\n                \n            \n\n                    \n                        \n                            Определен в src/crud/task/task.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Получить задачу по ID'})@Get(':id')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/task/task.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateTaskDto: CreateTaskDto)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Обновить задачу'})@Patch(':id')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/task/task.controller.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                        \n                                                updateTaskDto\n                                            \n                                                            CreateTaskDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpException,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n} from '@nestjs/common'\nimport { TaskService } from './task.service'\nimport { CreateTaskDto } from './dto/create-task.dto'\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger'\nimport { JwtAuthGuard } from '../../utils/jwtAuthGuard/jwtAuthGuard'\nimport { RolesGuard } from '../../utils/roleGuard/roles.guard'\nimport { Roles } from '../../utils/roleGuard/role-auth.decorator'\n\n@ApiTags('Задачи')\n@UseGuards(JwtAuthGuard, RolesGuard)\n@ApiBearerAuth()\n@Roles(['HR', 'INTERVIEWER'])\n@Controller('tasks')\nexport class TaskController {\n  constructor(private readonly taskService: TaskService) {}\n\n  @ApiOperation({ summary: 'Создать новую задачу' })\n  @Post()\n  async create(@Body() createTaskDto: CreateTaskDto) {\n    try {\n      const task = await this.taskService.create(createTaskDto)\n      return {\n        statusCode: HttpStatus.CREATED,\n        message: 'Задача успешно создана',\n        data: task,\n      }\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n\n  @ApiOperation({ summary: 'Получить список всех задач' })\n  @Get()\n  async findAll(@Query('category') category?: string, @Query('userId') userId?: string) {\n    try {\n      const tasks = await this.taskService.findAll(category, userId)\n      return {\n        statusCode: HttpStatus.OK,\n        message: 'Задачи успешно получены',\n        data: tasks,\n      }\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n\n  @ApiOperation({ summary: 'Получить задачу по ID' })\n  @Get(':id')\n  async findById(@Param('id') id: string) {\n    try {\n      const task = await this.taskService.findById(id)\n      return {\n        statusCode: HttpStatus.OK,\n        message: 'Задача успешно получена',\n        data: task,\n      }\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n\n  @ApiOperation({ summary: 'Обновить задачу' })\n  @Patch(':id')\n  async update(@Param('id') id: string, @Body() updateTaskDto: CreateTaskDto) {\n    try {\n      const task = await this.taskService.update(id, updateTaskDto)\n      return {\n        statusCode: HttpStatus.OK,\n        message: 'Задача успешно обновлена',\n        data: task,\n      }\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n\n  @ApiOperation({ summary: 'Удалить задачу' })\n  @Delete(':id')\n  async delete(@Param('id') id: string) {\n    try {\n      await this.taskService.delete(id)\n      return {\n        statusCode: HttpStatus.NO_CONTENT,\n        message: 'Задача успешно удалена',\n      }\n    } catch (error) {\n      throw new HttpException(error.response, error.status)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"classes/TaskGateway.html":{"url":"classes/TaskGateway.html","title":"class - TaskGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Классы\n  TaskGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/task/task.gateway.ts\n        \n\n\n\n\n\n\n            \n    Индекс\n    \n        \n                \n                    \n                        Свойства\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                handleChangedCode\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                handleCodeRunTest\n                            \n                            \n                                    \n                                    \n                                    \n                                handleUpdateCursor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Конструктор\n        \n            \n                \n                    \nconstructor(taskService: TaskService)\n                    \n                \n                        \n                            \n                                Определен в src/crud/task/task.gateway.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Параметры :\n                                    \n                                        \n                                            \n                                                Имя\n                                                    Тип\n                                                Опциональный\n                                            \n                                        \n                                        \n                                                \n                                                        taskService\n                                                  \n                                                        \n                                                                        TaskService\n                                                        \n                                                  \n                                                    \n                                                            Нет\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Свойства\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Тип :     Server\n\n                    \n                \n                \n                    \n                        Декораторы : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Определен в src/crud/task/task.gateway.ts:22\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        handleChangedCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleChangedCode(data: IData)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Изменение кода в сессии'})@ApiResponse({status: 200, description: 'Код успешно изменен.'})@SubscribeMessage('sessionChangeCode')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/task/task.gateway.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            IData\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        handleCodeRunTest\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleCodeRunTest(data: IData)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Запуск теста кода'})@ApiResponse({status: 200, description: 'Тест кода успешно выполнен.'})@SubscribeMessage('codeRunTest')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/task/task.gateway.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            IData\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        handleUpdateCursor\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUpdateCursor(data: literal type)\n                \n            \n\n            \n                \n                    Декораторы : \n                    \n                    @ApiOperation({summary: 'Обновление позиции курсора'})@ApiResponse({status: 200, description: 'Позиция курсора успешно обновлена.'})@SubscribeMessage('updateCursor')\n                \n            \n\n                    \n                        \n                            Определен в src/crud/task/task.gateway.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  MessageBody,\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n} from '@nestjs/websockets'\nimport { Server } from 'socket.io'\nimport { TaskService } from './task.service'\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger'\n\ninterface IData {\n  sessionId: string\n  userId: string\n  language: string\n  code: string\n  cursorPosition?: number\n}\n\n@ApiTags('Task Gateway')\n@WebSocketGateway()\nexport class TaskGateway {\n  @WebSocketServer() server: Server\n\n  constructor(private readonly taskService: TaskService) {}\n\n  @ApiOperation({ summary: 'Изменение кода в сессии' })\n  @ApiResponse({ status: 200, description: 'Код успешно изменен.' })\n  @SubscribeMessage('sessionChangeCode')\n  async handleChangedCode(@MessageBody() data: IData) {\n    this.server.to(data.sessionId).emit('change-code', data)\n  }\n\n  @ApiOperation({ summary: 'Запуск теста кода' })\n  @ApiResponse({ status: 200, description: 'Тест кода успешно выполнен.' })\n  @SubscribeMessage('codeRunTest')\n  async handleCodeRunTest(@MessageBody() data: IData) {\n    const result = await this.taskService.runTestCode(data.language, data.code)\n    this.server.to(data.sessionId).emit('test-code', result)\n  }\n\n  @ApiOperation({ summary: 'Обновление позиции курсора' })\n  @ApiResponse({ status: 200, description: 'Позиция курсора успешно обновлена.' })\n  @SubscribeMessage('updateCursor')\n  handleUpdateCursor(\n    @MessageBody() data: { sessionId: string; userId: string; cursorPosition: number }\n  ) {\n    this.server.to(data.sessionId).emit('cursorUpdate', {\n      userId: data.userId,\n      cursorPosition: data.cursorPosition,\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"modules/TaskModule.html":{"url":"modules/TaskModule.html","title":"module - TaskModule","body":"\n                   \n\n\n\n\n    Модули\n    TaskModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_providers\n\n\n\n\nTaskRepository\n\nTaskRepository\n\n\n\nTaskModule\n\nTaskModule\n\nTaskModule -->\n\nTaskRepository->TaskModule\n\n\n\n\n\nTaskService\n\nTaskService\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\n\n    \n    \n    \n        Приблизить\n        Сброс\n        Отдалить\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            Файл\n        \n        \n            src/crud/task/task.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Провайдеры\n                    \n                        \n                            TaskRepository\n                        \n                        \n                            TaskService\n                        \n                    \n                \n                \n                    Контроллеры\n                    \n                        \n                            TaskController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { TaskController } from './task.controller'\nimport { TaskRepository } from './task.repository'\nimport { TaskService } from './task.service'\nimport { TaskGateway } from './task.gateway'\n\n@Module({\n  controllers: [TaskController],\n  providers: [TaskService, TaskRepository, TaskGateway],\n})\nexport class TaskModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"injectables/TaskRepository.html":{"url":"injectables/TaskRepository.html","title":"injectable - TaskRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Внедрения\n  TaskRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/task/task.repository.ts\n        \n\n\n\n\n\n            \n    Индекс\n    \n        \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findById\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Конструктор\n        \n            \n                \n                    \nconstructor(postgres: PostgresService)\n                    \n                \n                        \n                            \n                                Определен в src/crud/task/task.repository.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Параметры :\n                                    \n                                        \n                                            \n                                                Имя\n                                                    Тип\n                                                Опциональный\n                                            \n                                        \n                                        \n                                                \n                                                        postgres\n                                                  \n                                                        \n                                                                        PostgresService\n                                                        \n                                                  \n                                                    \n                                                            Нет\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(dto: CreateTaskDto)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/task/task.repository.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateTaskDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/task/task.repository.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(category?: string, userId?: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/task/task.repository.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById(id: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/task/task.repository.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, dto: CreateTaskDto)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/task/task.repository.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateTaskDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { PostgresService } from '../../db/postgres/postgres.service'\nimport { CreateTaskDto } from './dto/create-task.dto'\n\n@Injectable()\nexport class TaskRepository {\n  constructor(private readonly postgres: PostgresService) {}\n\n  create(dto: CreateTaskDto) {\n    return this.postgres.task.create({\n      data: dto,\n    })\n  }\n\n  update(id: string, dto: CreateTaskDto) {\n    return this.postgres.task.update({\n      where: { id },\n      data: dto,\n    })\n  }\n\n  findById(id: string) {\n    return this.postgres.task.findUnique({ where: { id } })\n  }\n\n  delete(id: string) {\n    return this.postgres.task.delete({ where: { id } })\n  }\n\n  async findAll(category?: string, userId?: string) {\n    const where: any = {}\n\n    if (category) {\n      where.categoryName = category\n    }\n\n    if (userId) {\n      where.userId = userId\n    }\n\n    return this.postgres.task.findMany({\n      where,\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"injectables/TaskService.html":{"url":"injectables/TaskService.html","title":"injectable - TaskService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Внедрения\n  TaskService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            Файл\n        \n        \n            src/crud/task/task.service.ts\n        \n\n\n\n\n\n            \n    Индекс\n    \n        \n\n                \n                    \n                        Методы\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                runTestCode\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Конструктор\n        \n            \n                \n                    \nconstructor(taskRepository: TaskRepository)\n                    \n                \n                        \n                            \n                                Определен в src/crud/task/task.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Параметры :\n                                    \n                                        \n                                            \n                                                Имя\n                                                    Тип\n                                                Опциональный\n                                            \n                                        \n                                        \n                                                \n                                                        taskRepository\n                                                  \n                                                        \n                                                                        TaskRepository\n                                                        \n                                                  \n                                                    \n                                                            Нет\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Методы\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTaskDto: CreateTaskDto)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/task/task.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                createTaskDto\n                                            \n                                                            CreateTaskDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/task/task.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(category?: string, userId?: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/task/task.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Да\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/task/task.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        runTestCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    runTestCode(language: string, code: string)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/task/task.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                language\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                        \n                                                code\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateTaskDto: CreateTaskDto)\n                \n            \n\n\n                    \n                        \n                            Определен в src/crud/task/task.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Параметры :\n                                \n                                \n                                    \n                                        \n                                            Имя\n                                                Тип\n                                            Опциональный\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                        \n                                                updateTaskDto\n                                            \n                                                            CreateTaskDto\n                                            \n\n                                            \n                                                    Нет\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Тип возвращаемого значения :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common'\nimport { TaskRepository } from './task.repository'\nimport { CreateTaskDto } from './dto/create-task.dto'\n\n@Injectable()\nexport class TaskService {\n  constructor(private readonly taskRepository: TaskRepository) {}\n\n  async create(createTaskDto: CreateTaskDto) {\n    return this.taskRepository.create(createTaskDto)\n  }\n\n  async findAll(category?: string, userId?: string) {\n    return this.taskRepository.findAll(category, userId)\n  }\n\n  async runTestCode(language: string, code: string) {\n    const url = 'http://localhost:3000/run'\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ language, code }),\n    })\n\n    if (!response.ok) {\n      throw new Error(`Ошибка: ${response.statusText}`)\n    }\n\n    return await response.json()\n  }\n\n  async findById(id: string) {\n    const task = await this.taskRepository.findById(id)\n    if (!task) {\n      throw new NotFoundException(`Task with ID ${id} not found`)\n    }\n    return task\n  }\n\n  async update(id: string, updateTaskDto: CreateTaskDto) {\n    const task = await this.findById(id)\n    if (!task) {\n      throw new NotFoundException(`Task with ID ${id} not found`)\n    }\n    return this.taskRepository.update(id, updateTaskDto)\n  }\n\n  async delete(id: string) {\n    const task = await this.findById(id)\n    if (!task) {\n      throw new NotFoundException(`Task with ID ${id} not found`)\n    }\n    return this.taskRepository.delete(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Покрытие документацией\n\n\n\n    \n\n\n\n    \n        \n            Файл\n            Тип\n            Идентификатор\n            Утверждения\n        \n    \n    \n        \n            \n                \n                src/crud/auth/auth.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/crud/auth/auth.repository.ts\n            \n            injectable\n            AuthRepository\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                        src/crud/auth/auth.repository.ts\n            \n            variable\n            SELECT_FIELDS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/crud/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/crud/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/crud/auth/service/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/crud/auth/service/auth.service.ts\n            \n            interface\n            IGenerateTokens\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/crud/auth/service/auth.service.ts\n            \n            interface\n            ILogin\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/crud/auth/service/auth.service.ts\n            \n            interface\n            IUser\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/crud/auth/service/refresh.service.ts\n            \n            injectable\n            RefreshService\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/crud/finalTest/dto/create-final-test.dto.ts\n            \n            class\n            CreateFinalTestDto\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/crud/finalTest/finalTest.controller.ts\n            \n            controller\n            FinalTestController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/crud/finalTest/finalTest.repository.ts\n            \n            class\n            FinalTestRepository\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/crud/finalTest/finalTest.service.ts\n            \n            injectable\n            FinalTestService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/crud/interview/dto/create-interview.dto.ts\n            \n            class\n            CreateInterviewDto\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/crud/interview/interview.controller.ts\n            \n            controller\n            InterviewController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/crud/interview/interview.repository.ts\n            \n            injectable\n            InterviewRepository\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/crud/interview/interview.service.ts\n            \n            injectable\n            InterviewService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/crud/mail/email.service.ts\n            \n            injectable\n            EmailService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/crud/question/dto/create-question.dto.ts\n            \n            class\n            CreateQuestionWithGroupDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/crud/question/dto/create-question.dto.ts\n            \n            class\n            QuestionDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/crud/question/question.controller.ts\n            \n            controller\n            QuestionController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/crud/question/question.repository.ts\n            \n            injectable\n            QuestionRepository\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/crud/question/question.service.ts\n            \n            injectable\n            QuestionService\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/crud/session/dto/add-tasks.dto.ts\n            \n            class\n            AddTasksDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/crud/session/dto/create-session.dto.ts\n            \n            class\n            CreateSessionDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/crud/session/dto/create-session.dto.ts\n            \n            class\n            ParticipantDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/crud/session/dto/filter-sessions.dto.ts\n            \n            class\n            FilterSessionsDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/crud/session/dto/start-session.dto.ts\n            \n            class\n            StartSessionDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/crud/session/session.controller.ts\n            \n            controller\n            SessionController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/crud/session/session.controller.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crud/session/session.gateway.ts\n            \n            class\n            SessionGateway\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/crud/session/session.repository.ts\n            \n            injectable\n            SessionRepository\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/crud/session/session.service.ts\n            \n            injectable\n            SessionService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/crud/task/dto/create-task.dto.ts\n            \n            class\n            CreateTaskDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/crud/task/task.controller.ts\n            \n            controller\n            TaskController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/crud/task/task.gateway.ts\n            \n            class\n            TaskGateway\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/crud/task/task.gateway.ts\n            \n            interface\n            IData\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/crud/task/task.repository.ts\n            \n            injectable\n            TaskRepository\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/crud/task/task.service.ts\n            \n            injectable\n            TaskService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/crud/сandidateInterview/dto/create-сandidateInterview.dto.ts\n            \n            class\n            CreateCandidateInterviewDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/crud/сandidateInterview/сandidateInterview.controller.ts\n            \n            controller\n            CandidateInterviewController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/crud/сandidateInterview/сandidateInterview.repository.ts\n            \n            injectable\n            CandidateInterviewRepository\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/crud/сandidateInterview/сandidateInterview.service.ts\n            \n            injectable\n            CandidateInterviewService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/db/postgres/postgres.service.ts\n            \n            injectable\n            PostgresService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/db/redis/redis.service.ts\n            \n            injectable\n            RedisService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/apiError/apiError.ts\n            \n            class\n            ApiError\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/utils/jwt/jwt.service.ts\n            \n            injectable\n            JwtService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/utils/jwtAuthGuard/jwtAuthGuard.ts\n            \n            guard\n            JwtAuthGuard\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/utils/resBuild/resBuild.service.ts\n            \n            injectable\n            ResponseBuildService\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/utils/resBuild/resBuild.service.ts\n            \n            interface\n            IResponseBuild\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                        src/utils/roleGuard/role-auth.decorator.ts\n            \n            variable\n            ROLE_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/roleGuard/role-auth.decorator.ts\n            \n            variable\n            Roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/roleGuard/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                66 %\n                (2/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Зависимости\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^4.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/platform-socket.io : ^11.0.11\n        \n            @nestjs/swagger : ^11.0.3\n        \n            @nestjs/websockets : ^11.0.11\n        \n            @prisma/client : ^6.5.0\n        \n            argon2 : ^0.41.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cookie-parser : ^1.4.7\n        \n            cross-env : ^7.0.3\n        \n            ioredis : ^5.5.0\n        \n            jsonwebtoken : ^9.0.2\n        \n            nodemailer : ^6.10.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            socket.io : ^4.8.1\n        \n            swagger-ui-express : ^5.0.1\n    \n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Разное\n  Функции\n\n\n\n    Индекс\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDocker\nПример :# Сборка\ndocker build -t client .\n\n# Запуск\ndocker run -d -p 80:80 clientили\nПример :docker compose up --build -dКоманды\n\nЗаметка: запускать через yarn «имя команды»\n\n\n\n\nКоманда\nОписание\n\n\n\n\ninstall\nУстановить зависимости\n\n\nstart:dev\nЗапустить Development режим\n\n\nstart:prod\nЗапустить Production режим\n\n\nlint\nПроверяет наличие ошибок во всём проекте\n\n\nlint --fix\nИсправление ошибок во всём проекте\n\n\nbuild\nСобрать проект\n\n\npreview\nПросмотр собранного проекта\n\n\nformat\nформатирование всего кода по правилам prettier\n\n\n\nEnvironment variables\nПримечание: Переменные, не имеющие значений по умолчанию, являются обязательными\n\n\n\nНазвание\nЗначение\nОписание\n\n\n\n\nPOSTGRES_USER\nroot\nИмя пользователя\n\n\nPOSTGRES_PASSWORD\nroot\nПароль\n\n\nPOSTGRES_DB\ndb\nИмя базы данных\n\n\nPORT\n5432\nПорт БД\n\n\nDATABASE_URL\npostgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@dpg-cqbfftrv2p9s73eqlqvg-a.singapore-postgres.render.com:${PORT}/${POSTGRES_DB}?schema=public\nURL БД\n\n\nURL_CLIENT\nhttp://localhost:3000\nURL Клиентской части\n\n\nREDIS_HOST\nredis\nИмя пользователя\n\n\nREDIS_PORT\n6379\nИмя пользователя\n\n\nJWT_SECRET\nqrUFW323rgrth43fewpo\nИмя пользователя\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Модули\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Браузер не поддерживает SVG\n                                    \n                                \n                        \n                            Обзор\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Браузер не поддерживает SVG\n                                    \n                                \n                        \n                            Обзор\n                        \n                    \n                \n            \n            \n                \n                    \n                        CandidateInterviewModule\n                    \n                    \n                                \n                                    \n                                        Браузер не поддерживает SVG\n                                    \n                                \n                        \n                            Обзор\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Браузер не поддерживает SVG\n                                    \n                                \n                        \n                            Обзор\n                        \n                    \n                \n            \n            \n                \n                    \n                        FinalTestModule\n                    \n                    \n                                \n                                    \n                                        Браузер не поддерживает SVG\n                                    \n                                \n                        \n                            Обзор\n                        \n                    \n                \n            \n            \n                \n                    \n                        InterviewModule\n                    \n                    \n                                \n                                    \n                                        Браузер не поддерживает SVG\n                                    \n                                \n                        \n                            Обзор\n                        \n                    \n                \n            \n            \n                \n                    \n                        JwtModule\n                    \n                    \n                                \n                                    \n                                        Браузер не поддерживает SVG\n                                    \n                                \n                        \n                            Обзор\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostgresModule\n                    \n                    \n                                \n                                    \n                                        Браузер не поддерживает SVG\n                                    \n                                \n                        \n                            Обзор\n                        \n                    \n                \n            \n            \n                \n                    \n                        QuestionModule\n                    \n                    \n                                \n                                    \n                                        Браузер не поддерживает SVG\n                                    \n                                \n                        \n                            Обзор\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisModule\n                    \n                    \n                                \n                                    \n                                        Браузер не поддерживает SVG\n                                    \n                                \n                        \n                            Обзор\n                        \n                    \n                \n            \n            \n                \n                    \n                        ResponseBuilderModule\n                    \n                    \n                                \n                                    \n                                        Браузер не поддерживает SVG\n                                    \n                                \n                        \n                            Обзор\n                        \n                    \n                \n            \n            \n                \n                    \n                        SessionModule\n                    \n                    \n                                \n                                    \n                                        Браузер не поддерживает SVG\n                                    \n                                \n                        \n                            Обзор\n                        \n                    \n                \n            \n            \n                \n                    \n                        TaskModule\n                    \n                    \n                                \n                                    \n                                        Браузер не поддерживает SVG\n                                    \n                                \n                        \n                            Обзор\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Обзор\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CandidateInterviewModule\n\n\n\ncluster_CandidateInterviewModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_FinalTestModule\n\n\n\ncluster_FinalTestModule_providers\n\n\n\ncluster_InterviewModule\n\n\n\ncluster_InterviewModule_providers\n\n\n\ncluster_JwtModule\n\n\n\ncluster_JwtModule_exports\n\n\n\ncluster_JwtModule_providers\n\n\n\ncluster_PostgresModule\n\n\n\ncluster_PostgresModule_exports\n\n\n\ncluster_PostgresModule_providers\n\n\n\ncluster_QuestionModule\n\n\n\ncluster_QuestionModule_providers\n\n\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_exports\n\n\n\ncluster_RedisModule_providers\n\n\n\ncluster_ResponseBuilderModule\n\n\n\ncluster_ResponseBuilderModule_exports\n\n\n\ncluster_ResponseBuilderModule_providers\n\n\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_TaskModule\n\n\n\ncluster_TaskModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nAuthModule->SessionModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthRepository \n\nAuthRepository \n\nAuthRepository  -->\n\nAuthModule->AuthRepository \n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCandidateInterviewModule\n\nCandidateInterviewModule\n\nAppModule -->\n\nCandidateInterviewModule->AppModule\n\n\n\nAppModule -->\n\nCandidateInterviewModule->AppModule\n\n\n\n\n\nFinalTestModule\n\nFinalTestModule\n\nAppModule -->\n\nFinalTestModule->AppModule\n\n\n\n\n\nInterviewModule\n\nInterviewModule\n\nAppModule -->\n\nInterviewModule->AppModule\n\n\n\n\n\nJwtModule\n\nJwtModule\n\nAppModule -->\n\nJwtModule->AppModule\n\n\n\n\n\nJwtService \n\nJwtService \n\nJwtService  -->\n\nJwtModule->JwtService \n\n\n\n\n\nPostgresModule\n\nPostgresModule\n\nAppModule -->\n\nPostgresModule->AppModule\n\n\n\n\n\nPostgresService \n\nPostgresService \n\nPostgresService  -->\n\nPostgresModule->PostgresService \n\n\n\n\n\nQuestionModule\n\nQuestionModule\n\nAppModule -->\n\nQuestionModule->AppModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAuthModule -->\n\nRedisModule->AuthModule\n\n\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nRedisService \n\nRedisService \n\nRedisService  -->\n\nRedisModule->RedisService \n\n\n\n\n\nResponseBuilderModule\n\nResponseBuilderModule\n\nAppModule -->\n\nResponseBuilderModule->AppModule\n\n\n\n\n\nResponseBuildService \n\nResponseBuildService \n\nResponseBuildService  -->\n\nResponseBuilderModule->ResponseBuildService \n\n\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nTaskModule\n\nTaskModule\n\nAppModule -->\n\nTaskModule->AppModule\n\n\n\n\n\nAuthRepository\n\nAuthRepository\n\nAuthModule -->\n\nAuthRepository->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRefreshService\n\nRefreshService\n\nAuthModule -->\n\nRefreshService->AuthModule\n\n\n\n\n\nCandidateInterviewRepository\n\nCandidateInterviewRepository\n\nCandidateInterviewModule -->\n\nCandidateInterviewRepository->CandidateInterviewModule\n\n\n\n\n\nCandidateInterviewService\n\nCandidateInterviewService\n\nCandidateInterviewModule -->\n\nCandidateInterviewService->CandidateInterviewModule\n\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nSessionModule -->\n\nEmailModule->SessionModule\n\n\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nFinalTestService\n\nFinalTestService\n\nFinalTestModule -->\n\nFinalTestService->FinalTestModule\n\n\n\n\n\nInterviewRepository\n\nInterviewRepository\n\nInterviewModule -->\n\nInterviewRepository->InterviewModule\n\n\n\n\n\nInterviewService\n\nInterviewService\n\nInterviewModule -->\n\nInterviewService->InterviewModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nJwtModule -->\n\nJwtService->JwtModule\n\n\n\n\n\nPostgresService\n\nPostgresService\n\nPostgresModule -->\n\nPostgresService->PostgresModule\n\n\n\n\n\nQuestionRepository\n\nQuestionRepository\n\nQuestionModule -->\n\nQuestionRepository->QuestionModule\n\n\n\n\n\nQuestionService\n\nQuestionService\n\nQuestionModule -->\n\nQuestionService->QuestionModule\n\n\n\n\n\nRedisService\n\nRedisService\n\nRedisModule -->\n\nRedisService->RedisModule\n\n\n\n\n\nResponseBuildService\n\nResponseBuildService\n\nResponseBuilderModule -->\n\nResponseBuildService->ResponseBuilderModule\n\n\n\n\n\nSessionRepository\n\nSessionRepository\n\nSessionModule -->\n\nSessionRepository->SessionModule\n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\nTaskRepository\n\nTaskRepository\n\nTaskModule -->\n\nTaskRepository->TaskModule\n\n\n\n\n\nTaskService\n\nTaskService\n\nTaskModule -->\n\nTaskService->TaskModule\n\n\n\n\n\n\n    \n    \n    \n        Приблизить\n        Сброс\n        Отдалить\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        13 Модули\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Контроллеры\n                \n            \n        \n        \n            \n                \n                    \n                    19 Внедрения\n                \n            \n        \n        \n            \n                \n                    \n                    17 Классы\n                \n            \n        \n        \n            \n                \n                    \n                    2 Защитники\n                \n            \n        \n        \n            \n                \n                    \n                    5 Интерфейсы\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Свойства\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : Власов И.А.\n    \n\n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Разное\n  Переменные\n\n\n\n    Индекс\n    \n        \n            \n                \n                    \n                        \n                            ROLE_KEY   (src/.../role-auth.decorator.ts)\n                        \n                        \n                            Roles   (src/.../role-auth.decorator.ts)\n                        \n                        \n                            SELECT_FIELDS   (src/.../auth.repository.ts)\n                        \n                        \n                            User   (src/.../session.controller.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/roleGuard/role-auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ROLE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         string\n\n                    \n                \n                \n                    \n                        Значение по умолчанию : 'role'\n                    \n                \n\n            \n                \n                    Ключ для метаданных роли.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Значение по умолчанию : (roles: string[]) => SetMetadata(ROLE_KEY, roles)\n                    \n                \n\n            \n                \n                    Декоратор для установки ролей для обработчиков маршрутов.\n\n                \n            \n\n        \n    \n\n    src/crud/auth/auth.repository.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SELECT_FIELDS\n                        \n                    \n                \n            \n                \n                    \n                        Тип :         object\n\n                    \n                \n                \n                    \n                        Значение по умолчанию : {\n  id: true,\n  email: true,\n  full_name: true,\n  password: true,\n  role: true,\n}\n                    \n                \n\n            \n                \n                    Репозиторий для работы с пользователями (AuthRepository).\nЭтот класс управляет взаимодействием с базой данных для операций аутентификации.\n\n                \n            \n\n        \n    \n\n    src/crud/session/session.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Значение по умолчанию : createParamDecorator((data: string, ctx: ExecutionContext) => {\n  const request = ctx.switchToHttp().getRequest()\n  return data ? request.user[data] : request.user\n})\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         результатов найдено \"\"\n        \n    \n    \n        Результаты не найдены \"\"\n    \n\n"}}
}
